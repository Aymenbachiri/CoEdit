// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownedDocuments    Document[]         @relation("DocumentOwner")
  documentAccess    DocumentAccess[]
  operations        Operation[]
  cursors           UserCursor[]
  presence          UserPresence?
  documentSnapshots DocumentSnapshot[] @relation("SnapshotCreator")
  lineEdits         LineEdit[]

  @@map("users")
}

model Document {
  id        String   @id @default(uuid())
  title     String
  content   String?  @db.Text
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String
  owner   User   @relation("DocumentOwner", fields: [ownerId], references: [id])

  documentAccess DocumentAccess[]
  operations     Operation[]
  cursors        UserCursor[]
  snapshots      DocumentSnapshot[]
  lines          DocumentLine[]

  @@map("documents")
}

model DocumentAccess {
  id        String   @id @default(uuid())
  role      Role     @default(VIEWER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([documentId, userId])
  @@map("document_access")
}

enum Role {
  OWNER
  EDITOR
  VIEWER
}

model Operation {
  id        String   @id @default(uuid())
  type      OpType
  position  Int
  length    Int?
  content   String?
  createdAt DateTime @default(now())

  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id])

  @@map("operations")
}

enum OpType {
  INSERT
  DELETE
  RETAIN
}

model UserCursor {
  id             String   @id @default(uuid())
  cursorPos      Int
  selectionStart Int?
  selectionEnd   Int?
  color          String   @default("#3B82F6")
  lastActive     DateTime @default(now())

  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([documentId, userId])
  @@map("user_cursors")
}

model UserPresence {
  id         String         @id @default(uuid())
  status     PresenceStatus @default(ONLINE)
  lastActive DateTime       @default(now())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_presence")
}

enum PresenceStatus {
  ONLINE
  IDLE
  OFFLINE
}

model DocumentSnapshot {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())

  documentId  String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  createdById String
  createdBy   User     @relation("SnapshotCreator", fields: [createdById], references: [id])

  @@map("document_snapshots")
}

model DocumentLine {
  id         String   @id @default(uuid())
  lineNumber Int
  content    String   @db.Text
  createdAt  DateTime @default(now())

  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  lineEdits LineEdit[]

  @@unique([documentId, lineNumber])
  @@map("document_lines")
}

model LineEdit {
  id       String   @id @default(uuid())
  editedAt DateTime @default(now())

  lineId String
  line   DocumentLine @relation(fields: [lineId], references: [id], onDelete: Cascade)
  userId String
  user   User         @relation(fields: [userId], references: [id])

  @@map("line_edits")
}

model MediaUpload {
  id        String   @id @default(uuid())
  fileName  String
  fileUrl   String
  fileType  String
  fileSize  Int
  createdAt DateTime @default(now())

  @@map("media_uploads")
}
