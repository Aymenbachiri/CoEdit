
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Document
 * 
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>
/**
 * Model DocumentAccess
 * 
 */
export type DocumentAccess = $Result.DefaultSelection<Prisma.$DocumentAccessPayload>
/**
 * Model Operation
 * 
 */
export type Operation = $Result.DefaultSelection<Prisma.$OperationPayload>
/**
 * Model UserCursor
 * 
 */
export type UserCursor = $Result.DefaultSelection<Prisma.$UserCursorPayload>
/**
 * Model UserPresence
 * 
 */
export type UserPresence = $Result.DefaultSelection<Prisma.$UserPresencePayload>
/**
 * Model DocumentSnapshot
 * 
 */
export type DocumentSnapshot = $Result.DefaultSelection<Prisma.$DocumentSnapshotPayload>
/**
 * Model DocumentLine
 * 
 */
export type DocumentLine = $Result.DefaultSelection<Prisma.$DocumentLinePayload>
/**
 * Model LineEdit
 * 
 */
export type LineEdit = $Result.DefaultSelection<Prisma.$LineEditPayload>
/**
 * Model MediaUpload
 * 
 */
export type MediaUpload = $Result.DefaultSelection<Prisma.$MediaUploadPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  OWNER: 'OWNER',
  EDITOR: 'EDITOR',
  VIEWER: 'VIEWER'
};

export type Role = (typeof Role)[keyof typeof Role]


export const OpType: {
  INSERT: 'INSERT',
  DELETE: 'DELETE',
  RETAIN: 'RETAIN'
};

export type OpType = (typeof OpType)[keyof typeof OpType]


export const PresenceStatus: {
  ONLINE: 'ONLINE',
  IDLE: 'IDLE',
  OFFLINE: 'OFFLINE'
};

export type PresenceStatus = (typeof PresenceStatus)[keyof typeof PresenceStatus]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type OpType = $Enums.OpType

export const OpType: typeof $Enums.OpType

export type PresenceStatus = $Enums.PresenceStatus

export const PresenceStatus: typeof $Enums.PresenceStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.documentAccess`: Exposes CRUD operations for the **DocumentAccess** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DocumentAccesses
    * const documentAccesses = await prisma.documentAccess.findMany()
    * ```
    */
  get documentAccess(): Prisma.DocumentAccessDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.operation`: Exposes CRUD operations for the **Operation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Operations
    * const operations = await prisma.operation.findMany()
    * ```
    */
  get operation(): Prisma.OperationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userCursor`: Exposes CRUD operations for the **UserCursor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserCursors
    * const userCursors = await prisma.userCursor.findMany()
    * ```
    */
  get userCursor(): Prisma.UserCursorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userPresence`: Exposes CRUD operations for the **UserPresence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPresences
    * const userPresences = await prisma.userPresence.findMany()
    * ```
    */
  get userPresence(): Prisma.UserPresenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.documentSnapshot`: Exposes CRUD operations for the **DocumentSnapshot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DocumentSnapshots
    * const documentSnapshots = await prisma.documentSnapshot.findMany()
    * ```
    */
  get documentSnapshot(): Prisma.DocumentSnapshotDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.documentLine`: Exposes CRUD operations for the **DocumentLine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DocumentLines
    * const documentLines = await prisma.documentLine.findMany()
    * ```
    */
  get documentLine(): Prisma.DocumentLineDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lineEdit`: Exposes CRUD operations for the **LineEdit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LineEdits
    * const lineEdits = await prisma.lineEdit.findMany()
    * ```
    */
  get lineEdit(): Prisma.LineEditDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mediaUpload`: Exposes CRUD operations for the **MediaUpload** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MediaUploads
    * const mediaUploads = await prisma.mediaUpload.findMany()
    * ```
    */
  get mediaUpload(): Prisma.MediaUploadDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Document: 'Document',
    DocumentAccess: 'DocumentAccess',
    Operation: 'Operation',
    UserCursor: 'UserCursor',
    UserPresence: 'UserPresence',
    DocumentSnapshot: 'DocumentSnapshot',
    DocumentLine: 'DocumentLine',
    LineEdit: 'LineEdit',
    MediaUpload: 'MediaUpload'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "document" | "documentAccess" | "operation" | "userCursor" | "userPresence" | "documentSnapshot" | "documentLine" | "lineEdit" | "mediaUpload"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
      DocumentAccess: {
        payload: Prisma.$DocumentAccessPayload<ExtArgs>
        fields: Prisma.DocumentAccessFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentAccessFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentAccessPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentAccessFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentAccessPayload>
          }
          findFirst: {
            args: Prisma.DocumentAccessFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentAccessPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentAccessFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentAccessPayload>
          }
          findMany: {
            args: Prisma.DocumentAccessFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentAccessPayload>[]
          }
          create: {
            args: Prisma.DocumentAccessCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentAccessPayload>
          }
          createMany: {
            args: Prisma.DocumentAccessCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentAccessCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentAccessPayload>[]
          }
          delete: {
            args: Prisma.DocumentAccessDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentAccessPayload>
          }
          update: {
            args: Prisma.DocumentAccessUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentAccessPayload>
          }
          deleteMany: {
            args: Prisma.DocumentAccessDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentAccessUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentAccessUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentAccessPayload>[]
          }
          upsert: {
            args: Prisma.DocumentAccessUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentAccessPayload>
          }
          aggregate: {
            args: Prisma.DocumentAccessAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumentAccess>
          }
          groupBy: {
            args: Prisma.DocumentAccessGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentAccessGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentAccessCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentAccessCountAggregateOutputType> | number
          }
        }
      }
      Operation: {
        payload: Prisma.$OperationPayload<ExtArgs>
        fields: Prisma.OperationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OperationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OperationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationPayload>
          }
          findFirst: {
            args: Prisma.OperationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OperationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationPayload>
          }
          findMany: {
            args: Prisma.OperationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationPayload>[]
          }
          create: {
            args: Prisma.OperationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationPayload>
          }
          createMany: {
            args: Prisma.OperationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OperationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationPayload>[]
          }
          delete: {
            args: Prisma.OperationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationPayload>
          }
          update: {
            args: Prisma.OperationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationPayload>
          }
          deleteMany: {
            args: Prisma.OperationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OperationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OperationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationPayload>[]
          }
          upsert: {
            args: Prisma.OperationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperationPayload>
          }
          aggregate: {
            args: Prisma.OperationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOperation>
          }
          groupBy: {
            args: Prisma.OperationGroupByArgs<ExtArgs>
            result: $Utils.Optional<OperationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OperationCountArgs<ExtArgs>
            result: $Utils.Optional<OperationCountAggregateOutputType> | number
          }
        }
      }
      UserCursor: {
        payload: Prisma.$UserCursorPayload<ExtArgs>
        fields: Prisma.UserCursorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserCursorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCursorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserCursorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCursorPayload>
          }
          findFirst: {
            args: Prisma.UserCursorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCursorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserCursorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCursorPayload>
          }
          findMany: {
            args: Prisma.UserCursorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCursorPayload>[]
          }
          create: {
            args: Prisma.UserCursorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCursorPayload>
          }
          createMany: {
            args: Prisma.UserCursorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCursorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCursorPayload>[]
          }
          delete: {
            args: Prisma.UserCursorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCursorPayload>
          }
          update: {
            args: Prisma.UserCursorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCursorPayload>
          }
          deleteMany: {
            args: Prisma.UserCursorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserCursorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserCursorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCursorPayload>[]
          }
          upsert: {
            args: Prisma.UserCursorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCursorPayload>
          }
          aggregate: {
            args: Prisma.UserCursorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserCursor>
          }
          groupBy: {
            args: Prisma.UserCursorGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserCursorGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCursorCountArgs<ExtArgs>
            result: $Utils.Optional<UserCursorCountAggregateOutputType> | number
          }
        }
      }
      UserPresence: {
        payload: Prisma.$UserPresencePayload<ExtArgs>
        fields: Prisma.UserPresenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPresenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPresencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPresenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPresencePayload>
          }
          findFirst: {
            args: Prisma.UserPresenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPresencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPresenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPresencePayload>
          }
          findMany: {
            args: Prisma.UserPresenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPresencePayload>[]
          }
          create: {
            args: Prisma.UserPresenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPresencePayload>
          }
          createMany: {
            args: Prisma.UserPresenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserPresenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPresencePayload>[]
          }
          delete: {
            args: Prisma.UserPresenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPresencePayload>
          }
          update: {
            args: Prisma.UserPresenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPresencePayload>
          }
          deleteMany: {
            args: Prisma.UserPresenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserPresenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserPresenceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPresencePayload>[]
          }
          upsert: {
            args: Prisma.UserPresenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPresencePayload>
          }
          aggregate: {
            args: Prisma.UserPresenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserPresence>
          }
          groupBy: {
            args: Prisma.UserPresenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserPresenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPresenceCountArgs<ExtArgs>
            result: $Utils.Optional<UserPresenceCountAggregateOutputType> | number
          }
        }
      }
      DocumentSnapshot: {
        payload: Prisma.$DocumentSnapshotPayload<ExtArgs>
        fields: Prisma.DocumentSnapshotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentSnapshotFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentSnapshotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentSnapshotFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentSnapshotPayload>
          }
          findFirst: {
            args: Prisma.DocumentSnapshotFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentSnapshotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentSnapshotFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentSnapshotPayload>
          }
          findMany: {
            args: Prisma.DocumentSnapshotFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentSnapshotPayload>[]
          }
          create: {
            args: Prisma.DocumentSnapshotCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentSnapshotPayload>
          }
          createMany: {
            args: Prisma.DocumentSnapshotCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentSnapshotCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentSnapshotPayload>[]
          }
          delete: {
            args: Prisma.DocumentSnapshotDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentSnapshotPayload>
          }
          update: {
            args: Prisma.DocumentSnapshotUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentSnapshotPayload>
          }
          deleteMany: {
            args: Prisma.DocumentSnapshotDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentSnapshotUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentSnapshotUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentSnapshotPayload>[]
          }
          upsert: {
            args: Prisma.DocumentSnapshotUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentSnapshotPayload>
          }
          aggregate: {
            args: Prisma.DocumentSnapshotAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumentSnapshot>
          }
          groupBy: {
            args: Prisma.DocumentSnapshotGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentSnapshotGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentSnapshotCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentSnapshotCountAggregateOutputType> | number
          }
        }
      }
      DocumentLine: {
        payload: Prisma.$DocumentLinePayload<ExtArgs>
        fields: Prisma.DocumentLineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentLineFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentLinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentLineFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentLinePayload>
          }
          findFirst: {
            args: Prisma.DocumentLineFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentLinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentLineFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentLinePayload>
          }
          findMany: {
            args: Prisma.DocumentLineFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentLinePayload>[]
          }
          create: {
            args: Prisma.DocumentLineCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentLinePayload>
          }
          createMany: {
            args: Prisma.DocumentLineCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentLineCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentLinePayload>[]
          }
          delete: {
            args: Prisma.DocumentLineDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentLinePayload>
          }
          update: {
            args: Prisma.DocumentLineUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentLinePayload>
          }
          deleteMany: {
            args: Prisma.DocumentLineDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentLineUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentLineUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentLinePayload>[]
          }
          upsert: {
            args: Prisma.DocumentLineUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentLinePayload>
          }
          aggregate: {
            args: Prisma.DocumentLineAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumentLine>
          }
          groupBy: {
            args: Prisma.DocumentLineGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentLineGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentLineCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentLineCountAggregateOutputType> | number
          }
        }
      }
      LineEdit: {
        payload: Prisma.$LineEditPayload<ExtArgs>
        fields: Prisma.LineEditFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LineEditFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LineEditPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LineEditFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LineEditPayload>
          }
          findFirst: {
            args: Prisma.LineEditFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LineEditPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LineEditFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LineEditPayload>
          }
          findMany: {
            args: Prisma.LineEditFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LineEditPayload>[]
          }
          create: {
            args: Prisma.LineEditCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LineEditPayload>
          }
          createMany: {
            args: Prisma.LineEditCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LineEditCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LineEditPayload>[]
          }
          delete: {
            args: Prisma.LineEditDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LineEditPayload>
          }
          update: {
            args: Prisma.LineEditUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LineEditPayload>
          }
          deleteMany: {
            args: Prisma.LineEditDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LineEditUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LineEditUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LineEditPayload>[]
          }
          upsert: {
            args: Prisma.LineEditUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LineEditPayload>
          }
          aggregate: {
            args: Prisma.LineEditAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLineEdit>
          }
          groupBy: {
            args: Prisma.LineEditGroupByArgs<ExtArgs>
            result: $Utils.Optional<LineEditGroupByOutputType>[]
          }
          count: {
            args: Prisma.LineEditCountArgs<ExtArgs>
            result: $Utils.Optional<LineEditCountAggregateOutputType> | number
          }
        }
      }
      MediaUpload: {
        payload: Prisma.$MediaUploadPayload<ExtArgs>
        fields: Prisma.MediaUploadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MediaUploadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaUploadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MediaUploadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaUploadPayload>
          }
          findFirst: {
            args: Prisma.MediaUploadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaUploadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MediaUploadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaUploadPayload>
          }
          findMany: {
            args: Prisma.MediaUploadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaUploadPayload>[]
          }
          create: {
            args: Prisma.MediaUploadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaUploadPayload>
          }
          createMany: {
            args: Prisma.MediaUploadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MediaUploadCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaUploadPayload>[]
          }
          delete: {
            args: Prisma.MediaUploadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaUploadPayload>
          }
          update: {
            args: Prisma.MediaUploadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaUploadPayload>
          }
          deleteMany: {
            args: Prisma.MediaUploadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MediaUploadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MediaUploadUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaUploadPayload>[]
          }
          upsert: {
            args: Prisma.MediaUploadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaUploadPayload>
          }
          aggregate: {
            args: Prisma.MediaUploadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMediaUpload>
          }
          groupBy: {
            args: Prisma.MediaUploadGroupByArgs<ExtArgs>
            result: $Utils.Optional<MediaUploadGroupByOutputType>[]
          }
          count: {
            args: Prisma.MediaUploadCountArgs<ExtArgs>
            result: $Utils.Optional<MediaUploadCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    document?: DocumentOmit
    documentAccess?: DocumentAccessOmit
    operation?: OperationOmit
    userCursor?: UserCursorOmit
    userPresence?: UserPresenceOmit
    documentSnapshot?: DocumentSnapshotOmit
    documentLine?: DocumentLineOmit
    lineEdit?: LineEditOmit
    mediaUpload?: MediaUploadOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    ownedDocuments: number
    documentAccess: number
    operations: number
    cursors: number
    documentSnapshots: number
    lineEdits: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ownedDocuments?: boolean | UserCountOutputTypeCountOwnedDocumentsArgs
    documentAccess?: boolean | UserCountOutputTypeCountDocumentAccessArgs
    operations?: boolean | UserCountOutputTypeCountOperationsArgs
    cursors?: boolean | UserCountOutputTypeCountCursorsArgs
    documentSnapshots?: boolean | UserCountOutputTypeCountDocumentSnapshotsArgs
    lineEdits?: boolean | UserCountOutputTypeCountLineEditsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOwnedDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDocumentAccessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentAccessWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOperationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCursorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCursorWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDocumentSnapshotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentSnapshotWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLineEditsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LineEditWhereInput
  }


  /**
   * Count Type DocumentCountOutputType
   */

  export type DocumentCountOutputType = {
    documentAccess: number
    operations: number
    cursors: number
    snapshots: number
    lines: number
  }

  export type DocumentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documentAccess?: boolean | DocumentCountOutputTypeCountDocumentAccessArgs
    operations?: boolean | DocumentCountOutputTypeCountOperationsArgs
    cursors?: boolean | DocumentCountOutputTypeCountCursorsArgs
    snapshots?: boolean | DocumentCountOutputTypeCountSnapshotsArgs
    lines?: boolean | DocumentCountOutputTypeCountLinesArgs
  }

  // Custom InputTypes
  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentCountOutputType
     */
    select?: DocumentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeCountDocumentAccessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentAccessWhereInput
  }

  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeCountOperationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperationWhereInput
  }

  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeCountCursorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCursorWhereInput
  }

  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeCountSnapshotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentSnapshotWhereInput
  }

  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeCountLinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentLineWhereInput
  }


  /**
   * Count Type DocumentLineCountOutputType
   */

  export type DocumentLineCountOutputType = {
    lineEdits: number
  }

  export type DocumentLineCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lineEdits?: boolean | DocumentLineCountOutputTypeCountLineEditsArgs
  }

  // Custom InputTypes
  /**
   * DocumentLineCountOutputType without action
   */
  export type DocumentLineCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentLineCountOutputType
     */
    select?: DocumentLineCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DocumentLineCountOutputType without action
   */
  export type DocumentLineCountOutputTypeCountLineEditsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LineEditWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    avatarUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    avatarUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    avatarUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    avatarUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    avatarUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    avatarUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string | null
    avatarUrl: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    avatarUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownedDocuments?: boolean | User$ownedDocumentsArgs<ExtArgs>
    documentAccess?: boolean | User$documentAccessArgs<ExtArgs>
    operations?: boolean | User$operationsArgs<ExtArgs>
    cursors?: boolean | User$cursorsArgs<ExtArgs>
    presence?: boolean | User$presenceArgs<ExtArgs>
    documentSnapshots?: boolean | User$documentSnapshotsArgs<ExtArgs>
    lineEdits?: boolean | User$lineEditsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    avatarUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    avatarUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    avatarUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "avatarUrl" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ownedDocuments?: boolean | User$ownedDocumentsArgs<ExtArgs>
    documentAccess?: boolean | User$documentAccessArgs<ExtArgs>
    operations?: boolean | User$operationsArgs<ExtArgs>
    cursors?: boolean | User$cursorsArgs<ExtArgs>
    presence?: boolean | User$presenceArgs<ExtArgs>
    documentSnapshots?: boolean | User$documentSnapshotsArgs<ExtArgs>
    lineEdits?: boolean | User$lineEditsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      ownedDocuments: Prisma.$DocumentPayload<ExtArgs>[]
      documentAccess: Prisma.$DocumentAccessPayload<ExtArgs>[]
      operations: Prisma.$OperationPayload<ExtArgs>[]
      cursors: Prisma.$UserCursorPayload<ExtArgs>[]
      presence: Prisma.$UserPresencePayload<ExtArgs> | null
      documentSnapshots: Prisma.$DocumentSnapshotPayload<ExtArgs>[]
      lineEdits: Prisma.$LineEditPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string | null
      avatarUrl: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ownedDocuments<T extends User$ownedDocumentsArgs<ExtArgs> = {}>(args?: Subset<T, User$ownedDocumentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documentAccess<T extends User$documentAccessArgs<ExtArgs> = {}>(args?: Subset<T, User$documentAccessArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    operations<T extends User$operationsArgs<ExtArgs> = {}>(args?: Subset<T, User$operationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    cursors<T extends User$cursorsArgs<ExtArgs> = {}>(args?: Subset<T, User$cursorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCursorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    presence<T extends User$presenceArgs<ExtArgs> = {}>(args?: Subset<T, User$presenceArgs<ExtArgs>>): Prisma__UserPresenceClient<$Result.GetResult<Prisma.$UserPresencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    documentSnapshots<T extends User$documentSnapshotsArgs<ExtArgs> = {}>(args?: Subset<T, User$documentSnapshotsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentSnapshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lineEdits<T extends User$lineEditsArgs<ExtArgs> = {}>(args?: Subset<T, User$lineEditsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LineEditPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.ownedDocuments
   */
  export type User$ownedDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * User.documentAccess
   */
  export type User$documentAccessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAccess
     */
    select?: DocumentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentAccess
     */
    omit?: DocumentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAccessInclude<ExtArgs> | null
    where?: DocumentAccessWhereInput
    orderBy?: DocumentAccessOrderByWithRelationInput | DocumentAccessOrderByWithRelationInput[]
    cursor?: DocumentAccessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentAccessScalarFieldEnum | DocumentAccessScalarFieldEnum[]
  }

  /**
   * User.operations
   */
  export type User$operationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operation
     */
    omit?: OperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
    where?: OperationWhereInput
    orderBy?: OperationOrderByWithRelationInput | OperationOrderByWithRelationInput[]
    cursor?: OperationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OperationScalarFieldEnum | OperationScalarFieldEnum[]
  }

  /**
   * User.cursors
   */
  export type User$cursorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCursor
     */
    select?: UserCursorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCursor
     */
    omit?: UserCursorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCursorInclude<ExtArgs> | null
    where?: UserCursorWhereInput
    orderBy?: UserCursorOrderByWithRelationInput | UserCursorOrderByWithRelationInput[]
    cursor?: UserCursorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCursorScalarFieldEnum | UserCursorScalarFieldEnum[]
  }

  /**
   * User.presence
   */
  export type User$presenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPresence
     */
    select?: UserPresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPresence
     */
    omit?: UserPresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPresenceInclude<ExtArgs> | null
    where?: UserPresenceWhereInput
  }

  /**
   * User.documentSnapshots
   */
  export type User$documentSnapshotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentSnapshot
     */
    select?: DocumentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentSnapshot
     */
    omit?: DocumentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentSnapshotInclude<ExtArgs> | null
    where?: DocumentSnapshotWhereInput
    orderBy?: DocumentSnapshotOrderByWithRelationInput | DocumentSnapshotOrderByWithRelationInput[]
    cursor?: DocumentSnapshotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentSnapshotScalarFieldEnum | DocumentSnapshotScalarFieldEnum[]
  }

  /**
   * User.lineEdits
   */
  export type User$lineEditsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineEdit
     */
    select?: LineEditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineEdit
     */
    omit?: LineEditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineEditInclude<ExtArgs> | null
    where?: LineEditWhereInput
    orderBy?: LineEditOrderByWithRelationInput | LineEditOrderByWithRelationInput[]
    cursor?: LineEditWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LineEditScalarFieldEnum | LineEditScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentMinAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    isPublic: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    ownerId: string | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    isPublic: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    ownerId: string | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    title: number
    content: number
    isPublic: number
    createdAt: number
    updatedAt: number
    ownerId: number
    _all: number
  }


  export type DocumentMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
    ownerId?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
    ownerId?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
    ownerId?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    id: string
    title: string
    content: string | null
    isPublic: boolean
    createdAt: Date
    updatedAt: Date
    ownerId: string
    _count: DocumentCountAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    documentAccess?: boolean | Document$documentAccessArgs<ExtArgs>
    operations?: boolean | Document$operationsArgs<ExtArgs>
    cursors?: boolean | Document$cursorsArgs<ExtArgs>
    snapshots?: boolean | Document$snapshotsArgs<ExtArgs>
    lines?: boolean | Document$linesArgs<ExtArgs>
    _count?: boolean | DocumentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
  }

  export type DocumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "content" | "isPublic" | "createdAt" | "updatedAt" | "ownerId", ExtArgs["result"]["document"]>
  export type DocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    documentAccess?: boolean | Document$documentAccessArgs<ExtArgs>
    operations?: boolean | Document$operationsArgs<ExtArgs>
    cursors?: boolean | Document$cursorsArgs<ExtArgs>
    snapshots?: boolean | Document$snapshotsArgs<ExtArgs>
    lines?: boolean | Document$linesArgs<ExtArgs>
    _count?: boolean | DocumentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      documentAccess: Prisma.$DocumentAccessPayload<ExtArgs>[]
      operations: Prisma.$OperationPayload<ExtArgs>[]
      cursors: Prisma.$UserCursorPayload<ExtArgs>[]
      snapshots: Prisma.$DocumentSnapshotPayload<ExtArgs>[]
      lines: Prisma.$DocumentLinePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      content: string | null
      isPublic: boolean
      createdAt: Date
      updatedAt: Date
      ownerId: string
    }, ExtArgs["result"]["document"]>
    composites: {}
  }

  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentFindUniqueArgs>(args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Document that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentFindFirstArgs>(args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentFindManyArgs>(args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
     */
    create<T extends DocumentCreateArgs>(args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Documents.
     * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentCreateManyArgs>(args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documents and returns the data saved in the database.
     * @param {DocumentCreateManyAndReturnArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
     */
    delete<T extends DocumentDeleteArgs>(args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentUpdateArgs>(args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDeleteManyArgs>(args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentUpdateManyArgs>(args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents and returns the data updated in the database.
     * @param {DocumentUpdateManyAndReturnArgs} args - Arguments to update many Documents.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
     */
    upsert<T extends DocumentUpsertArgs>(args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    documentAccess<T extends Document$documentAccessArgs<ExtArgs> = {}>(args?: Subset<T, Document$documentAccessArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    operations<T extends Document$operationsArgs<ExtArgs> = {}>(args?: Subset<T, Document$operationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    cursors<T extends Document$cursorsArgs<ExtArgs> = {}>(args?: Subset<T, Document$cursorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCursorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    snapshots<T extends Document$snapshotsArgs<ExtArgs> = {}>(args?: Subset<T, Document$snapshotsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentSnapshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lines<T extends Document$linesArgs<ExtArgs> = {}>(args?: Subset<T, Document$linesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentLinePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Document model
   */
  interface DocumentFieldRefs {
    readonly id: FieldRef<"Document", 'String'>
    readonly title: FieldRef<"Document", 'String'>
    readonly content: FieldRef<"Document", 'String'>
    readonly isPublic: FieldRef<"Document", 'Boolean'>
    readonly createdAt: FieldRef<"Document", 'DateTime'>
    readonly updatedAt: FieldRef<"Document", 'DateTime'>
    readonly ownerId: FieldRef<"Document", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document createManyAndReturn
   */
  export type DocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
  }

  /**
   * Document updateManyAndReturn
   */
  export type DocumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to delete.
     */
    limit?: number
  }

  /**
   * Document.documentAccess
   */
  export type Document$documentAccessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAccess
     */
    select?: DocumentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentAccess
     */
    omit?: DocumentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAccessInclude<ExtArgs> | null
    where?: DocumentAccessWhereInput
    orderBy?: DocumentAccessOrderByWithRelationInput | DocumentAccessOrderByWithRelationInput[]
    cursor?: DocumentAccessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentAccessScalarFieldEnum | DocumentAccessScalarFieldEnum[]
  }

  /**
   * Document.operations
   */
  export type Document$operationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operation
     */
    omit?: OperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
    where?: OperationWhereInput
    orderBy?: OperationOrderByWithRelationInput | OperationOrderByWithRelationInput[]
    cursor?: OperationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OperationScalarFieldEnum | OperationScalarFieldEnum[]
  }

  /**
   * Document.cursors
   */
  export type Document$cursorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCursor
     */
    select?: UserCursorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCursor
     */
    omit?: UserCursorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCursorInclude<ExtArgs> | null
    where?: UserCursorWhereInput
    orderBy?: UserCursorOrderByWithRelationInput | UserCursorOrderByWithRelationInput[]
    cursor?: UserCursorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCursorScalarFieldEnum | UserCursorScalarFieldEnum[]
  }

  /**
   * Document.snapshots
   */
  export type Document$snapshotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentSnapshot
     */
    select?: DocumentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentSnapshot
     */
    omit?: DocumentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentSnapshotInclude<ExtArgs> | null
    where?: DocumentSnapshotWhereInput
    orderBy?: DocumentSnapshotOrderByWithRelationInput | DocumentSnapshotOrderByWithRelationInput[]
    cursor?: DocumentSnapshotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentSnapshotScalarFieldEnum | DocumentSnapshotScalarFieldEnum[]
  }

  /**
   * Document.lines
   */
  export type Document$linesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentLine
     */
    select?: DocumentLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentLine
     */
    omit?: DocumentLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentLineInclude<ExtArgs> | null
    where?: DocumentLineWhereInput
    orderBy?: DocumentLineOrderByWithRelationInput | DocumentLineOrderByWithRelationInput[]
    cursor?: DocumentLineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentLineScalarFieldEnum | DocumentLineScalarFieldEnum[]
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
  }


  /**
   * Model DocumentAccess
   */

  export type AggregateDocumentAccess = {
    _count: DocumentAccessCountAggregateOutputType | null
    _min: DocumentAccessMinAggregateOutputType | null
    _max: DocumentAccessMaxAggregateOutputType | null
  }

  export type DocumentAccessMinAggregateOutputType = {
    id: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
    documentId: string | null
    userId: string | null
  }

  export type DocumentAccessMaxAggregateOutputType = {
    id: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
    documentId: string | null
    userId: string | null
  }

  export type DocumentAccessCountAggregateOutputType = {
    id: number
    role: number
    createdAt: number
    updatedAt: number
    documentId: number
    userId: number
    _all: number
  }


  export type DocumentAccessMinAggregateInputType = {
    id?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    documentId?: true
    userId?: true
  }

  export type DocumentAccessMaxAggregateInputType = {
    id?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    documentId?: true
    userId?: true
  }

  export type DocumentAccessCountAggregateInputType = {
    id?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    documentId?: true
    userId?: true
    _all?: true
  }

  export type DocumentAccessAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentAccess to aggregate.
     */
    where?: DocumentAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentAccesses to fetch.
     */
    orderBy?: DocumentAccessOrderByWithRelationInput | DocumentAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DocumentAccesses
    **/
    _count?: true | DocumentAccessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentAccessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentAccessMaxAggregateInputType
  }

  export type GetDocumentAccessAggregateType<T extends DocumentAccessAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumentAccess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumentAccess[P]>
      : GetScalarType<T[P], AggregateDocumentAccess[P]>
  }




  export type DocumentAccessGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentAccessWhereInput
    orderBy?: DocumentAccessOrderByWithAggregationInput | DocumentAccessOrderByWithAggregationInput[]
    by: DocumentAccessScalarFieldEnum[] | DocumentAccessScalarFieldEnum
    having?: DocumentAccessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentAccessCountAggregateInputType | true
    _min?: DocumentAccessMinAggregateInputType
    _max?: DocumentAccessMaxAggregateInputType
  }

  export type DocumentAccessGroupByOutputType = {
    id: string
    role: $Enums.Role
    createdAt: Date
    updatedAt: Date
    documentId: string
    userId: string
    _count: DocumentAccessCountAggregateOutputType | null
    _min: DocumentAccessMinAggregateOutputType | null
    _max: DocumentAccessMaxAggregateOutputType | null
  }

  type GetDocumentAccessGroupByPayload<T extends DocumentAccessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentAccessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentAccessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentAccessGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentAccessGroupByOutputType[P]>
        }
      >
    >


  export type DocumentAccessSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    documentId?: boolean
    userId?: boolean
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentAccess"]>

  export type DocumentAccessSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    documentId?: boolean
    userId?: boolean
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentAccess"]>

  export type DocumentAccessSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    documentId?: boolean
    userId?: boolean
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentAccess"]>

  export type DocumentAccessSelectScalar = {
    id?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    documentId?: boolean
    userId?: boolean
  }

  export type DocumentAccessOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "role" | "createdAt" | "updatedAt" | "documentId" | "userId", ExtArgs["result"]["documentAccess"]>
  export type DocumentAccessInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DocumentAccessIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DocumentAccessIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DocumentAccessPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DocumentAccess"
    objects: {
      document: Prisma.$DocumentPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      role: $Enums.Role
      createdAt: Date
      updatedAt: Date
      documentId: string
      userId: string
    }, ExtArgs["result"]["documentAccess"]>
    composites: {}
  }

  type DocumentAccessGetPayload<S extends boolean | null | undefined | DocumentAccessDefaultArgs> = $Result.GetResult<Prisma.$DocumentAccessPayload, S>

  type DocumentAccessCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentAccessFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentAccessCountAggregateInputType | true
    }

  export interface DocumentAccessDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentAccess'], meta: { name: 'DocumentAccess' } }
    /**
     * Find zero or one DocumentAccess that matches the filter.
     * @param {DocumentAccessFindUniqueArgs} args - Arguments to find a DocumentAccess
     * @example
     * // Get one DocumentAccess
     * const documentAccess = await prisma.documentAccess.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentAccessFindUniqueArgs>(args: SelectSubset<T, DocumentAccessFindUniqueArgs<ExtArgs>>): Prisma__DocumentAccessClient<$Result.GetResult<Prisma.$DocumentAccessPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DocumentAccess that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentAccessFindUniqueOrThrowArgs} args - Arguments to find a DocumentAccess
     * @example
     * // Get one DocumentAccess
     * const documentAccess = await prisma.documentAccess.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentAccessFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentAccessFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentAccessClient<$Result.GetResult<Prisma.$DocumentAccessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentAccess that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAccessFindFirstArgs} args - Arguments to find a DocumentAccess
     * @example
     * // Get one DocumentAccess
     * const documentAccess = await prisma.documentAccess.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentAccessFindFirstArgs>(args?: SelectSubset<T, DocumentAccessFindFirstArgs<ExtArgs>>): Prisma__DocumentAccessClient<$Result.GetResult<Prisma.$DocumentAccessPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentAccess that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAccessFindFirstOrThrowArgs} args - Arguments to find a DocumentAccess
     * @example
     * // Get one DocumentAccess
     * const documentAccess = await prisma.documentAccess.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentAccessFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentAccessFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentAccessClient<$Result.GetResult<Prisma.$DocumentAccessPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DocumentAccesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAccessFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DocumentAccesses
     * const documentAccesses = await prisma.documentAccess.findMany()
     * 
     * // Get first 10 DocumentAccesses
     * const documentAccesses = await prisma.documentAccess.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentAccessWithIdOnly = await prisma.documentAccess.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentAccessFindManyArgs>(args?: SelectSubset<T, DocumentAccessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DocumentAccess.
     * @param {DocumentAccessCreateArgs} args - Arguments to create a DocumentAccess.
     * @example
     * // Create one DocumentAccess
     * const DocumentAccess = await prisma.documentAccess.create({
     *   data: {
     *     // ... data to create a DocumentAccess
     *   }
     * })
     * 
     */
    create<T extends DocumentAccessCreateArgs>(args: SelectSubset<T, DocumentAccessCreateArgs<ExtArgs>>): Prisma__DocumentAccessClient<$Result.GetResult<Prisma.$DocumentAccessPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DocumentAccesses.
     * @param {DocumentAccessCreateManyArgs} args - Arguments to create many DocumentAccesses.
     * @example
     * // Create many DocumentAccesses
     * const documentAccess = await prisma.documentAccess.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentAccessCreateManyArgs>(args?: SelectSubset<T, DocumentAccessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DocumentAccesses and returns the data saved in the database.
     * @param {DocumentAccessCreateManyAndReturnArgs} args - Arguments to create many DocumentAccesses.
     * @example
     * // Create many DocumentAccesses
     * const documentAccess = await prisma.documentAccess.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DocumentAccesses and only return the `id`
     * const documentAccessWithIdOnly = await prisma.documentAccess.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentAccessCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentAccessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentAccessPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DocumentAccess.
     * @param {DocumentAccessDeleteArgs} args - Arguments to delete one DocumentAccess.
     * @example
     * // Delete one DocumentAccess
     * const DocumentAccess = await prisma.documentAccess.delete({
     *   where: {
     *     // ... filter to delete one DocumentAccess
     *   }
     * })
     * 
     */
    delete<T extends DocumentAccessDeleteArgs>(args: SelectSubset<T, DocumentAccessDeleteArgs<ExtArgs>>): Prisma__DocumentAccessClient<$Result.GetResult<Prisma.$DocumentAccessPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DocumentAccess.
     * @param {DocumentAccessUpdateArgs} args - Arguments to update one DocumentAccess.
     * @example
     * // Update one DocumentAccess
     * const documentAccess = await prisma.documentAccess.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentAccessUpdateArgs>(args: SelectSubset<T, DocumentAccessUpdateArgs<ExtArgs>>): Prisma__DocumentAccessClient<$Result.GetResult<Prisma.$DocumentAccessPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DocumentAccesses.
     * @param {DocumentAccessDeleteManyArgs} args - Arguments to filter DocumentAccesses to delete.
     * @example
     * // Delete a few DocumentAccesses
     * const { count } = await prisma.documentAccess.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentAccessDeleteManyArgs>(args?: SelectSubset<T, DocumentAccessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAccessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DocumentAccesses
     * const documentAccess = await prisma.documentAccess.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentAccessUpdateManyArgs>(args: SelectSubset<T, DocumentAccessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentAccesses and returns the data updated in the database.
     * @param {DocumentAccessUpdateManyAndReturnArgs} args - Arguments to update many DocumentAccesses.
     * @example
     * // Update many DocumentAccesses
     * const documentAccess = await prisma.documentAccess.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DocumentAccesses and only return the `id`
     * const documentAccessWithIdOnly = await prisma.documentAccess.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentAccessUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentAccessUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentAccessPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DocumentAccess.
     * @param {DocumentAccessUpsertArgs} args - Arguments to update or create a DocumentAccess.
     * @example
     * // Update or create a DocumentAccess
     * const documentAccess = await prisma.documentAccess.upsert({
     *   create: {
     *     // ... data to create a DocumentAccess
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DocumentAccess we want to update
     *   }
     * })
     */
    upsert<T extends DocumentAccessUpsertArgs>(args: SelectSubset<T, DocumentAccessUpsertArgs<ExtArgs>>): Prisma__DocumentAccessClient<$Result.GetResult<Prisma.$DocumentAccessPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DocumentAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAccessCountArgs} args - Arguments to filter DocumentAccesses to count.
     * @example
     * // Count the number of DocumentAccesses
     * const count = await prisma.documentAccess.count({
     *   where: {
     *     // ... the filter for the DocumentAccesses we want to count
     *   }
     * })
    **/
    count<T extends DocumentAccessCountArgs>(
      args?: Subset<T, DocumentAccessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentAccessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DocumentAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAccessAggregateArgs>(args: Subset<T, DocumentAccessAggregateArgs>): Prisma.PrismaPromise<GetDocumentAccessAggregateType<T>>

    /**
     * Group by DocumentAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAccessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentAccessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentAccessGroupByArgs['orderBy'] }
        : { orderBy?: DocumentAccessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentAccessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentAccessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DocumentAccess model
   */
  readonly fields: DocumentAccessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DocumentAccess.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentAccessClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    document<T extends DocumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentDefaultArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DocumentAccess model
   */
  interface DocumentAccessFieldRefs {
    readonly id: FieldRef<"DocumentAccess", 'String'>
    readonly role: FieldRef<"DocumentAccess", 'Role'>
    readonly createdAt: FieldRef<"DocumentAccess", 'DateTime'>
    readonly updatedAt: FieldRef<"DocumentAccess", 'DateTime'>
    readonly documentId: FieldRef<"DocumentAccess", 'String'>
    readonly userId: FieldRef<"DocumentAccess", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DocumentAccess findUnique
   */
  export type DocumentAccessFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAccess
     */
    select?: DocumentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentAccess
     */
    omit?: DocumentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAccessInclude<ExtArgs> | null
    /**
     * Filter, which DocumentAccess to fetch.
     */
    where: DocumentAccessWhereUniqueInput
  }

  /**
   * DocumentAccess findUniqueOrThrow
   */
  export type DocumentAccessFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAccess
     */
    select?: DocumentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentAccess
     */
    omit?: DocumentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAccessInclude<ExtArgs> | null
    /**
     * Filter, which DocumentAccess to fetch.
     */
    where: DocumentAccessWhereUniqueInput
  }

  /**
   * DocumentAccess findFirst
   */
  export type DocumentAccessFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAccess
     */
    select?: DocumentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentAccess
     */
    omit?: DocumentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAccessInclude<ExtArgs> | null
    /**
     * Filter, which DocumentAccess to fetch.
     */
    where?: DocumentAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentAccesses to fetch.
     */
    orderBy?: DocumentAccessOrderByWithRelationInput | DocumentAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentAccesses.
     */
    cursor?: DocumentAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentAccesses.
     */
    distinct?: DocumentAccessScalarFieldEnum | DocumentAccessScalarFieldEnum[]
  }

  /**
   * DocumentAccess findFirstOrThrow
   */
  export type DocumentAccessFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAccess
     */
    select?: DocumentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentAccess
     */
    omit?: DocumentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAccessInclude<ExtArgs> | null
    /**
     * Filter, which DocumentAccess to fetch.
     */
    where?: DocumentAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentAccesses to fetch.
     */
    orderBy?: DocumentAccessOrderByWithRelationInput | DocumentAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentAccesses.
     */
    cursor?: DocumentAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentAccesses.
     */
    distinct?: DocumentAccessScalarFieldEnum | DocumentAccessScalarFieldEnum[]
  }

  /**
   * DocumentAccess findMany
   */
  export type DocumentAccessFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAccess
     */
    select?: DocumentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentAccess
     */
    omit?: DocumentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAccessInclude<ExtArgs> | null
    /**
     * Filter, which DocumentAccesses to fetch.
     */
    where?: DocumentAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentAccesses to fetch.
     */
    orderBy?: DocumentAccessOrderByWithRelationInput | DocumentAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DocumentAccesses.
     */
    cursor?: DocumentAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentAccesses.
     */
    skip?: number
    distinct?: DocumentAccessScalarFieldEnum | DocumentAccessScalarFieldEnum[]
  }

  /**
   * DocumentAccess create
   */
  export type DocumentAccessCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAccess
     */
    select?: DocumentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentAccess
     */
    omit?: DocumentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAccessInclude<ExtArgs> | null
    /**
     * The data needed to create a DocumentAccess.
     */
    data: XOR<DocumentAccessCreateInput, DocumentAccessUncheckedCreateInput>
  }

  /**
   * DocumentAccess createMany
   */
  export type DocumentAccessCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DocumentAccesses.
     */
    data: DocumentAccessCreateManyInput | DocumentAccessCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DocumentAccess createManyAndReturn
   */
  export type DocumentAccessCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAccess
     */
    select?: DocumentAccessSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentAccess
     */
    omit?: DocumentAccessOmit<ExtArgs> | null
    /**
     * The data used to create many DocumentAccesses.
     */
    data: DocumentAccessCreateManyInput | DocumentAccessCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAccessIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentAccess update
   */
  export type DocumentAccessUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAccess
     */
    select?: DocumentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentAccess
     */
    omit?: DocumentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAccessInclude<ExtArgs> | null
    /**
     * The data needed to update a DocumentAccess.
     */
    data: XOR<DocumentAccessUpdateInput, DocumentAccessUncheckedUpdateInput>
    /**
     * Choose, which DocumentAccess to update.
     */
    where: DocumentAccessWhereUniqueInput
  }

  /**
   * DocumentAccess updateMany
   */
  export type DocumentAccessUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DocumentAccesses.
     */
    data: XOR<DocumentAccessUpdateManyMutationInput, DocumentAccessUncheckedUpdateManyInput>
    /**
     * Filter which DocumentAccesses to update
     */
    where?: DocumentAccessWhereInput
    /**
     * Limit how many DocumentAccesses to update.
     */
    limit?: number
  }

  /**
   * DocumentAccess updateManyAndReturn
   */
  export type DocumentAccessUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAccess
     */
    select?: DocumentAccessSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentAccess
     */
    omit?: DocumentAccessOmit<ExtArgs> | null
    /**
     * The data used to update DocumentAccesses.
     */
    data: XOR<DocumentAccessUpdateManyMutationInput, DocumentAccessUncheckedUpdateManyInput>
    /**
     * Filter which DocumentAccesses to update
     */
    where?: DocumentAccessWhereInput
    /**
     * Limit how many DocumentAccesses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAccessIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentAccess upsert
   */
  export type DocumentAccessUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAccess
     */
    select?: DocumentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentAccess
     */
    omit?: DocumentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAccessInclude<ExtArgs> | null
    /**
     * The filter to search for the DocumentAccess to update in case it exists.
     */
    where: DocumentAccessWhereUniqueInput
    /**
     * In case the DocumentAccess found by the `where` argument doesn't exist, create a new DocumentAccess with this data.
     */
    create: XOR<DocumentAccessCreateInput, DocumentAccessUncheckedCreateInput>
    /**
     * In case the DocumentAccess was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentAccessUpdateInput, DocumentAccessUncheckedUpdateInput>
  }

  /**
   * DocumentAccess delete
   */
  export type DocumentAccessDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAccess
     */
    select?: DocumentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentAccess
     */
    omit?: DocumentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAccessInclude<ExtArgs> | null
    /**
     * Filter which DocumentAccess to delete.
     */
    where: DocumentAccessWhereUniqueInput
  }

  /**
   * DocumentAccess deleteMany
   */
  export type DocumentAccessDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentAccesses to delete
     */
    where?: DocumentAccessWhereInput
    /**
     * Limit how many DocumentAccesses to delete.
     */
    limit?: number
  }

  /**
   * DocumentAccess without action
   */
  export type DocumentAccessDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentAccess
     */
    select?: DocumentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentAccess
     */
    omit?: DocumentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentAccessInclude<ExtArgs> | null
  }


  /**
   * Model Operation
   */

  export type AggregateOperation = {
    _count: OperationCountAggregateOutputType | null
    _avg: OperationAvgAggregateOutputType | null
    _sum: OperationSumAggregateOutputType | null
    _min: OperationMinAggregateOutputType | null
    _max: OperationMaxAggregateOutputType | null
  }

  export type OperationAvgAggregateOutputType = {
    position: number | null
    length: number | null
  }

  export type OperationSumAggregateOutputType = {
    position: number | null
    length: number | null
  }

  export type OperationMinAggregateOutputType = {
    id: string | null
    type: $Enums.OpType | null
    position: number | null
    length: number | null
    content: string | null
    createdAt: Date | null
    documentId: string | null
    userId: string | null
  }

  export type OperationMaxAggregateOutputType = {
    id: string | null
    type: $Enums.OpType | null
    position: number | null
    length: number | null
    content: string | null
    createdAt: Date | null
    documentId: string | null
    userId: string | null
  }

  export type OperationCountAggregateOutputType = {
    id: number
    type: number
    position: number
    length: number
    content: number
    createdAt: number
    documentId: number
    userId: number
    _all: number
  }


  export type OperationAvgAggregateInputType = {
    position?: true
    length?: true
  }

  export type OperationSumAggregateInputType = {
    position?: true
    length?: true
  }

  export type OperationMinAggregateInputType = {
    id?: true
    type?: true
    position?: true
    length?: true
    content?: true
    createdAt?: true
    documentId?: true
    userId?: true
  }

  export type OperationMaxAggregateInputType = {
    id?: true
    type?: true
    position?: true
    length?: true
    content?: true
    createdAt?: true
    documentId?: true
    userId?: true
  }

  export type OperationCountAggregateInputType = {
    id?: true
    type?: true
    position?: true
    length?: true
    content?: true
    createdAt?: true
    documentId?: true
    userId?: true
    _all?: true
  }

  export type OperationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Operation to aggregate.
     */
    where?: OperationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operations to fetch.
     */
    orderBy?: OperationOrderByWithRelationInput | OperationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OperationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Operations
    **/
    _count?: true | OperationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OperationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OperationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OperationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OperationMaxAggregateInputType
  }

  export type GetOperationAggregateType<T extends OperationAggregateArgs> = {
        [P in keyof T & keyof AggregateOperation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOperation[P]>
      : GetScalarType<T[P], AggregateOperation[P]>
  }




  export type OperationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperationWhereInput
    orderBy?: OperationOrderByWithAggregationInput | OperationOrderByWithAggregationInput[]
    by: OperationScalarFieldEnum[] | OperationScalarFieldEnum
    having?: OperationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OperationCountAggregateInputType | true
    _avg?: OperationAvgAggregateInputType
    _sum?: OperationSumAggregateInputType
    _min?: OperationMinAggregateInputType
    _max?: OperationMaxAggregateInputType
  }

  export type OperationGroupByOutputType = {
    id: string
    type: $Enums.OpType
    position: number
    length: number | null
    content: string | null
    createdAt: Date
    documentId: string
    userId: string
    _count: OperationCountAggregateOutputType | null
    _avg: OperationAvgAggregateOutputType | null
    _sum: OperationSumAggregateOutputType | null
    _min: OperationMinAggregateOutputType | null
    _max: OperationMaxAggregateOutputType | null
  }

  type GetOperationGroupByPayload<T extends OperationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OperationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OperationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OperationGroupByOutputType[P]>
            : GetScalarType<T[P], OperationGroupByOutputType[P]>
        }
      >
    >


  export type OperationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    position?: boolean
    length?: boolean
    content?: boolean
    createdAt?: boolean
    documentId?: boolean
    userId?: boolean
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["operation"]>

  export type OperationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    position?: boolean
    length?: boolean
    content?: boolean
    createdAt?: boolean
    documentId?: boolean
    userId?: boolean
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["operation"]>

  export type OperationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    position?: boolean
    length?: boolean
    content?: boolean
    createdAt?: boolean
    documentId?: boolean
    userId?: boolean
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["operation"]>

  export type OperationSelectScalar = {
    id?: boolean
    type?: boolean
    position?: boolean
    length?: boolean
    content?: boolean
    createdAt?: boolean
    documentId?: boolean
    userId?: boolean
  }

  export type OperationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "position" | "length" | "content" | "createdAt" | "documentId" | "userId", ExtArgs["result"]["operation"]>
  export type OperationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OperationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OperationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OperationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Operation"
    objects: {
      document: Prisma.$DocumentPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.OpType
      position: number
      length: number | null
      content: string | null
      createdAt: Date
      documentId: string
      userId: string
    }, ExtArgs["result"]["operation"]>
    composites: {}
  }

  type OperationGetPayload<S extends boolean | null | undefined | OperationDefaultArgs> = $Result.GetResult<Prisma.$OperationPayload, S>

  type OperationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OperationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OperationCountAggregateInputType | true
    }

  export interface OperationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Operation'], meta: { name: 'Operation' } }
    /**
     * Find zero or one Operation that matches the filter.
     * @param {OperationFindUniqueArgs} args - Arguments to find a Operation
     * @example
     * // Get one Operation
     * const operation = await prisma.operation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OperationFindUniqueArgs>(args: SelectSubset<T, OperationFindUniqueArgs<ExtArgs>>): Prisma__OperationClient<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Operation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OperationFindUniqueOrThrowArgs} args - Arguments to find a Operation
     * @example
     * // Get one Operation
     * const operation = await prisma.operation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OperationFindUniqueOrThrowArgs>(args: SelectSubset<T, OperationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OperationClient<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Operation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationFindFirstArgs} args - Arguments to find a Operation
     * @example
     * // Get one Operation
     * const operation = await prisma.operation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OperationFindFirstArgs>(args?: SelectSubset<T, OperationFindFirstArgs<ExtArgs>>): Prisma__OperationClient<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Operation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationFindFirstOrThrowArgs} args - Arguments to find a Operation
     * @example
     * // Get one Operation
     * const operation = await prisma.operation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OperationFindFirstOrThrowArgs>(args?: SelectSubset<T, OperationFindFirstOrThrowArgs<ExtArgs>>): Prisma__OperationClient<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Operations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Operations
     * const operations = await prisma.operation.findMany()
     * 
     * // Get first 10 Operations
     * const operations = await prisma.operation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const operationWithIdOnly = await prisma.operation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OperationFindManyArgs>(args?: SelectSubset<T, OperationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Operation.
     * @param {OperationCreateArgs} args - Arguments to create a Operation.
     * @example
     * // Create one Operation
     * const Operation = await prisma.operation.create({
     *   data: {
     *     // ... data to create a Operation
     *   }
     * })
     * 
     */
    create<T extends OperationCreateArgs>(args: SelectSubset<T, OperationCreateArgs<ExtArgs>>): Prisma__OperationClient<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Operations.
     * @param {OperationCreateManyArgs} args - Arguments to create many Operations.
     * @example
     * // Create many Operations
     * const operation = await prisma.operation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OperationCreateManyArgs>(args?: SelectSubset<T, OperationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Operations and returns the data saved in the database.
     * @param {OperationCreateManyAndReturnArgs} args - Arguments to create many Operations.
     * @example
     * // Create many Operations
     * const operation = await prisma.operation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Operations and only return the `id`
     * const operationWithIdOnly = await prisma.operation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OperationCreateManyAndReturnArgs>(args?: SelectSubset<T, OperationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Operation.
     * @param {OperationDeleteArgs} args - Arguments to delete one Operation.
     * @example
     * // Delete one Operation
     * const Operation = await prisma.operation.delete({
     *   where: {
     *     // ... filter to delete one Operation
     *   }
     * })
     * 
     */
    delete<T extends OperationDeleteArgs>(args: SelectSubset<T, OperationDeleteArgs<ExtArgs>>): Prisma__OperationClient<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Operation.
     * @param {OperationUpdateArgs} args - Arguments to update one Operation.
     * @example
     * // Update one Operation
     * const operation = await prisma.operation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OperationUpdateArgs>(args: SelectSubset<T, OperationUpdateArgs<ExtArgs>>): Prisma__OperationClient<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Operations.
     * @param {OperationDeleteManyArgs} args - Arguments to filter Operations to delete.
     * @example
     * // Delete a few Operations
     * const { count } = await prisma.operation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OperationDeleteManyArgs>(args?: SelectSubset<T, OperationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Operations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Operations
     * const operation = await prisma.operation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OperationUpdateManyArgs>(args: SelectSubset<T, OperationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Operations and returns the data updated in the database.
     * @param {OperationUpdateManyAndReturnArgs} args - Arguments to update many Operations.
     * @example
     * // Update many Operations
     * const operation = await prisma.operation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Operations and only return the `id`
     * const operationWithIdOnly = await prisma.operation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OperationUpdateManyAndReturnArgs>(args: SelectSubset<T, OperationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Operation.
     * @param {OperationUpsertArgs} args - Arguments to update or create a Operation.
     * @example
     * // Update or create a Operation
     * const operation = await prisma.operation.upsert({
     *   create: {
     *     // ... data to create a Operation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Operation we want to update
     *   }
     * })
     */
    upsert<T extends OperationUpsertArgs>(args: SelectSubset<T, OperationUpsertArgs<ExtArgs>>): Prisma__OperationClient<$Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Operations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationCountArgs} args - Arguments to filter Operations to count.
     * @example
     * // Count the number of Operations
     * const count = await prisma.operation.count({
     *   where: {
     *     // ... the filter for the Operations we want to count
     *   }
     * })
    **/
    count<T extends OperationCountArgs>(
      args?: Subset<T, OperationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OperationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Operation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OperationAggregateArgs>(args: Subset<T, OperationAggregateArgs>): Prisma.PrismaPromise<GetOperationAggregateType<T>>

    /**
     * Group by Operation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OperationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OperationGroupByArgs['orderBy'] }
        : { orderBy?: OperationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OperationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOperationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Operation model
   */
  readonly fields: OperationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Operation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OperationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    document<T extends DocumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentDefaultArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Operation model
   */
  interface OperationFieldRefs {
    readonly id: FieldRef<"Operation", 'String'>
    readonly type: FieldRef<"Operation", 'OpType'>
    readonly position: FieldRef<"Operation", 'Int'>
    readonly length: FieldRef<"Operation", 'Int'>
    readonly content: FieldRef<"Operation", 'String'>
    readonly createdAt: FieldRef<"Operation", 'DateTime'>
    readonly documentId: FieldRef<"Operation", 'String'>
    readonly userId: FieldRef<"Operation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Operation findUnique
   */
  export type OperationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operation
     */
    omit?: OperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
    /**
     * Filter, which Operation to fetch.
     */
    where: OperationWhereUniqueInput
  }

  /**
   * Operation findUniqueOrThrow
   */
  export type OperationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operation
     */
    omit?: OperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
    /**
     * Filter, which Operation to fetch.
     */
    where: OperationWhereUniqueInput
  }

  /**
   * Operation findFirst
   */
  export type OperationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operation
     */
    omit?: OperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
    /**
     * Filter, which Operation to fetch.
     */
    where?: OperationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operations to fetch.
     */
    orderBy?: OperationOrderByWithRelationInput | OperationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Operations.
     */
    cursor?: OperationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Operations.
     */
    distinct?: OperationScalarFieldEnum | OperationScalarFieldEnum[]
  }

  /**
   * Operation findFirstOrThrow
   */
  export type OperationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operation
     */
    omit?: OperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
    /**
     * Filter, which Operation to fetch.
     */
    where?: OperationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operations to fetch.
     */
    orderBy?: OperationOrderByWithRelationInput | OperationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Operations.
     */
    cursor?: OperationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Operations.
     */
    distinct?: OperationScalarFieldEnum | OperationScalarFieldEnum[]
  }

  /**
   * Operation findMany
   */
  export type OperationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operation
     */
    omit?: OperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
    /**
     * Filter, which Operations to fetch.
     */
    where?: OperationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operations to fetch.
     */
    orderBy?: OperationOrderByWithRelationInput | OperationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Operations.
     */
    cursor?: OperationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operations.
     */
    skip?: number
    distinct?: OperationScalarFieldEnum | OperationScalarFieldEnum[]
  }

  /**
   * Operation create
   */
  export type OperationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operation
     */
    omit?: OperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
    /**
     * The data needed to create a Operation.
     */
    data: XOR<OperationCreateInput, OperationUncheckedCreateInput>
  }

  /**
   * Operation createMany
   */
  export type OperationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Operations.
     */
    data: OperationCreateManyInput | OperationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Operation createManyAndReturn
   */
  export type OperationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Operation
     */
    omit?: OperationOmit<ExtArgs> | null
    /**
     * The data used to create many Operations.
     */
    data: OperationCreateManyInput | OperationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Operation update
   */
  export type OperationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operation
     */
    omit?: OperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
    /**
     * The data needed to update a Operation.
     */
    data: XOR<OperationUpdateInput, OperationUncheckedUpdateInput>
    /**
     * Choose, which Operation to update.
     */
    where: OperationWhereUniqueInput
  }

  /**
   * Operation updateMany
   */
  export type OperationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Operations.
     */
    data: XOR<OperationUpdateManyMutationInput, OperationUncheckedUpdateManyInput>
    /**
     * Filter which Operations to update
     */
    where?: OperationWhereInput
    /**
     * Limit how many Operations to update.
     */
    limit?: number
  }

  /**
   * Operation updateManyAndReturn
   */
  export type OperationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Operation
     */
    omit?: OperationOmit<ExtArgs> | null
    /**
     * The data used to update Operations.
     */
    data: XOR<OperationUpdateManyMutationInput, OperationUncheckedUpdateManyInput>
    /**
     * Filter which Operations to update
     */
    where?: OperationWhereInput
    /**
     * Limit how many Operations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Operation upsert
   */
  export type OperationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operation
     */
    omit?: OperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
    /**
     * The filter to search for the Operation to update in case it exists.
     */
    where: OperationWhereUniqueInput
    /**
     * In case the Operation found by the `where` argument doesn't exist, create a new Operation with this data.
     */
    create: XOR<OperationCreateInput, OperationUncheckedCreateInput>
    /**
     * In case the Operation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OperationUpdateInput, OperationUncheckedUpdateInput>
  }

  /**
   * Operation delete
   */
  export type OperationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operation
     */
    omit?: OperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
    /**
     * Filter which Operation to delete.
     */
    where: OperationWhereUniqueInput
  }

  /**
   * Operation deleteMany
   */
  export type OperationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Operations to delete
     */
    where?: OperationWhereInput
    /**
     * Limit how many Operations to delete.
     */
    limit?: number
  }

  /**
   * Operation without action
   */
  export type OperationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operation
     */
    select?: OperationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operation
     */
    omit?: OperationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperationInclude<ExtArgs> | null
  }


  /**
   * Model UserCursor
   */

  export type AggregateUserCursor = {
    _count: UserCursorCountAggregateOutputType | null
    _avg: UserCursorAvgAggregateOutputType | null
    _sum: UserCursorSumAggregateOutputType | null
    _min: UserCursorMinAggregateOutputType | null
    _max: UserCursorMaxAggregateOutputType | null
  }

  export type UserCursorAvgAggregateOutputType = {
    cursorPos: number | null
    selectionStart: number | null
    selectionEnd: number | null
  }

  export type UserCursorSumAggregateOutputType = {
    cursorPos: number | null
    selectionStart: number | null
    selectionEnd: number | null
  }

  export type UserCursorMinAggregateOutputType = {
    id: string | null
    cursorPos: number | null
    selectionStart: number | null
    selectionEnd: number | null
    color: string | null
    lastActive: Date | null
    documentId: string | null
    userId: string | null
  }

  export type UserCursorMaxAggregateOutputType = {
    id: string | null
    cursorPos: number | null
    selectionStart: number | null
    selectionEnd: number | null
    color: string | null
    lastActive: Date | null
    documentId: string | null
    userId: string | null
  }

  export type UserCursorCountAggregateOutputType = {
    id: number
    cursorPos: number
    selectionStart: number
    selectionEnd: number
    color: number
    lastActive: number
    documentId: number
    userId: number
    _all: number
  }


  export type UserCursorAvgAggregateInputType = {
    cursorPos?: true
    selectionStart?: true
    selectionEnd?: true
  }

  export type UserCursorSumAggregateInputType = {
    cursorPos?: true
    selectionStart?: true
    selectionEnd?: true
  }

  export type UserCursorMinAggregateInputType = {
    id?: true
    cursorPos?: true
    selectionStart?: true
    selectionEnd?: true
    color?: true
    lastActive?: true
    documentId?: true
    userId?: true
  }

  export type UserCursorMaxAggregateInputType = {
    id?: true
    cursorPos?: true
    selectionStart?: true
    selectionEnd?: true
    color?: true
    lastActive?: true
    documentId?: true
    userId?: true
  }

  export type UserCursorCountAggregateInputType = {
    id?: true
    cursorPos?: true
    selectionStart?: true
    selectionEnd?: true
    color?: true
    lastActive?: true
    documentId?: true
    userId?: true
    _all?: true
  }

  export type UserCursorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCursor to aggregate.
     */
    where?: UserCursorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCursors to fetch.
     */
    orderBy?: UserCursorOrderByWithRelationInput | UserCursorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserCursorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCursors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCursors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserCursors
    **/
    _count?: true | UserCursorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserCursorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserCursorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserCursorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserCursorMaxAggregateInputType
  }

  export type GetUserCursorAggregateType<T extends UserCursorAggregateArgs> = {
        [P in keyof T & keyof AggregateUserCursor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserCursor[P]>
      : GetScalarType<T[P], AggregateUserCursor[P]>
  }




  export type UserCursorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCursorWhereInput
    orderBy?: UserCursorOrderByWithAggregationInput | UserCursorOrderByWithAggregationInput[]
    by: UserCursorScalarFieldEnum[] | UserCursorScalarFieldEnum
    having?: UserCursorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCursorCountAggregateInputType | true
    _avg?: UserCursorAvgAggregateInputType
    _sum?: UserCursorSumAggregateInputType
    _min?: UserCursorMinAggregateInputType
    _max?: UserCursorMaxAggregateInputType
  }

  export type UserCursorGroupByOutputType = {
    id: string
    cursorPos: number
    selectionStart: number | null
    selectionEnd: number | null
    color: string
    lastActive: Date
    documentId: string
    userId: string
    _count: UserCursorCountAggregateOutputType | null
    _avg: UserCursorAvgAggregateOutputType | null
    _sum: UserCursorSumAggregateOutputType | null
    _min: UserCursorMinAggregateOutputType | null
    _max: UserCursorMaxAggregateOutputType | null
  }

  type GetUserCursorGroupByPayload<T extends UserCursorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserCursorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserCursorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserCursorGroupByOutputType[P]>
            : GetScalarType<T[P], UserCursorGroupByOutputType[P]>
        }
      >
    >


  export type UserCursorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cursorPos?: boolean
    selectionStart?: boolean
    selectionEnd?: boolean
    color?: boolean
    lastActive?: boolean
    documentId?: boolean
    userId?: boolean
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCursor"]>

  export type UserCursorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cursorPos?: boolean
    selectionStart?: boolean
    selectionEnd?: boolean
    color?: boolean
    lastActive?: boolean
    documentId?: boolean
    userId?: boolean
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCursor"]>

  export type UserCursorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cursorPos?: boolean
    selectionStart?: boolean
    selectionEnd?: boolean
    color?: boolean
    lastActive?: boolean
    documentId?: boolean
    userId?: boolean
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCursor"]>

  export type UserCursorSelectScalar = {
    id?: boolean
    cursorPos?: boolean
    selectionStart?: boolean
    selectionEnd?: boolean
    color?: boolean
    lastActive?: boolean
    documentId?: boolean
    userId?: boolean
  }

  export type UserCursorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cursorPos" | "selectionStart" | "selectionEnd" | "color" | "lastActive" | "documentId" | "userId", ExtArgs["result"]["userCursor"]>
  export type UserCursorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserCursorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserCursorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserCursorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserCursor"
    objects: {
      document: Prisma.$DocumentPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      cursorPos: number
      selectionStart: number | null
      selectionEnd: number | null
      color: string
      lastActive: Date
      documentId: string
      userId: string
    }, ExtArgs["result"]["userCursor"]>
    composites: {}
  }

  type UserCursorGetPayload<S extends boolean | null | undefined | UserCursorDefaultArgs> = $Result.GetResult<Prisma.$UserCursorPayload, S>

  type UserCursorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserCursorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCursorCountAggregateInputType | true
    }

  export interface UserCursorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserCursor'], meta: { name: 'UserCursor' } }
    /**
     * Find zero or one UserCursor that matches the filter.
     * @param {UserCursorFindUniqueArgs} args - Arguments to find a UserCursor
     * @example
     * // Get one UserCursor
     * const userCursor = await prisma.userCursor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserCursorFindUniqueArgs>(args: SelectSubset<T, UserCursorFindUniqueArgs<ExtArgs>>): Prisma__UserCursorClient<$Result.GetResult<Prisma.$UserCursorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserCursor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserCursorFindUniqueOrThrowArgs} args - Arguments to find a UserCursor
     * @example
     * // Get one UserCursor
     * const userCursor = await prisma.userCursor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserCursorFindUniqueOrThrowArgs>(args: SelectSubset<T, UserCursorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserCursorClient<$Result.GetResult<Prisma.$UserCursorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserCursor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCursorFindFirstArgs} args - Arguments to find a UserCursor
     * @example
     * // Get one UserCursor
     * const userCursor = await prisma.userCursor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserCursorFindFirstArgs>(args?: SelectSubset<T, UserCursorFindFirstArgs<ExtArgs>>): Prisma__UserCursorClient<$Result.GetResult<Prisma.$UserCursorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserCursor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCursorFindFirstOrThrowArgs} args - Arguments to find a UserCursor
     * @example
     * // Get one UserCursor
     * const userCursor = await prisma.userCursor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserCursorFindFirstOrThrowArgs>(args?: SelectSubset<T, UserCursorFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserCursorClient<$Result.GetResult<Prisma.$UserCursorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserCursors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCursorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserCursors
     * const userCursors = await prisma.userCursor.findMany()
     * 
     * // Get first 10 UserCursors
     * const userCursors = await prisma.userCursor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userCursorWithIdOnly = await prisma.userCursor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserCursorFindManyArgs>(args?: SelectSubset<T, UserCursorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCursorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserCursor.
     * @param {UserCursorCreateArgs} args - Arguments to create a UserCursor.
     * @example
     * // Create one UserCursor
     * const UserCursor = await prisma.userCursor.create({
     *   data: {
     *     // ... data to create a UserCursor
     *   }
     * })
     * 
     */
    create<T extends UserCursorCreateArgs>(args: SelectSubset<T, UserCursorCreateArgs<ExtArgs>>): Prisma__UserCursorClient<$Result.GetResult<Prisma.$UserCursorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserCursors.
     * @param {UserCursorCreateManyArgs} args - Arguments to create many UserCursors.
     * @example
     * // Create many UserCursors
     * const userCursor = await prisma.userCursor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCursorCreateManyArgs>(args?: SelectSubset<T, UserCursorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserCursors and returns the data saved in the database.
     * @param {UserCursorCreateManyAndReturnArgs} args - Arguments to create many UserCursors.
     * @example
     * // Create many UserCursors
     * const userCursor = await prisma.userCursor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserCursors and only return the `id`
     * const userCursorWithIdOnly = await prisma.userCursor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCursorCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCursorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCursorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserCursor.
     * @param {UserCursorDeleteArgs} args - Arguments to delete one UserCursor.
     * @example
     * // Delete one UserCursor
     * const UserCursor = await prisma.userCursor.delete({
     *   where: {
     *     // ... filter to delete one UserCursor
     *   }
     * })
     * 
     */
    delete<T extends UserCursorDeleteArgs>(args: SelectSubset<T, UserCursorDeleteArgs<ExtArgs>>): Prisma__UserCursorClient<$Result.GetResult<Prisma.$UserCursorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserCursor.
     * @param {UserCursorUpdateArgs} args - Arguments to update one UserCursor.
     * @example
     * // Update one UserCursor
     * const userCursor = await prisma.userCursor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserCursorUpdateArgs>(args: SelectSubset<T, UserCursorUpdateArgs<ExtArgs>>): Prisma__UserCursorClient<$Result.GetResult<Prisma.$UserCursorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserCursors.
     * @param {UserCursorDeleteManyArgs} args - Arguments to filter UserCursors to delete.
     * @example
     * // Delete a few UserCursors
     * const { count } = await prisma.userCursor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserCursorDeleteManyArgs>(args?: SelectSubset<T, UserCursorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserCursors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCursorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserCursors
     * const userCursor = await prisma.userCursor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserCursorUpdateManyArgs>(args: SelectSubset<T, UserCursorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserCursors and returns the data updated in the database.
     * @param {UserCursorUpdateManyAndReturnArgs} args - Arguments to update many UserCursors.
     * @example
     * // Update many UserCursors
     * const userCursor = await prisma.userCursor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserCursors and only return the `id`
     * const userCursorWithIdOnly = await prisma.userCursor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserCursorUpdateManyAndReturnArgs>(args: SelectSubset<T, UserCursorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCursorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserCursor.
     * @param {UserCursorUpsertArgs} args - Arguments to update or create a UserCursor.
     * @example
     * // Update or create a UserCursor
     * const userCursor = await prisma.userCursor.upsert({
     *   create: {
     *     // ... data to create a UserCursor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserCursor we want to update
     *   }
     * })
     */
    upsert<T extends UserCursorUpsertArgs>(args: SelectSubset<T, UserCursorUpsertArgs<ExtArgs>>): Prisma__UserCursorClient<$Result.GetResult<Prisma.$UserCursorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserCursors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCursorCountArgs} args - Arguments to filter UserCursors to count.
     * @example
     * // Count the number of UserCursors
     * const count = await prisma.userCursor.count({
     *   where: {
     *     // ... the filter for the UserCursors we want to count
     *   }
     * })
    **/
    count<T extends UserCursorCountArgs>(
      args?: Subset<T, UserCursorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCursorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserCursor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCursorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserCursorAggregateArgs>(args: Subset<T, UserCursorAggregateArgs>): Prisma.PrismaPromise<GetUserCursorAggregateType<T>>

    /**
     * Group by UserCursor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCursorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserCursorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserCursorGroupByArgs['orderBy'] }
        : { orderBy?: UserCursorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserCursorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserCursorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserCursor model
   */
  readonly fields: UserCursorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserCursor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserCursorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    document<T extends DocumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentDefaultArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserCursor model
   */
  interface UserCursorFieldRefs {
    readonly id: FieldRef<"UserCursor", 'String'>
    readonly cursorPos: FieldRef<"UserCursor", 'Int'>
    readonly selectionStart: FieldRef<"UserCursor", 'Int'>
    readonly selectionEnd: FieldRef<"UserCursor", 'Int'>
    readonly color: FieldRef<"UserCursor", 'String'>
    readonly lastActive: FieldRef<"UserCursor", 'DateTime'>
    readonly documentId: FieldRef<"UserCursor", 'String'>
    readonly userId: FieldRef<"UserCursor", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserCursor findUnique
   */
  export type UserCursorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCursor
     */
    select?: UserCursorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCursor
     */
    omit?: UserCursorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCursorInclude<ExtArgs> | null
    /**
     * Filter, which UserCursor to fetch.
     */
    where: UserCursorWhereUniqueInput
  }

  /**
   * UserCursor findUniqueOrThrow
   */
  export type UserCursorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCursor
     */
    select?: UserCursorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCursor
     */
    omit?: UserCursorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCursorInclude<ExtArgs> | null
    /**
     * Filter, which UserCursor to fetch.
     */
    where: UserCursorWhereUniqueInput
  }

  /**
   * UserCursor findFirst
   */
  export type UserCursorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCursor
     */
    select?: UserCursorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCursor
     */
    omit?: UserCursorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCursorInclude<ExtArgs> | null
    /**
     * Filter, which UserCursor to fetch.
     */
    where?: UserCursorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCursors to fetch.
     */
    orderBy?: UserCursorOrderByWithRelationInput | UserCursorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCursors.
     */
    cursor?: UserCursorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCursors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCursors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCursors.
     */
    distinct?: UserCursorScalarFieldEnum | UserCursorScalarFieldEnum[]
  }

  /**
   * UserCursor findFirstOrThrow
   */
  export type UserCursorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCursor
     */
    select?: UserCursorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCursor
     */
    omit?: UserCursorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCursorInclude<ExtArgs> | null
    /**
     * Filter, which UserCursor to fetch.
     */
    where?: UserCursorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCursors to fetch.
     */
    orderBy?: UserCursorOrderByWithRelationInput | UserCursorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCursors.
     */
    cursor?: UserCursorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCursors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCursors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCursors.
     */
    distinct?: UserCursorScalarFieldEnum | UserCursorScalarFieldEnum[]
  }

  /**
   * UserCursor findMany
   */
  export type UserCursorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCursor
     */
    select?: UserCursorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCursor
     */
    omit?: UserCursorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCursorInclude<ExtArgs> | null
    /**
     * Filter, which UserCursors to fetch.
     */
    where?: UserCursorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCursors to fetch.
     */
    orderBy?: UserCursorOrderByWithRelationInput | UserCursorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserCursors.
     */
    cursor?: UserCursorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCursors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCursors.
     */
    skip?: number
    distinct?: UserCursorScalarFieldEnum | UserCursorScalarFieldEnum[]
  }

  /**
   * UserCursor create
   */
  export type UserCursorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCursor
     */
    select?: UserCursorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCursor
     */
    omit?: UserCursorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCursorInclude<ExtArgs> | null
    /**
     * The data needed to create a UserCursor.
     */
    data: XOR<UserCursorCreateInput, UserCursorUncheckedCreateInput>
  }

  /**
   * UserCursor createMany
   */
  export type UserCursorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserCursors.
     */
    data: UserCursorCreateManyInput | UserCursorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserCursor createManyAndReturn
   */
  export type UserCursorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCursor
     */
    select?: UserCursorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserCursor
     */
    omit?: UserCursorOmit<ExtArgs> | null
    /**
     * The data used to create many UserCursors.
     */
    data: UserCursorCreateManyInput | UserCursorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCursorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserCursor update
   */
  export type UserCursorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCursor
     */
    select?: UserCursorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCursor
     */
    omit?: UserCursorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCursorInclude<ExtArgs> | null
    /**
     * The data needed to update a UserCursor.
     */
    data: XOR<UserCursorUpdateInput, UserCursorUncheckedUpdateInput>
    /**
     * Choose, which UserCursor to update.
     */
    where: UserCursorWhereUniqueInput
  }

  /**
   * UserCursor updateMany
   */
  export type UserCursorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserCursors.
     */
    data: XOR<UserCursorUpdateManyMutationInput, UserCursorUncheckedUpdateManyInput>
    /**
     * Filter which UserCursors to update
     */
    where?: UserCursorWhereInput
    /**
     * Limit how many UserCursors to update.
     */
    limit?: number
  }

  /**
   * UserCursor updateManyAndReturn
   */
  export type UserCursorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCursor
     */
    select?: UserCursorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserCursor
     */
    omit?: UserCursorOmit<ExtArgs> | null
    /**
     * The data used to update UserCursors.
     */
    data: XOR<UserCursorUpdateManyMutationInput, UserCursorUncheckedUpdateManyInput>
    /**
     * Filter which UserCursors to update
     */
    where?: UserCursorWhereInput
    /**
     * Limit how many UserCursors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCursorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserCursor upsert
   */
  export type UserCursorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCursor
     */
    select?: UserCursorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCursor
     */
    omit?: UserCursorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCursorInclude<ExtArgs> | null
    /**
     * The filter to search for the UserCursor to update in case it exists.
     */
    where: UserCursorWhereUniqueInput
    /**
     * In case the UserCursor found by the `where` argument doesn't exist, create a new UserCursor with this data.
     */
    create: XOR<UserCursorCreateInput, UserCursorUncheckedCreateInput>
    /**
     * In case the UserCursor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserCursorUpdateInput, UserCursorUncheckedUpdateInput>
  }

  /**
   * UserCursor delete
   */
  export type UserCursorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCursor
     */
    select?: UserCursorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCursor
     */
    omit?: UserCursorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCursorInclude<ExtArgs> | null
    /**
     * Filter which UserCursor to delete.
     */
    where: UserCursorWhereUniqueInput
  }

  /**
   * UserCursor deleteMany
   */
  export type UserCursorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCursors to delete
     */
    where?: UserCursorWhereInput
    /**
     * Limit how many UserCursors to delete.
     */
    limit?: number
  }

  /**
   * UserCursor without action
   */
  export type UserCursorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCursor
     */
    select?: UserCursorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCursor
     */
    omit?: UserCursorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCursorInclude<ExtArgs> | null
  }


  /**
   * Model UserPresence
   */

  export type AggregateUserPresence = {
    _count: UserPresenceCountAggregateOutputType | null
    _min: UserPresenceMinAggregateOutputType | null
    _max: UserPresenceMaxAggregateOutputType | null
  }

  export type UserPresenceMinAggregateOutputType = {
    id: string | null
    status: $Enums.PresenceStatus | null
    lastActive: Date | null
    userId: string | null
  }

  export type UserPresenceMaxAggregateOutputType = {
    id: string | null
    status: $Enums.PresenceStatus | null
    lastActive: Date | null
    userId: string | null
  }

  export type UserPresenceCountAggregateOutputType = {
    id: number
    status: number
    lastActive: number
    userId: number
    _all: number
  }


  export type UserPresenceMinAggregateInputType = {
    id?: true
    status?: true
    lastActive?: true
    userId?: true
  }

  export type UserPresenceMaxAggregateInputType = {
    id?: true
    status?: true
    lastActive?: true
    userId?: true
  }

  export type UserPresenceCountAggregateInputType = {
    id?: true
    status?: true
    lastActive?: true
    userId?: true
    _all?: true
  }

  export type UserPresenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPresence to aggregate.
     */
    where?: UserPresenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPresences to fetch.
     */
    orderBy?: UserPresenceOrderByWithRelationInput | UserPresenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPresenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPresences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPresences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPresences
    **/
    _count?: true | UserPresenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPresenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPresenceMaxAggregateInputType
  }

  export type GetUserPresenceAggregateType<T extends UserPresenceAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPresence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPresence[P]>
      : GetScalarType<T[P], AggregateUserPresence[P]>
  }




  export type UserPresenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPresenceWhereInput
    orderBy?: UserPresenceOrderByWithAggregationInput | UserPresenceOrderByWithAggregationInput[]
    by: UserPresenceScalarFieldEnum[] | UserPresenceScalarFieldEnum
    having?: UserPresenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPresenceCountAggregateInputType | true
    _min?: UserPresenceMinAggregateInputType
    _max?: UserPresenceMaxAggregateInputType
  }

  export type UserPresenceGroupByOutputType = {
    id: string
    status: $Enums.PresenceStatus
    lastActive: Date
    userId: string
    _count: UserPresenceCountAggregateOutputType | null
    _min: UserPresenceMinAggregateOutputType | null
    _max: UserPresenceMaxAggregateOutputType | null
  }

  type GetUserPresenceGroupByPayload<T extends UserPresenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPresenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPresenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPresenceGroupByOutputType[P]>
            : GetScalarType<T[P], UserPresenceGroupByOutputType[P]>
        }
      >
    >


  export type UserPresenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    lastActive?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPresence"]>

  export type UserPresenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    lastActive?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPresence"]>

  export type UserPresenceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    lastActive?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPresence"]>

  export type UserPresenceSelectScalar = {
    id?: boolean
    status?: boolean
    lastActive?: boolean
    userId?: boolean
  }

  export type UserPresenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "status" | "lastActive" | "userId", ExtArgs["result"]["userPresence"]>
  export type UserPresenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserPresenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserPresenceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserPresencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPresence"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      status: $Enums.PresenceStatus
      lastActive: Date
      userId: string
    }, ExtArgs["result"]["userPresence"]>
    composites: {}
  }

  type UserPresenceGetPayload<S extends boolean | null | undefined | UserPresenceDefaultArgs> = $Result.GetResult<Prisma.$UserPresencePayload, S>

  type UserPresenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserPresenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserPresenceCountAggregateInputType | true
    }

  export interface UserPresenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPresence'], meta: { name: 'UserPresence' } }
    /**
     * Find zero or one UserPresence that matches the filter.
     * @param {UserPresenceFindUniqueArgs} args - Arguments to find a UserPresence
     * @example
     * // Get one UserPresence
     * const userPresence = await prisma.userPresence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserPresenceFindUniqueArgs>(args: SelectSubset<T, UserPresenceFindUniqueArgs<ExtArgs>>): Prisma__UserPresenceClient<$Result.GetResult<Prisma.$UserPresencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserPresence that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserPresenceFindUniqueOrThrowArgs} args - Arguments to find a UserPresence
     * @example
     * // Get one UserPresence
     * const userPresence = await prisma.userPresence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserPresenceFindUniqueOrThrowArgs>(args: SelectSubset<T, UserPresenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserPresenceClient<$Result.GetResult<Prisma.$UserPresencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserPresence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPresenceFindFirstArgs} args - Arguments to find a UserPresence
     * @example
     * // Get one UserPresence
     * const userPresence = await prisma.userPresence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserPresenceFindFirstArgs>(args?: SelectSubset<T, UserPresenceFindFirstArgs<ExtArgs>>): Prisma__UserPresenceClient<$Result.GetResult<Prisma.$UserPresencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserPresence that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPresenceFindFirstOrThrowArgs} args - Arguments to find a UserPresence
     * @example
     * // Get one UserPresence
     * const userPresence = await prisma.userPresence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserPresenceFindFirstOrThrowArgs>(args?: SelectSubset<T, UserPresenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserPresenceClient<$Result.GetResult<Prisma.$UserPresencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserPresences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPresenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPresences
     * const userPresences = await prisma.userPresence.findMany()
     * 
     * // Get first 10 UserPresences
     * const userPresences = await prisma.userPresence.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userPresenceWithIdOnly = await prisma.userPresence.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserPresenceFindManyArgs>(args?: SelectSubset<T, UserPresenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPresencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserPresence.
     * @param {UserPresenceCreateArgs} args - Arguments to create a UserPresence.
     * @example
     * // Create one UserPresence
     * const UserPresence = await prisma.userPresence.create({
     *   data: {
     *     // ... data to create a UserPresence
     *   }
     * })
     * 
     */
    create<T extends UserPresenceCreateArgs>(args: SelectSubset<T, UserPresenceCreateArgs<ExtArgs>>): Prisma__UserPresenceClient<$Result.GetResult<Prisma.$UserPresencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserPresences.
     * @param {UserPresenceCreateManyArgs} args - Arguments to create many UserPresences.
     * @example
     * // Create many UserPresences
     * const userPresence = await prisma.userPresence.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserPresenceCreateManyArgs>(args?: SelectSubset<T, UserPresenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserPresences and returns the data saved in the database.
     * @param {UserPresenceCreateManyAndReturnArgs} args - Arguments to create many UserPresences.
     * @example
     * // Create many UserPresences
     * const userPresence = await prisma.userPresence.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserPresences and only return the `id`
     * const userPresenceWithIdOnly = await prisma.userPresence.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserPresenceCreateManyAndReturnArgs>(args?: SelectSubset<T, UserPresenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPresencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserPresence.
     * @param {UserPresenceDeleteArgs} args - Arguments to delete one UserPresence.
     * @example
     * // Delete one UserPresence
     * const UserPresence = await prisma.userPresence.delete({
     *   where: {
     *     // ... filter to delete one UserPresence
     *   }
     * })
     * 
     */
    delete<T extends UserPresenceDeleteArgs>(args: SelectSubset<T, UserPresenceDeleteArgs<ExtArgs>>): Prisma__UserPresenceClient<$Result.GetResult<Prisma.$UserPresencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserPresence.
     * @param {UserPresenceUpdateArgs} args - Arguments to update one UserPresence.
     * @example
     * // Update one UserPresence
     * const userPresence = await prisma.userPresence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserPresenceUpdateArgs>(args: SelectSubset<T, UserPresenceUpdateArgs<ExtArgs>>): Prisma__UserPresenceClient<$Result.GetResult<Prisma.$UserPresencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserPresences.
     * @param {UserPresenceDeleteManyArgs} args - Arguments to filter UserPresences to delete.
     * @example
     * // Delete a few UserPresences
     * const { count } = await prisma.userPresence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserPresenceDeleteManyArgs>(args?: SelectSubset<T, UserPresenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPresences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPresenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPresences
     * const userPresence = await prisma.userPresence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserPresenceUpdateManyArgs>(args: SelectSubset<T, UserPresenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPresences and returns the data updated in the database.
     * @param {UserPresenceUpdateManyAndReturnArgs} args - Arguments to update many UserPresences.
     * @example
     * // Update many UserPresences
     * const userPresence = await prisma.userPresence.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserPresences and only return the `id`
     * const userPresenceWithIdOnly = await prisma.userPresence.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserPresenceUpdateManyAndReturnArgs>(args: SelectSubset<T, UserPresenceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPresencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserPresence.
     * @param {UserPresenceUpsertArgs} args - Arguments to update or create a UserPresence.
     * @example
     * // Update or create a UserPresence
     * const userPresence = await prisma.userPresence.upsert({
     *   create: {
     *     // ... data to create a UserPresence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPresence we want to update
     *   }
     * })
     */
    upsert<T extends UserPresenceUpsertArgs>(args: SelectSubset<T, UserPresenceUpsertArgs<ExtArgs>>): Prisma__UserPresenceClient<$Result.GetResult<Prisma.$UserPresencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserPresences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPresenceCountArgs} args - Arguments to filter UserPresences to count.
     * @example
     * // Count the number of UserPresences
     * const count = await prisma.userPresence.count({
     *   where: {
     *     // ... the filter for the UserPresences we want to count
     *   }
     * })
    **/
    count<T extends UserPresenceCountArgs>(
      args?: Subset<T, UserPresenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPresenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPresence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPresenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPresenceAggregateArgs>(args: Subset<T, UserPresenceAggregateArgs>): Prisma.PrismaPromise<GetUserPresenceAggregateType<T>>

    /**
     * Group by UserPresence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPresenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPresenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPresenceGroupByArgs['orderBy'] }
        : { orderBy?: UserPresenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPresenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPresenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPresence model
   */
  readonly fields: UserPresenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPresence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPresenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserPresence model
   */
  interface UserPresenceFieldRefs {
    readonly id: FieldRef<"UserPresence", 'String'>
    readonly status: FieldRef<"UserPresence", 'PresenceStatus'>
    readonly lastActive: FieldRef<"UserPresence", 'DateTime'>
    readonly userId: FieldRef<"UserPresence", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserPresence findUnique
   */
  export type UserPresenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPresence
     */
    select?: UserPresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPresence
     */
    omit?: UserPresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPresenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPresence to fetch.
     */
    where: UserPresenceWhereUniqueInput
  }

  /**
   * UserPresence findUniqueOrThrow
   */
  export type UserPresenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPresence
     */
    select?: UserPresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPresence
     */
    omit?: UserPresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPresenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPresence to fetch.
     */
    where: UserPresenceWhereUniqueInput
  }

  /**
   * UserPresence findFirst
   */
  export type UserPresenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPresence
     */
    select?: UserPresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPresence
     */
    omit?: UserPresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPresenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPresence to fetch.
     */
    where?: UserPresenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPresences to fetch.
     */
    orderBy?: UserPresenceOrderByWithRelationInput | UserPresenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPresences.
     */
    cursor?: UserPresenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPresences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPresences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPresences.
     */
    distinct?: UserPresenceScalarFieldEnum | UserPresenceScalarFieldEnum[]
  }

  /**
   * UserPresence findFirstOrThrow
   */
  export type UserPresenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPresence
     */
    select?: UserPresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPresence
     */
    omit?: UserPresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPresenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPresence to fetch.
     */
    where?: UserPresenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPresences to fetch.
     */
    orderBy?: UserPresenceOrderByWithRelationInput | UserPresenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPresences.
     */
    cursor?: UserPresenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPresences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPresences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPresences.
     */
    distinct?: UserPresenceScalarFieldEnum | UserPresenceScalarFieldEnum[]
  }

  /**
   * UserPresence findMany
   */
  export type UserPresenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPresence
     */
    select?: UserPresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPresence
     */
    omit?: UserPresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPresenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPresences to fetch.
     */
    where?: UserPresenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPresences to fetch.
     */
    orderBy?: UserPresenceOrderByWithRelationInput | UserPresenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPresences.
     */
    cursor?: UserPresenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPresences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPresences.
     */
    skip?: number
    distinct?: UserPresenceScalarFieldEnum | UserPresenceScalarFieldEnum[]
  }

  /**
   * UserPresence create
   */
  export type UserPresenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPresence
     */
    select?: UserPresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPresence
     */
    omit?: UserPresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPresenceInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPresence.
     */
    data: XOR<UserPresenceCreateInput, UserPresenceUncheckedCreateInput>
  }

  /**
   * UserPresence createMany
   */
  export type UserPresenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPresences.
     */
    data: UserPresenceCreateManyInput | UserPresenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserPresence createManyAndReturn
   */
  export type UserPresenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPresence
     */
    select?: UserPresenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserPresence
     */
    omit?: UserPresenceOmit<ExtArgs> | null
    /**
     * The data used to create many UserPresences.
     */
    data: UserPresenceCreateManyInput | UserPresenceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPresenceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPresence update
   */
  export type UserPresenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPresence
     */
    select?: UserPresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPresence
     */
    omit?: UserPresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPresenceInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPresence.
     */
    data: XOR<UserPresenceUpdateInput, UserPresenceUncheckedUpdateInput>
    /**
     * Choose, which UserPresence to update.
     */
    where: UserPresenceWhereUniqueInput
  }

  /**
   * UserPresence updateMany
   */
  export type UserPresenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPresences.
     */
    data: XOR<UserPresenceUpdateManyMutationInput, UserPresenceUncheckedUpdateManyInput>
    /**
     * Filter which UserPresences to update
     */
    where?: UserPresenceWhereInput
    /**
     * Limit how many UserPresences to update.
     */
    limit?: number
  }

  /**
   * UserPresence updateManyAndReturn
   */
  export type UserPresenceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPresence
     */
    select?: UserPresenceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserPresence
     */
    omit?: UserPresenceOmit<ExtArgs> | null
    /**
     * The data used to update UserPresences.
     */
    data: XOR<UserPresenceUpdateManyMutationInput, UserPresenceUncheckedUpdateManyInput>
    /**
     * Filter which UserPresences to update
     */
    where?: UserPresenceWhereInput
    /**
     * Limit how many UserPresences to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPresenceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPresence upsert
   */
  export type UserPresenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPresence
     */
    select?: UserPresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPresence
     */
    omit?: UserPresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPresenceInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPresence to update in case it exists.
     */
    where: UserPresenceWhereUniqueInput
    /**
     * In case the UserPresence found by the `where` argument doesn't exist, create a new UserPresence with this data.
     */
    create: XOR<UserPresenceCreateInput, UserPresenceUncheckedCreateInput>
    /**
     * In case the UserPresence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPresenceUpdateInput, UserPresenceUncheckedUpdateInput>
  }

  /**
   * UserPresence delete
   */
  export type UserPresenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPresence
     */
    select?: UserPresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPresence
     */
    omit?: UserPresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPresenceInclude<ExtArgs> | null
    /**
     * Filter which UserPresence to delete.
     */
    where: UserPresenceWhereUniqueInput
  }

  /**
   * UserPresence deleteMany
   */
  export type UserPresenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPresences to delete
     */
    where?: UserPresenceWhereInput
    /**
     * Limit how many UserPresences to delete.
     */
    limit?: number
  }

  /**
   * UserPresence without action
   */
  export type UserPresenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPresence
     */
    select?: UserPresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPresence
     */
    omit?: UserPresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPresenceInclude<ExtArgs> | null
  }


  /**
   * Model DocumentSnapshot
   */

  export type AggregateDocumentSnapshot = {
    _count: DocumentSnapshotCountAggregateOutputType | null
    _min: DocumentSnapshotMinAggregateOutputType | null
    _max: DocumentSnapshotMaxAggregateOutputType | null
  }

  export type DocumentSnapshotMinAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    documentId: string | null
    createdById: string | null
  }

  export type DocumentSnapshotMaxAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    documentId: string | null
    createdById: string | null
  }

  export type DocumentSnapshotCountAggregateOutputType = {
    id: number
    content: number
    createdAt: number
    documentId: number
    createdById: number
    _all: number
  }


  export type DocumentSnapshotMinAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    documentId?: true
    createdById?: true
  }

  export type DocumentSnapshotMaxAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    documentId?: true
    createdById?: true
  }

  export type DocumentSnapshotCountAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    documentId?: true
    createdById?: true
    _all?: true
  }

  export type DocumentSnapshotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentSnapshot to aggregate.
     */
    where?: DocumentSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentSnapshots to fetch.
     */
    orderBy?: DocumentSnapshotOrderByWithRelationInput | DocumentSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DocumentSnapshots
    **/
    _count?: true | DocumentSnapshotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentSnapshotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentSnapshotMaxAggregateInputType
  }

  export type GetDocumentSnapshotAggregateType<T extends DocumentSnapshotAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumentSnapshot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumentSnapshot[P]>
      : GetScalarType<T[P], AggregateDocumentSnapshot[P]>
  }




  export type DocumentSnapshotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentSnapshotWhereInput
    orderBy?: DocumentSnapshotOrderByWithAggregationInput | DocumentSnapshotOrderByWithAggregationInput[]
    by: DocumentSnapshotScalarFieldEnum[] | DocumentSnapshotScalarFieldEnum
    having?: DocumentSnapshotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentSnapshotCountAggregateInputType | true
    _min?: DocumentSnapshotMinAggregateInputType
    _max?: DocumentSnapshotMaxAggregateInputType
  }

  export type DocumentSnapshotGroupByOutputType = {
    id: string
    content: string
    createdAt: Date
    documentId: string
    createdById: string
    _count: DocumentSnapshotCountAggregateOutputType | null
    _min: DocumentSnapshotMinAggregateOutputType | null
    _max: DocumentSnapshotMaxAggregateOutputType | null
  }

  type GetDocumentSnapshotGroupByPayload<T extends DocumentSnapshotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentSnapshotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentSnapshotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentSnapshotGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentSnapshotGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSnapshotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    documentId?: boolean
    createdById?: boolean
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentSnapshot"]>

  export type DocumentSnapshotSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    documentId?: boolean
    createdById?: boolean
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentSnapshot"]>

  export type DocumentSnapshotSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    documentId?: boolean
    createdById?: boolean
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentSnapshot"]>

  export type DocumentSnapshotSelectScalar = {
    id?: boolean
    content?: boolean
    createdAt?: boolean
    documentId?: boolean
    createdById?: boolean
  }

  export type DocumentSnapshotOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "createdAt" | "documentId" | "createdById", ExtArgs["result"]["documentSnapshot"]>
  export type DocumentSnapshotInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DocumentSnapshotIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DocumentSnapshotIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DocumentSnapshotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DocumentSnapshot"
    objects: {
      document: Prisma.$DocumentPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      createdAt: Date
      documentId: string
      createdById: string
    }, ExtArgs["result"]["documentSnapshot"]>
    composites: {}
  }

  type DocumentSnapshotGetPayload<S extends boolean | null | undefined | DocumentSnapshotDefaultArgs> = $Result.GetResult<Prisma.$DocumentSnapshotPayload, S>

  type DocumentSnapshotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentSnapshotFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentSnapshotCountAggregateInputType | true
    }

  export interface DocumentSnapshotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentSnapshot'], meta: { name: 'DocumentSnapshot' } }
    /**
     * Find zero or one DocumentSnapshot that matches the filter.
     * @param {DocumentSnapshotFindUniqueArgs} args - Arguments to find a DocumentSnapshot
     * @example
     * // Get one DocumentSnapshot
     * const documentSnapshot = await prisma.documentSnapshot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentSnapshotFindUniqueArgs>(args: SelectSubset<T, DocumentSnapshotFindUniqueArgs<ExtArgs>>): Prisma__DocumentSnapshotClient<$Result.GetResult<Prisma.$DocumentSnapshotPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DocumentSnapshot that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentSnapshotFindUniqueOrThrowArgs} args - Arguments to find a DocumentSnapshot
     * @example
     * // Get one DocumentSnapshot
     * const documentSnapshot = await prisma.documentSnapshot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentSnapshotFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentSnapshotFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentSnapshotClient<$Result.GetResult<Prisma.$DocumentSnapshotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentSnapshot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentSnapshotFindFirstArgs} args - Arguments to find a DocumentSnapshot
     * @example
     * // Get one DocumentSnapshot
     * const documentSnapshot = await prisma.documentSnapshot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentSnapshotFindFirstArgs>(args?: SelectSubset<T, DocumentSnapshotFindFirstArgs<ExtArgs>>): Prisma__DocumentSnapshotClient<$Result.GetResult<Prisma.$DocumentSnapshotPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentSnapshot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentSnapshotFindFirstOrThrowArgs} args - Arguments to find a DocumentSnapshot
     * @example
     * // Get one DocumentSnapshot
     * const documentSnapshot = await prisma.documentSnapshot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentSnapshotFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentSnapshotFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentSnapshotClient<$Result.GetResult<Prisma.$DocumentSnapshotPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DocumentSnapshots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentSnapshotFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DocumentSnapshots
     * const documentSnapshots = await prisma.documentSnapshot.findMany()
     * 
     * // Get first 10 DocumentSnapshots
     * const documentSnapshots = await prisma.documentSnapshot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentSnapshotWithIdOnly = await prisma.documentSnapshot.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentSnapshotFindManyArgs>(args?: SelectSubset<T, DocumentSnapshotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentSnapshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DocumentSnapshot.
     * @param {DocumentSnapshotCreateArgs} args - Arguments to create a DocumentSnapshot.
     * @example
     * // Create one DocumentSnapshot
     * const DocumentSnapshot = await prisma.documentSnapshot.create({
     *   data: {
     *     // ... data to create a DocumentSnapshot
     *   }
     * })
     * 
     */
    create<T extends DocumentSnapshotCreateArgs>(args: SelectSubset<T, DocumentSnapshotCreateArgs<ExtArgs>>): Prisma__DocumentSnapshotClient<$Result.GetResult<Prisma.$DocumentSnapshotPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DocumentSnapshots.
     * @param {DocumentSnapshotCreateManyArgs} args - Arguments to create many DocumentSnapshots.
     * @example
     * // Create many DocumentSnapshots
     * const documentSnapshot = await prisma.documentSnapshot.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentSnapshotCreateManyArgs>(args?: SelectSubset<T, DocumentSnapshotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DocumentSnapshots and returns the data saved in the database.
     * @param {DocumentSnapshotCreateManyAndReturnArgs} args - Arguments to create many DocumentSnapshots.
     * @example
     * // Create many DocumentSnapshots
     * const documentSnapshot = await prisma.documentSnapshot.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DocumentSnapshots and only return the `id`
     * const documentSnapshotWithIdOnly = await prisma.documentSnapshot.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentSnapshotCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentSnapshotCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentSnapshotPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DocumentSnapshot.
     * @param {DocumentSnapshotDeleteArgs} args - Arguments to delete one DocumentSnapshot.
     * @example
     * // Delete one DocumentSnapshot
     * const DocumentSnapshot = await prisma.documentSnapshot.delete({
     *   where: {
     *     // ... filter to delete one DocumentSnapshot
     *   }
     * })
     * 
     */
    delete<T extends DocumentSnapshotDeleteArgs>(args: SelectSubset<T, DocumentSnapshotDeleteArgs<ExtArgs>>): Prisma__DocumentSnapshotClient<$Result.GetResult<Prisma.$DocumentSnapshotPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DocumentSnapshot.
     * @param {DocumentSnapshotUpdateArgs} args - Arguments to update one DocumentSnapshot.
     * @example
     * // Update one DocumentSnapshot
     * const documentSnapshot = await prisma.documentSnapshot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentSnapshotUpdateArgs>(args: SelectSubset<T, DocumentSnapshotUpdateArgs<ExtArgs>>): Prisma__DocumentSnapshotClient<$Result.GetResult<Prisma.$DocumentSnapshotPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DocumentSnapshots.
     * @param {DocumentSnapshotDeleteManyArgs} args - Arguments to filter DocumentSnapshots to delete.
     * @example
     * // Delete a few DocumentSnapshots
     * const { count } = await prisma.documentSnapshot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentSnapshotDeleteManyArgs>(args?: SelectSubset<T, DocumentSnapshotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentSnapshotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DocumentSnapshots
     * const documentSnapshot = await prisma.documentSnapshot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentSnapshotUpdateManyArgs>(args: SelectSubset<T, DocumentSnapshotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentSnapshots and returns the data updated in the database.
     * @param {DocumentSnapshotUpdateManyAndReturnArgs} args - Arguments to update many DocumentSnapshots.
     * @example
     * // Update many DocumentSnapshots
     * const documentSnapshot = await prisma.documentSnapshot.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DocumentSnapshots and only return the `id`
     * const documentSnapshotWithIdOnly = await prisma.documentSnapshot.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentSnapshotUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentSnapshotUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentSnapshotPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DocumentSnapshot.
     * @param {DocumentSnapshotUpsertArgs} args - Arguments to update or create a DocumentSnapshot.
     * @example
     * // Update or create a DocumentSnapshot
     * const documentSnapshot = await prisma.documentSnapshot.upsert({
     *   create: {
     *     // ... data to create a DocumentSnapshot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DocumentSnapshot we want to update
     *   }
     * })
     */
    upsert<T extends DocumentSnapshotUpsertArgs>(args: SelectSubset<T, DocumentSnapshotUpsertArgs<ExtArgs>>): Prisma__DocumentSnapshotClient<$Result.GetResult<Prisma.$DocumentSnapshotPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DocumentSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentSnapshotCountArgs} args - Arguments to filter DocumentSnapshots to count.
     * @example
     * // Count the number of DocumentSnapshots
     * const count = await prisma.documentSnapshot.count({
     *   where: {
     *     // ... the filter for the DocumentSnapshots we want to count
     *   }
     * })
    **/
    count<T extends DocumentSnapshotCountArgs>(
      args?: Subset<T, DocumentSnapshotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentSnapshotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DocumentSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentSnapshotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentSnapshotAggregateArgs>(args: Subset<T, DocumentSnapshotAggregateArgs>): Prisma.PrismaPromise<GetDocumentSnapshotAggregateType<T>>

    /**
     * Group by DocumentSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentSnapshotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentSnapshotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentSnapshotGroupByArgs['orderBy'] }
        : { orderBy?: DocumentSnapshotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentSnapshotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentSnapshotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DocumentSnapshot model
   */
  readonly fields: DocumentSnapshotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DocumentSnapshot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentSnapshotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    document<T extends DocumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentDefaultArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DocumentSnapshot model
   */
  interface DocumentSnapshotFieldRefs {
    readonly id: FieldRef<"DocumentSnapshot", 'String'>
    readonly content: FieldRef<"DocumentSnapshot", 'String'>
    readonly createdAt: FieldRef<"DocumentSnapshot", 'DateTime'>
    readonly documentId: FieldRef<"DocumentSnapshot", 'String'>
    readonly createdById: FieldRef<"DocumentSnapshot", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DocumentSnapshot findUnique
   */
  export type DocumentSnapshotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentSnapshot
     */
    select?: DocumentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentSnapshot
     */
    omit?: DocumentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which DocumentSnapshot to fetch.
     */
    where: DocumentSnapshotWhereUniqueInput
  }

  /**
   * DocumentSnapshot findUniqueOrThrow
   */
  export type DocumentSnapshotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentSnapshot
     */
    select?: DocumentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentSnapshot
     */
    omit?: DocumentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which DocumentSnapshot to fetch.
     */
    where: DocumentSnapshotWhereUniqueInput
  }

  /**
   * DocumentSnapshot findFirst
   */
  export type DocumentSnapshotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentSnapshot
     */
    select?: DocumentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentSnapshot
     */
    omit?: DocumentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which DocumentSnapshot to fetch.
     */
    where?: DocumentSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentSnapshots to fetch.
     */
    orderBy?: DocumentSnapshotOrderByWithRelationInput | DocumentSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentSnapshots.
     */
    cursor?: DocumentSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentSnapshots.
     */
    distinct?: DocumentSnapshotScalarFieldEnum | DocumentSnapshotScalarFieldEnum[]
  }

  /**
   * DocumentSnapshot findFirstOrThrow
   */
  export type DocumentSnapshotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentSnapshot
     */
    select?: DocumentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentSnapshot
     */
    omit?: DocumentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which DocumentSnapshot to fetch.
     */
    where?: DocumentSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentSnapshots to fetch.
     */
    orderBy?: DocumentSnapshotOrderByWithRelationInput | DocumentSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentSnapshots.
     */
    cursor?: DocumentSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentSnapshots.
     */
    distinct?: DocumentSnapshotScalarFieldEnum | DocumentSnapshotScalarFieldEnum[]
  }

  /**
   * DocumentSnapshot findMany
   */
  export type DocumentSnapshotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentSnapshot
     */
    select?: DocumentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentSnapshot
     */
    omit?: DocumentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which DocumentSnapshots to fetch.
     */
    where?: DocumentSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentSnapshots to fetch.
     */
    orderBy?: DocumentSnapshotOrderByWithRelationInput | DocumentSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DocumentSnapshots.
     */
    cursor?: DocumentSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentSnapshots.
     */
    skip?: number
    distinct?: DocumentSnapshotScalarFieldEnum | DocumentSnapshotScalarFieldEnum[]
  }

  /**
   * DocumentSnapshot create
   */
  export type DocumentSnapshotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentSnapshot
     */
    select?: DocumentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentSnapshot
     */
    omit?: DocumentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentSnapshotInclude<ExtArgs> | null
    /**
     * The data needed to create a DocumentSnapshot.
     */
    data: XOR<DocumentSnapshotCreateInput, DocumentSnapshotUncheckedCreateInput>
  }

  /**
   * DocumentSnapshot createMany
   */
  export type DocumentSnapshotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DocumentSnapshots.
     */
    data: DocumentSnapshotCreateManyInput | DocumentSnapshotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DocumentSnapshot createManyAndReturn
   */
  export type DocumentSnapshotCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentSnapshot
     */
    select?: DocumentSnapshotSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentSnapshot
     */
    omit?: DocumentSnapshotOmit<ExtArgs> | null
    /**
     * The data used to create many DocumentSnapshots.
     */
    data: DocumentSnapshotCreateManyInput | DocumentSnapshotCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentSnapshotIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentSnapshot update
   */
  export type DocumentSnapshotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentSnapshot
     */
    select?: DocumentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentSnapshot
     */
    omit?: DocumentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentSnapshotInclude<ExtArgs> | null
    /**
     * The data needed to update a DocumentSnapshot.
     */
    data: XOR<DocumentSnapshotUpdateInput, DocumentSnapshotUncheckedUpdateInput>
    /**
     * Choose, which DocumentSnapshot to update.
     */
    where: DocumentSnapshotWhereUniqueInput
  }

  /**
   * DocumentSnapshot updateMany
   */
  export type DocumentSnapshotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DocumentSnapshots.
     */
    data: XOR<DocumentSnapshotUpdateManyMutationInput, DocumentSnapshotUncheckedUpdateManyInput>
    /**
     * Filter which DocumentSnapshots to update
     */
    where?: DocumentSnapshotWhereInput
    /**
     * Limit how many DocumentSnapshots to update.
     */
    limit?: number
  }

  /**
   * DocumentSnapshot updateManyAndReturn
   */
  export type DocumentSnapshotUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentSnapshot
     */
    select?: DocumentSnapshotSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentSnapshot
     */
    omit?: DocumentSnapshotOmit<ExtArgs> | null
    /**
     * The data used to update DocumentSnapshots.
     */
    data: XOR<DocumentSnapshotUpdateManyMutationInput, DocumentSnapshotUncheckedUpdateManyInput>
    /**
     * Filter which DocumentSnapshots to update
     */
    where?: DocumentSnapshotWhereInput
    /**
     * Limit how many DocumentSnapshots to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentSnapshotIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentSnapshot upsert
   */
  export type DocumentSnapshotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentSnapshot
     */
    select?: DocumentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentSnapshot
     */
    omit?: DocumentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentSnapshotInclude<ExtArgs> | null
    /**
     * The filter to search for the DocumentSnapshot to update in case it exists.
     */
    where: DocumentSnapshotWhereUniqueInput
    /**
     * In case the DocumentSnapshot found by the `where` argument doesn't exist, create a new DocumentSnapshot with this data.
     */
    create: XOR<DocumentSnapshotCreateInput, DocumentSnapshotUncheckedCreateInput>
    /**
     * In case the DocumentSnapshot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentSnapshotUpdateInput, DocumentSnapshotUncheckedUpdateInput>
  }

  /**
   * DocumentSnapshot delete
   */
  export type DocumentSnapshotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentSnapshot
     */
    select?: DocumentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentSnapshot
     */
    omit?: DocumentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentSnapshotInclude<ExtArgs> | null
    /**
     * Filter which DocumentSnapshot to delete.
     */
    where: DocumentSnapshotWhereUniqueInput
  }

  /**
   * DocumentSnapshot deleteMany
   */
  export type DocumentSnapshotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentSnapshots to delete
     */
    where?: DocumentSnapshotWhereInput
    /**
     * Limit how many DocumentSnapshots to delete.
     */
    limit?: number
  }

  /**
   * DocumentSnapshot without action
   */
  export type DocumentSnapshotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentSnapshot
     */
    select?: DocumentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentSnapshot
     */
    omit?: DocumentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentSnapshotInclude<ExtArgs> | null
  }


  /**
   * Model DocumentLine
   */

  export type AggregateDocumentLine = {
    _count: DocumentLineCountAggregateOutputType | null
    _avg: DocumentLineAvgAggregateOutputType | null
    _sum: DocumentLineSumAggregateOutputType | null
    _min: DocumentLineMinAggregateOutputType | null
    _max: DocumentLineMaxAggregateOutputType | null
  }

  export type DocumentLineAvgAggregateOutputType = {
    lineNumber: number | null
  }

  export type DocumentLineSumAggregateOutputType = {
    lineNumber: number | null
  }

  export type DocumentLineMinAggregateOutputType = {
    id: string | null
    lineNumber: number | null
    content: string | null
    createdAt: Date | null
    documentId: string | null
  }

  export type DocumentLineMaxAggregateOutputType = {
    id: string | null
    lineNumber: number | null
    content: string | null
    createdAt: Date | null
    documentId: string | null
  }

  export type DocumentLineCountAggregateOutputType = {
    id: number
    lineNumber: number
    content: number
    createdAt: number
    documentId: number
    _all: number
  }


  export type DocumentLineAvgAggregateInputType = {
    lineNumber?: true
  }

  export type DocumentLineSumAggregateInputType = {
    lineNumber?: true
  }

  export type DocumentLineMinAggregateInputType = {
    id?: true
    lineNumber?: true
    content?: true
    createdAt?: true
    documentId?: true
  }

  export type DocumentLineMaxAggregateInputType = {
    id?: true
    lineNumber?: true
    content?: true
    createdAt?: true
    documentId?: true
  }

  export type DocumentLineCountAggregateInputType = {
    id?: true
    lineNumber?: true
    content?: true
    createdAt?: true
    documentId?: true
    _all?: true
  }

  export type DocumentLineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentLine to aggregate.
     */
    where?: DocumentLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentLines to fetch.
     */
    orderBy?: DocumentLineOrderByWithRelationInput | DocumentLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DocumentLines
    **/
    _count?: true | DocumentLineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentLineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentLineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentLineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentLineMaxAggregateInputType
  }

  export type GetDocumentLineAggregateType<T extends DocumentLineAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumentLine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumentLine[P]>
      : GetScalarType<T[P], AggregateDocumentLine[P]>
  }




  export type DocumentLineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentLineWhereInput
    orderBy?: DocumentLineOrderByWithAggregationInput | DocumentLineOrderByWithAggregationInput[]
    by: DocumentLineScalarFieldEnum[] | DocumentLineScalarFieldEnum
    having?: DocumentLineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentLineCountAggregateInputType | true
    _avg?: DocumentLineAvgAggregateInputType
    _sum?: DocumentLineSumAggregateInputType
    _min?: DocumentLineMinAggregateInputType
    _max?: DocumentLineMaxAggregateInputType
  }

  export type DocumentLineGroupByOutputType = {
    id: string
    lineNumber: number
    content: string
    createdAt: Date
    documentId: string
    _count: DocumentLineCountAggregateOutputType | null
    _avg: DocumentLineAvgAggregateOutputType | null
    _sum: DocumentLineSumAggregateOutputType | null
    _min: DocumentLineMinAggregateOutputType | null
    _max: DocumentLineMaxAggregateOutputType | null
  }

  type GetDocumentLineGroupByPayload<T extends DocumentLineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentLineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentLineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentLineGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentLineGroupByOutputType[P]>
        }
      >
    >


  export type DocumentLineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lineNumber?: boolean
    content?: boolean
    createdAt?: boolean
    documentId?: boolean
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    lineEdits?: boolean | DocumentLine$lineEditsArgs<ExtArgs>
    _count?: boolean | DocumentLineCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentLine"]>

  export type DocumentLineSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lineNumber?: boolean
    content?: boolean
    createdAt?: boolean
    documentId?: boolean
    document?: boolean | DocumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentLine"]>

  export type DocumentLineSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lineNumber?: boolean
    content?: boolean
    createdAt?: boolean
    documentId?: boolean
    document?: boolean | DocumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentLine"]>

  export type DocumentLineSelectScalar = {
    id?: boolean
    lineNumber?: boolean
    content?: boolean
    createdAt?: boolean
    documentId?: boolean
  }

  export type DocumentLineOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "lineNumber" | "content" | "createdAt" | "documentId", ExtArgs["result"]["documentLine"]>
  export type DocumentLineInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    lineEdits?: boolean | DocumentLine$lineEditsArgs<ExtArgs>
    _count?: boolean | DocumentLineCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DocumentLineIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | DocumentDefaultArgs<ExtArgs>
  }
  export type DocumentLineIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | DocumentDefaultArgs<ExtArgs>
  }

  export type $DocumentLinePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DocumentLine"
    objects: {
      document: Prisma.$DocumentPayload<ExtArgs>
      lineEdits: Prisma.$LineEditPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      lineNumber: number
      content: string
      createdAt: Date
      documentId: string
    }, ExtArgs["result"]["documentLine"]>
    composites: {}
  }

  type DocumentLineGetPayload<S extends boolean | null | undefined | DocumentLineDefaultArgs> = $Result.GetResult<Prisma.$DocumentLinePayload, S>

  type DocumentLineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentLineFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentLineCountAggregateInputType | true
    }

  export interface DocumentLineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentLine'], meta: { name: 'DocumentLine' } }
    /**
     * Find zero or one DocumentLine that matches the filter.
     * @param {DocumentLineFindUniqueArgs} args - Arguments to find a DocumentLine
     * @example
     * // Get one DocumentLine
     * const documentLine = await prisma.documentLine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentLineFindUniqueArgs>(args: SelectSubset<T, DocumentLineFindUniqueArgs<ExtArgs>>): Prisma__DocumentLineClient<$Result.GetResult<Prisma.$DocumentLinePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DocumentLine that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentLineFindUniqueOrThrowArgs} args - Arguments to find a DocumentLine
     * @example
     * // Get one DocumentLine
     * const documentLine = await prisma.documentLine.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentLineFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentLineFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentLineClient<$Result.GetResult<Prisma.$DocumentLinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentLine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentLineFindFirstArgs} args - Arguments to find a DocumentLine
     * @example
     * // Get one DocumentLine
     * const documentLine = await prisma.documentLine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentLineFindFirstArgs>(args?: SelectSubset<T, DocumentLineFindFirstArgs<ExtArgs>>): Prisma__DocumentLineClient<$Result.GetResult<Prisma.$DocumentLinePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentLine that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentLineFindFirstOrThrowArgs} args - Arguments to find a DocumentLine
     * @example
     * // Get one DocumentLine
     * const documentLine = await prisma.documentLine.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentLineFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentLineFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentLineClient<$Result.GetResult<Prisma.$DocumentLinePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DocumentLines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentLineFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DocumentLines
     * const documentLines = await prisma.documentLine.findMany()
     * 
     * // Get first 10 DocumentLines
     * const documentLines = await prisma.documentLine.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentLineWithIdOnly = await prisma.documentLine.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentLineFindManyArgs>(args?: SelectSubset<T, DocumentLineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentLinePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DocumentLine.
     * @param {DocumentLineCreateArgs} args - Arguments to create a DocumentLine.
     * @example
     * // Create one DocumentLine
     * const DocumentLine = await prisma.documentLine.create({
     *   data: {
     *     // ... data to create a DocumentLine
     *   }
     * })
     * 
     */
    create<T extends DocumentLineCreateArgs>(args: SelectSubset<T, DocumentLineCreateArgs<ExtArgs>>): Prisma__DocumentLineClient<$Result.GetResult<Prisma.$DocumentLinePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DocumentLines.
     * @param {DocumentLineCreateManyArgs} args - Arguments to create many DocumentLines.
     * @example
     * // Create many DocumentLines
     * const documentLine = await prisma.documentLine.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentLineCreateManyArgs>(args?: SelectSubset<T, DocumentLineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DocumentLines and returns the data saved in the database.
     * @param {DocumentLineCreateManyAndReturnArgs} args - Arguments to create many DocumentLines.
     * @example
     * // Create many DocumentLines
     * const documentLine = await prisma.documentLine.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DocumentLines and only return the `id`
     * const documentLineWithIdOnly = await prisma.documentLine.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentLineCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentLineCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentLinePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DocumentLine.
     * @param {DocumentLineDeleteArgs} args - Arguments to delete one DocumentLine.
     * @example
     * // Delete one DocumentLine
     * const DocumentLine = await prisma.documentLine.delete({
     *   where: {
     *     // ... filter to delete one DocumentLine
     *   }
     * })
     * 
     */
    delete<T extends DocumentLineDeleteArgs>(args: SelectSubset<T, DocumentLineDeleteArgs<ExtArgs>>): Prisma__DocumentLineClient<$Result.GetResult<Prisma.$DocumentLinePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DocumentLine.
     * @param {DocumentLineUpdateArgs} args - Arguments to update one DocumentLine.
     * @example
     * // Update one DocumentLine
     * const documentLine = await prisma.documentLine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentLineUpdateArgs>(args: SelectSubset<T, DocumentLineUpdateArgs<ExtArgs>>): Prisma__DocumentLineClient<$Result.GetResult<Prisma.$DocumentLinePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DocumentLines.
     * @param {DocumentLineDeleteManyArgs} args - Arguments to filter DocumentLines to delete.
     * @example
     * // Delete a few DocumentLines
     * const { count } = await prisma.documentLine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentLineDeleteManyArgs>(args?: SelectSubset<T, DocumentLineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentLines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentLineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DocumentLines
     * const documentLine = await prisma.documentLine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentLineUpdateManyArgs>(args: SelectSubset<T, DocumentLineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentLines and returns the data updated in the database.
     * @param {DocumentLineUpdateManyAndReturnArgs} args - Arguments to update many DocumentLines.
     * @example
     * // Update many DocumentLines
     * const documentLine = await prisma.documentLine.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DocumentLines and only return the `id`
     * const documentLineWithIdOnly = await prisma.documentLine.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentLineUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentLineUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentLinePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DocumentLine.
     * @param {DocumentLineUpsertArgs} args - Arguments to update or create a DocumentLine.
     * @example
     * // Update or create a DocumentLine
     * const documentLine = await prisma.documentLine.upsert({
     *   create: {
     *     // ... data to create a DocumentLine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DocumentLine we want to update
     *   }
     * })
     */
    upsert<T extends DocumentLineUpsertArgs>(args: SelectSubset<T, DocumentLineUpsertArgs<ExtArgs>>): Prisma__DocumentLineClient<$Result.GetResult<Prisma.$DocumentLinePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DocumentLines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentLineCountArgs} args - Arguments to filter DocumentLines to count.
     * @example
     * // Count the number of DocumentLines
     * const count = await prisma.documentLine.count({
     *   where: {
     *     // ... the filter for the DocumentLines we want to count
     *   }
     * })
    **/
    count<T extends DocumentLineCountArgs>(
      args?: Subset<T, DocumentLineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentLineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DocumentLine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentLineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentLineAggregateArgs>(args: Subset<T, DocumentLineAggregateArgs>): Prisma.PrismaPromise<GetDocumentLineAggregateType<T>>

    /**
     * Group by DocumentLine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentLineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentLineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentLineGroupByArgs['orderBy'] }
        : { orderBy?: DocumentLineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentLineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentLineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DocumentLine model
   */
  readonly fields: DocumentLineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DocumentLine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentLineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    document<T extends DocumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentDefaultArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lineEdits<T extends DocumentLine$lineEditsArgs<ExtArgs> = {}>(args?: Subset<T, DocumentLine$lineEditsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LineEditPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DocumentLine model
   */
  interface DocumentLineFieldRefs {
    readonly id: FieldRef<"DocumentLine", 'String'>
    readonly lineNumber: FieldRef<"DocumentLine", 'Int'>
    readonly content: FieldRef<"DocumentLine", 'String'>
    readonly createdAt: FieldRef<"DocumentLine", 'DateTime'>
    readonly documentId: FieldRef<"DocumentLine", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DocumentLine findUnique
   */
  export type DocumentLineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentLine
     */
    select?: DocumentLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentLine
     */
    omit?: DocumentLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentLineInclude<ExtArgs> | null
    /**
     * Filter, which DocumentLine to fetch.
     */
    where: DocumentLineWhereUniqueInput
  }

  /**
   * DocumentLine findUniqueOrThrow
   */
  export type DocumentLineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentLine
     */
    select?: DocumentLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentLine
     */
    omit?: DocumentLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentLineInclude<ExtArgs> | null
    /**
     * Filter, which DocumentLine to fetch.
     */
    where: DocumentLineWhereUniqueInput
  }

  /**
   * DocumentLine findFirst
   */
  export type DocumentLineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentLine
     */
    select?: DocumentLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentLine
     */
    omit?: DocumentLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentLineInclude<ExtArgs> | null
    /**
     * Filter, which DocumentLine to fetch.
     */
    where?: DocumentLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentLines to fetch.
     */
    orderBy?: DocumentLineOrderByWithRelationInput | DocumentLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentLines.
     */
    cursor?: DocumentLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentLines.
     */
    distinct?: DocumentLineScalarFieldEnum | DocumentLineScalarFieldEnum[]
  }

  /**
   * DocumentLine findFirstOrThrow
   */
  export type DocumentLineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentLine
     */
    select?: DocumentLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentLine
     */
    omit?: DocumentLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentLineInclude<ExtArgs> | null
    /**
     * Filter, which DocumentLine to fetch.
     */
    where?: DocumentLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentLines to fetch.
     */
    orderBy?: DocumentLineOrderByWithRelationInput | DocumentLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentLines.
     */
    cursor?: DocumentLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentLines.
     */
    distinct?: DocumentLineScalarFieldEnum | DocumentLineScalarFieldEnum[]
  }

  /**
   * DocumentLine findMany
   */
  export type DocumentLineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentLine
     */
    select?: DocumentLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentLine
     */
    omit?: DocumentLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentLineInclude<ExtArgs> | null
    /**
     * Filter, which DocumentLines to fetch.
     */
    where?: DocumentLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentLines to fetch.
     */
    orderBy?: DocumentLineOrderByWithRelationInput | DocumentLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DocumentLines.
     */
    cursor?: DocumentLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentLines.
     */
    skip?: number
    distinct?: DocumentLineScalarFieldEnum | DocumentLineScalarFieldEnum[]
  }

  /**
   * DocumentLine create
   */
  export type DocumentLineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentLine
     */
    select?: DocumentLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentLine
     */
    omit?: DocumentLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentLineInclude<ExtArgs> | null
    /**
     * The data needed to create a DocumentLine.
     */
    data: XOR<DocumentLineCreateInput, DocumentLineUncheckedCreateInput>
  }

  /**
   * DocumentLine createMany
   */
  export type DocumentLineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DocumentLines.
     */
    data: DocumentLineCreateManyInput | DocumentLineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DocumentLine createManyAndReturn
   */
  export type DocumentLineCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentLine
     */
    select?: DocumentLineSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentLine
     */
    omit?: DocumentLineOmit<ExtArgs> | null
    /**
     * The data used to create many DocumentLines.
     */
    data: DocumentLineCreateManyInput | DocumentLineCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentLineIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentLine update
   */
  export type DocumentLineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentLine
     */
    select?: DocumentLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentLine
     */
    omit?: DocumentLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentLineInclude<ExtArgs> | null
    /**
     * The data needed to update a DocumentLine.
     */
    data: XOR<DocumentLineUpdateInput, DocumentLineUncheckedUpdateInput>
    /**
     * Choose, which DocumentLine to update.
     */
    where: DocumentLineWhereUniqueInput
  }

  /**
   * DocumentLine updateMany
   */
  export type DocumentLineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DocumentLines.
     */
    data: XOR<DocumentLineUpdateManyMutationInput, DocumentLineUncheckedUpdateManyInput>
    /**
     * Filter which DocumentLines to update
     */
    where?: DocumentLineWhereInput
    /**
     * Limit how many DocumentLines to update.
     */
    limit?: number
  }

  /**
   * DocumentLine updateManyAndReturn
   */
  export type DocumentLineUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentLine
     */
    select?: DocumentLineSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentLine
     */
    omit?: DocumentLineOmit<ExtArgs> | null
    /**
     * The data used to update DocumentLines.
     */
    data: XOR<DocumentLineUpdateManyMutationInput, DocumentLineUncheckedUpdateManyInput>
    /**
     * Filter which DocumentLines to update
     */
    where?: DocumentLineWhereInput
    /**
     * Limit how many DocumentLines to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentLineIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentLine upsert
   */
  export type DocumentLineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentLine
     */
    select?: DocumentLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentLine
     */
    omit?: DocumentLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentLineInclude<ExtArgs> | null
    /**
     * The filter to search for the DocumentLine to update in case it exists.
     */
    where: DocumentLineWhereUniqueInput
    /**
     * In case the DocumentLine found by the `where` argument doesn't exist, create a new DocumentLine with this data.
     */
    create: XOR<DocumentLineCreateInput, DocumentLineUncheckedCreateInput>
    /**
     * In case the DocumentLine was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentLineUpdateInput, DocumentLineUncheckedUpdateInput>
  }

  /**
   * DocumentLine delete
   */
  export type DocumentLineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentLine
     */
    select?: DocumentLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentLine
     */
    omit?: DocumentLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentLineInclude<ExtArgs> | null
    /**
     * Filter which DocumentLine to delete.
     */
    where: DocumentLineWhereUniqueInput
  }

  /**
   * DocumentLine deleteMany
   */
  export type DocumentLineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentLines to delete
     */
    where?: DocumentLineWhereInput
    /**
     * Limit how many DocumentLines to delete.
     */
    limit?: number
  }

  /**
   * DocumentLine.lineEdits
   */
  export type DocumentLine$lineEditsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineEdit
     */
    select?: LineEditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineEdit
     */
    omit?: LineEditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineEditInclude<ExtArgs> | null
    where?: LineEditWhereInput
    orderBy?: LineEditOrderByWithRelationInput | LineEditOrderByWithRelationInput[]
    cursor?: LineEditWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LineEditScalarFieldEnum | LineEditScalarFieldEnum[]
  }

  /**
   * DocumentLine without action
   */
  export type DocumentLineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentLine
     */
    select?: DocumentLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentLine
     */
    omit?: DocumentLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentLineInclude<ExtArgs> | null
  }


  /**
   * Model LineEdit
   */

  export type AggregateLineEdit = {
    _count: LineEditCountAggregateOutputType | null
    _min: LineEditMinAggregateOutputType | null
    _max: LineEditMaxAggregateOutputType | null
  }

  export type LineEditMinAggregateOutputType = {
    id: string | null
    editedAt: Date | null
    lineId: string | null
    userId: string | null
  }

  export type LineEditMaxAggregateOutputType = {
    id: string | null
    editedAt: Date | null
    lineId: string | null
    userId: string | null
  }

  export type LineEditCountAggregateOutputType = {
    id: number
    editedAt: number
    lineId: number
    userId: number
    _all: number
  }


  export type LineEditMinAggregateInputType = {
    id?: true
    editedAt?: true
    lineId?: true
    userId?: true
  }

  export type LineEditMaxAggregateInputType = {
    id?: true
    editedAt?: true
    lineId?: true
    userId?: true
  }

  export type LineEditCountAggregateInputType = {
    id?: true
    editedAt?: true
    lineId?: true
    userId?: true
    _all?: true
  }

  export type LineEditAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LineEdit to aggregate.
     */
    where?: LineEditWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LineEdits to fetch.
     */
    orderBy?: LineEditOrderByWithRelationInput | LineEditOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LineEditWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LineEdits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LineEdits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LineEdits
    **/
    _count?: true | LineEditCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LineEditMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LineEditMaxAggregateInputType
  }

  export type GetLineEditAggregateType<T extends LineEditAggregateArgs> = {
        [P in keyof T & keyof AggregateLineEdit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLineEdit[P]>
      : GetScalarType<T[P], AggregateLineEdit[P]>
  }




  export type LineEditGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LineEditWhereInput
    orderBy?: LineEditOrderByWithAggregationInput | LineEditOrderByWithAggregationInput[]
    by: LineEditScalarFieldEnum[] | LineEditScalarFieldEnum
    having?: LineEditScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LineEditCountAggregateInputType | true
    _min?: LineEditMinAggregateInputType
    _max?: LineEditMaxAggregateInputType
  }

  export type LineEditGroupByOutputType = {
    id: string
    editedAt: Date
    lineId: string
    userId: string
    _count: LineEditCountAggregateOutputType | null
    _min: LineEditMinAggregateOutputType | null
    _max: LineEditMaxAggregateOutputType | null
  }

  type GetLineEditGroupByPayload<T extends LineEditGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LineEditGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LineEditGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LineEditGroupByOutputType[P]>
            : GetScalarType<T[P], LineEditGroupByOutputType[P]>
        }
      >
    >


  export type LineEditSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    editedAt?: boolean
    lineId?: boolean
    userId?: boolean
    line?: boolean | DocumentLineDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lineEdit"]>

  export type LineEditSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    editedAt?: boolean
    lineId?: boolean
    userId?: boolean
    line?: boolean | DocumentLineDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lineEdit"]>

  export type LineEditSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    editedAt?: boolean
    lineId?: boolean
    userId?: boolean
    line?: boolean | DocumentLineDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lineEdit"]>

  export type LineEditSelectScalar = {
    id?: boolean
    editedAt?: boolean
    lineId?: boolean
    userId?: boolean
  }

  export type LineEditOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "editedAt" | "lineId" | "userId", ExtArgs["result"]["lineEdit"]>
  export type LineEditInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    line?: boolean | DocumentLineDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LineEditIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    line?: boolean | DocumentLineDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LineEditIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    line?: boolean | DocumentLineDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LineEditPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LineEdit"
    objects: {
      line: Prisma.$DocumentLinePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      editedAt: Date
      lineId: string
      userId: string
    }, ExtArgs["result"]["lineEdit"]>
    composites: {}
  }

  type LineEditGetPayload<S extends boolean | null | undefined | LineEditDefaultArgs> = $Result.GetResult<Prisma.$LineEditPayload, S>

  type LineEditCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LineEditFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LineEditCountAggregateInputType | true
    }

  export interface LineEditDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LineEdit'], meta: { name: 'LineEdit' } }
    /**
     * Find zero or one LineEdit that matches the filter.
     * @param {LineEditFindUniqueArgs} args - Arguments to find a LineEdit
     * @example
     * // Get one LineEdit
     * const lineEdit = await prisma.lineEdit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LineEditFindUniqueArgs>(args: SelectSubset<T, LineEditFindUniqueArgs<ExtArgs>>): Prisma__LineEditClient<$Result.GetResult<Prisma.$LineEditPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LineEdit that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LineEditFindUniqueOrThrowArgs} args - Arguments to find a LineEdit
     * @example
     * // Get one LineEdit
     * const lineEdit = await prisma.lineEdit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LineEditFindUniqueOrThrowArgs>(args: SelectSubset<T, LineEditFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LineEditClient<$Result.GetResult<Prisma.$LineEditPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LineEdit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineEditFindFirstArgs} args - Arguments to find a LineEdit
     * @example
     * // Get one LineEdit
     * const lineEdit = await prisma.lineEdit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LineEditFindFirstArgs>(args?: SelectSubset<T, LineEditFindFirstArgs<ExtArgs>>): Prisma__LineEditClient<$Result.GetResult<Prisma.$LineEditPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LineEdit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineEditFindFirstOrThrowArgs} args - Arguments to find a LineEdit
     * @example
     * // Get one LineEdit
     * const lineEdit = await prisma.lineEdit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LineEditFindFirstOrThrowArgs>(args?: SelectSubset<T, LineEditFindFirstOrThrowArgs<ExtArgs>>): Prisma__LineEditClient<$Result.GetResult<Prisma.$LineEditPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LineEdits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineEditFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LineEdits
     * const lineEdits = await prisma.lineEdit.findMany()
     * 
     * // Get first 10 LineEdits
     * const lineEdits = await prisma.lineEdit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lineEditWithIdOnly = await prisma.lineEdit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LineEditFindManyArgs>(args?: SelectSubset<T, LineEditFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LineEditPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LineEdit.
     * @param {LineEditCreateArgs} args - Arguments to create a LineEdit.
     * @example
     * // Create one LineEdit
     * const LineEdit = await prisma.lineEdit.create({
     *   data: {
     *     // ... data to create a LineEdit
     *   }
     * })
     * 
     */
    create<T extends LineEditCreateArgs>(args: SelectSubset<T, LineEditCreateArgs<ExtArgs>>): Prisma__LineEditClient<$Result.GetResult<Prisma.$LineEditPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LineEdits.
     * @param {LineEditCreateManyArgs} args - Arguments to create many LineEdits.
     * @example
     * // Create many LineEdits
     * const lineEdit = await prisma.lineEdit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LineEditCreateManyArgs>(args?: SelectSubset<T, LineEditCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LineEdits and returns the data saved in the database.
     * @param {LineEditCreateManyAndReturnArgs} args - Arguments to create many LineEdits.
     * @example
     * // Create many LineEdits
     * const lineEdit = await prisma.lineEdit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LineEdits and only return the `id`
     * const lineEditWithIdOnly = await prisma.lineEdit.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LineEditCreateManyAndReturnArgs>(args?: SelectSubset<T, LineEditCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LineEditPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LineEdit.
     * @param {LineEditDeleteArgs} args - Arguments to delete one LineEdit.
     * @example
     * // Delete one LineEdit
     * const LineEdit = await prisma.lineEdit.delete({
     *   where: {
     *     // ... filter to delete one LineEdit
     *   }
     * })
     * 
     */
    delete<T extends LineEditDeleteArgs>(args: SelectSubset<T, LineEditDeleteArgs<ExtArgs>>): Prisma__LineEditClient<$Result.GetResult<Prisma.$LineEditPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LineEdit.
     * @param {LineEditUpdateArgs} args - Arguments to update one LineEdit.
     * @example
     * // Update one LineEdit
     * const lineEdit = await prisma.lineEdit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LineEditUpdateArgs>(args: SelectSubset<T, LineEditUpdateArgs<ExtArgs>>): Prisma__LineEditClient<$Result.GetResult<Prisma.$LineEditPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LineEdits.
     * @param {LineEditDeleteManyArgs} args - Arguments to filter LineEdits to delete.
     * @example
     * // Delete a few LineEdits
     * const { count } = await prisma.lineEdit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LineEditDeleteManyArgs>(args?: SelectSubset<T, LineEditDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LineEdits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineEditUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LineEdits
     * const lineEdit = await prisma.lineEdit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LineEditUpdateManyArgs>(args: SelectSubset<T, LineEditUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LineEdits and returns the data updated in the database.
     * @param {LineEditUpdateManyAndReturnArgs} args - Arguments to update many LineEdits.
     * @example
     * // Update many LineEdits
     * const lineEdit = await prisma.lineEdit.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LineEdits and only return the `id`
     * const lineEditWithIdOnly = await prisma.lineEdit.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LineEditUpdateManyAndReturnArgs>(args: SelectSubset<T, LineEditUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LineEditPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LineEdit.
     * @param {LineEditUpsertArgs} args - Arguments to update or create a LineEdit.
     * @example
     * // Update or create a LineEdit
     * const lineEdit = await prisma.lineEdit.upsert({
     *   create: {
     *     // ... data to create a LineEdit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LineEdit we want to update
     *   }
     * })
     */
    upsert<T extends LineEditUpsertArgs>(args: SelectSubset<T, LineEditUpsertArgs<ExtArgs>>): Prisma__LineEditClient<$Result.GetResult<Prisma.$LineEditPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LineEdits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineEditCountArgs} args - Arguments to filter LineEdits to count.
     * @example
     * // Count the number of LineEdits
     * const count = await prisma.lineEdit.count({
     *   where: {
     *     // ... the filter for the LineEdits we want to count
     *   }
     * })
    **/
    count<T extends LineEditCountArgs>(
      args?: Subset<T, LineEditCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LineEditCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LineEdit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineEditAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LineEditAggregateArgs>(args: Subset<T, LineEditAggregateArgs>): Prisma.PrismaPromise<GetLineEditAggregateType<T>>

    /**
     * Group by LineEdit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineEditGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LineEditGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LineEditGroupByArgs['orderBy'] }
        : { orderBy?: LineEditGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LineEditGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLineEditGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LineEdit model
   */
  readonly fields: LineEditFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LineEdit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LineEditClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    line<T extends DocumentLineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentLineDefaultArgs<ExtArgs>>): Prisma__DocumentLineClient<$Result.GetResult<Prisma.$DocumentLinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LineEdit model
   */
  interface LineEditFieldRefs {
    readonly id: FieldRef<"LineEdit", 'String'>
    readonly editedAt: FieldRef<"LineEdit", 'DateTime'>
    readonly lineId: FieldRef<"LineEdit", 'String'>
    readonly userId: FieldRef<"LineEdit", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LineEdit findUnique
   */
  export type LineEditFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineEdit
     */
    select?: LineEditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineEdit
     */
    omit?: LineEditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineEditInclude<ExtArgs> | null
    /**
     * Filter, which LineEdit to fetch.
     */
    where: LineEditWhereUniqueInput
  }

  /**
   * LineEdit findUniqueOrThrow
   */
  export type LineEditFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineEdit
     */
    select?: LineEditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineEdit
     */
    omit?: LineEditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineEditInclude<ExtArgs> | null
    /**
     * Filter, which LineEdit to fetch.
     */
    where: LineEditWhereUniqueInput
  }

  /**
   * LineEdit findFirst
   */
  export type LineEditFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineEdit
     */
    select?: LineEditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineEdit
     */
    omit?: LineEditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineEditInclude<ExtArgs> | null
    /**
     * Filter, which LineEdit to fetch.
     */
    where?: LineEditWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LineEdits to fetch.
     */
    orderBy?: LineEditOrderByWithRelationInput | LineEditOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LineEdits.
     */
    cursor?: LineEditWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LineEdits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LineEdits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LineEdits.
     */
    distinct?: LineEditScalarFieldEnum | LineEditScalarFieldEnum[]
  }

  /**
   * LineEdit findFirstOrThrow
   */
  export type LineEditFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineEdit
     */
    select?: LineEditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineEdit
     */
    omit?: LineEditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineEditInclude<ExtArgs> | null
    /**
     * Filter, which LineEdit to fetch.
     */
    where?: LineEditWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LineEdits to fetch.
     */
    orderBy?: LineEditOrderByWithRelationInput | LineEditOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LineEdits.
     */
    cursor?: LineEditWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LineEdits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LineEdits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LineEdits.
     */
    distinct?: LineEditScalarFieldEnum | LineEditScalarFieldEnum[]
  }

  /**
   * LineEdit findMany
   */
  export type LineEditFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineEdit
     */
    select?: LineEditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineEdit
     */
    omit?: LineEditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineEditInclude<ExtArgs> | null
    /**
     * Filter, which LineEdits to fetch.
     */
    where?: LineEditWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LineEdits to fetch.
     */
    orderBy?: LineEditOrderByWithRelationInput | LineEditOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LineEdits.
     */
    cursor?: LineEditWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LineEdits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LineEdits.
     */
    skip?: number
    distinct?: LineEditScalarFieldEnum | LineEditScalarFieldEnum[]
  }

  /**
   * LineEdit create
   */
  export type LineEditCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineEdit
     */
    select?: LineEditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineEdit
     */
    omit?: LineEditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineEditInclude<ExtArgs> | null
    /**
     * The data needed to create a LineEdit.
     */
    data: XOR<LineEditCreateInput, LineEditUncheckedCreateInput>
  }

  /**
   * LineEdit createMany
   */
  export type LineEditCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LineEdits.
     */
    data: LineEditCreateManyInput | LineEditCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LineEdit createManyAndReturn
   */
  export type LineEditCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineEdit
     */
    select?: LineEditSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LineEdit
     */
    omit?: LineEditOmit<ExtArgs> | null
    /**
     * The data used to create many LineEdits.
     */
    data: LineEditCreateManyInput | LineEditCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineEditIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LineEdit update
   */
  export type LineEditUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineEdit
     */
    select?: LineEditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineEdit
     */
    omit?: LineEditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineEditInclude<ExtArgs> | null
    /**
     * The data needed to update a LineEdit.
     */
    data: XOR<LineEditUpdateInput, LineEditUncheckedUpdateInput>
    /**
     * Choose, which LineEdit to update.
     */
    where: LineEditWhereUniqueInput
  }

  /**
   * LineEdit updateMany
   */
  export type LineEditUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LineEdits.
     */
    data: XOR<LineEditUpdateManyMutationInput, LineEditUncheckedUpdateManyInput>
    /**
     * Filter which LineEdits to update
     */
    where?: LineEditWhereInput
    /**
     * Limit how many LineEdits to update.
     */
    limit?: number
  }

  /**
   * LineEdit updateManyAndReturn
   */
  export type LineEditUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineEdit
     */
    select?: LineEditSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LineEdit
     */
    omit?: LineEditOmit<ExtArgs> | null
    /**
     * The data used to update LineEdits.
     */
    data: XOR<LineEditUpdateManyMutationInput, LineEditUncheckedUpdateManyInput>
    /**
     * Filter which LineEdits to update
     */
    where?: LineEditWhereInput
    /**
     * Limit how many LineEdits to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineEditIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LineEdit upsert
   */
  export type LineEditUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineEdit
     */
    select?: LineEditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineEdit
     */
    omit?: LineEditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineEditInclude<ExtArgs> | null
    /**
     * The filter to search for the LineEdit to update in case it exists.
     */
    where: LineEditWhereUniqueInput
    /**
     * In case the LineEdit found by the `where` argument doesn't exist, create a new LineEdit with this data.
     */
    create: XOR<LineEditCreateInput, LineEditUncheckedCreateInput>
    /**
     * In case the LineEdit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LineEditUpdateInput, LineEditUncheckedUpdateInput>
  }

  /**
   * LineEdit delete
   */
  export type LineEditDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineEdit
     */
    select?: LineEditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineEdit
     */
    omit?: LineEditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineEditInclude<ExtArgs> | null
    /**
     * Filter which LineEdit to delete.
     */
    where: LineEditWhereUniqueInput
  }

  /**
   * LineEdit deleteMany
   */
  export type LineEditDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LineEdits to delete
     */
    where?: LineEditWhereInput
    /**
     * Limit how many LineEdits to delete.
     */
    limit?: number
  }

  /**
   * LineEdit without action
   */
  export type LineEditDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineEdit
     */
    select?: LineEditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineEdit
     */
    omit?: LineEditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineEditInclude<ExtArgs> | null
  }


  /**
   * Model MediaUpload
   */

  export type AggregateMediaUpload = {
    _count: MediaUploadCountAggregateOutputType | null
    _avg: MediaUploadAvgAggregateOutputType | null
    _sum: MediaUploadSumAggregateOutputType | null
    _min: MediaUploadMinAggregateOutputType | null
    _max: MediaUploadMaxAggregateOutputType | null
  }

  export type MediaUploadAvgAggregateOutputType = {
    fileSize: number | null
  }

  export type MediaUploadSumAggregateOutputType = {
    fileSize: number | null
  }

  export type MediaUploadMinAggregateOutputType = {
    id: string | null
    fileName: string | null
    fileUrl: string | null
    fileType: string | null
    fileSize: number | null
    createdAt: Date | null
  }

  export type MediaUploadMaxAggregateOutputType = {
    id: string | null
    fileName: string | null
    fileUrl: string | null
    fileType: string | null
    fileSize: number | null
    createdAt: Date | null
  }

  export type MediaUploadCountAggregateOutputType = {
    id: number
    fileName: number
    fileUrl: number
    fileType: number
    fileSize: number
    createdAt: number
    _all: number
  }


  export type MediaUploadAvgAggregateInputType = {
    fileSize?: true
  }

  export type MediaUploadSumAggregateInputType = {
    fileSize?: true
  }

  export type MediaUploadMinAggregateInputType = {
    id?: true
    fileName?: true
    fileUrl?: true
    fileType?: true
    fileSize?: true
    createdAt?: true
  }

  export type MediaUploadMaxAggregateInputType = {
    id?: true
    fileName?: true
    fileUrl?: true
    fileType?: true
    fileSize?: true
    createdAt?: true
  }

  export type MediaUploadCountAggregateInputType = {
    id?: true
    fileName?: true
    fileUrl?: true
    fileType?: true
    fileSize?: true
    createdAt?: true
    _all?: true
  }

  export type MediaUploadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MediaUpload to aggregate.
     */
    where?: MediaUploadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaUploads to fetch.
     */
    orderBy?: MediaUploadOrderByWithRelationInput | MediaUploadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MediaUploadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaUploads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaUploads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MediaUploads
    **/
    _count?: true | MediaUploadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MediaUploadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MediaUploadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MediaUploadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MediaUploadMaxAggregateInputType
  }

  export type GetMediaUploadAggregateType<T extends MediaUploadAggregateArgs> = {
        [P in keyof T & keyof AggregateMediaUpload]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMediaUpload[P]>
      : GetScalarType<T[P], AggregateMediaUpload[P]>
  }




  export type MediaUploadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaUploadWhereInput
    orderBy?: MediaUploadOrderByWithAggregationInput | MediaUploadOrderByWithAggregationInput[]
    by: MediaUploadScalarFieldEnum[] | MediaUploadScalarFieldEnum
    having?: MediaUploadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MediaUploadCountAggregateInputType | true
    _avg?: MediaUploadAvgAggregateInputType
    _sum?: MediaUploadSumAggregateInputType
    _min?: MediaUploadMinAggregateInputType
    _max?: MediaUploadMaxAggregateInputType
  }

  export type MediaUploadGroupByOutputType = {
    id: string
    fileName: string
    fileUrl: string
    fileType: string
    fileSize: number
    createdAt: Date
    _count: MediaUploadCountAggregateOutputType | null
    _avg: MediaUploadAvgAggregateOutputType | null
    _sum: MediaUploadSumAggregateOutputType | null
    _min: MediaUploadMinAggregateOutputType | null
    _max: MediaUploadMaxAggregateOutputType | null
  }

  type GetMediaUploadGroupByPayload<T extends MediaUploadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MediaUploadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MediaUploadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MediaUploadGroupByOutputType[P]>
            : GetScalarType<T[P], MediaUploadGroupByOutputType[P]>
        }
      >
    >


  export type MediaUploadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileName?: boolean
    fileUrl?: boolean
    fileType?: boolean
    fileSize?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["mediaUpload"]>

  export type MediaUploadSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileName?: boolean
    fileUrl?: boolean
    fileType?: boolean
    fileSize?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["mediaUpload"]>

  export type MediaUploadSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileName?: boolean
    fileUrl?: boolean
    fileType?: boolean
    fileSize?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["mediaUpload"]>

  export type MediaUploadSelectScalar = {
    id?: boolean
    fileName?: boolean
    fileUrl?: boolean
    fileType?: boolean
    fileSize?: boolean
    createdAt?: boolean
  }

  export type MediaUploadOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fileName" | "fileUrl" | "fileType" | "fileSize" | "createdAt", ExtArgs["result"]["mediaUpload"]>

  export type $MediaUploadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MediaUpload"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fileName: string
      fileUrl: string
      fileType: string
      fileSize: number
      createdAt: Date
    }, ExtArgs["result"]["mediaUpload"]>
    composites: {}
  }

  type MediaUploadGetPayload<S extends boolean | null | undefined | MediaUploadDefaultArgs> = $Result.GetResult<Prisma.$MediaUploadPayload, S>

  type MediaUploadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MediaUploadFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MediaUploadCountAggregateInputType | true
    }

  export interface MediaUploadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MediaUpload'], meta: { name: 'MediaUpload' } }
    /**
     * Find zero or one MediaUpload that matches the filter.
     * @param {MediaUploadFindUniqueArgs} args - Arguments to find a MediaUpload
     * @example
     * // Get one MediaUpload
     * const mediaUpload = await prisma.mediaUpload.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MediaUploadFindUniqueArgs>(args: SelectSubset<T, MediaUploadFindUniqueArgs<ExtArgs>>): Prisma__MediaUploadClient<$Result.GetResult<Prisma.$MediaUploadPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MediaUpload that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MediaUploadFindUniqueOrThrowArgs} args - Arguments to find a MediaUpload
     * @example
     * // Get one MediaUpload
     * const mediaUpload = await prisma.mediaUpload.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MediaUploadFindUniqueOrThrowArgs>(args: SelectSubset<T, MediaUploadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MediaUploadClient<$Result.GetResult<Prisma.$MediaUploadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MediaUpload that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaUploadFindFirstArgs} args - Arguments to find a MediaUpload
     * @example
     * // Get one MediaUpload
     * const mediaUpload = await prisma.mediaUpload.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MediaUploadFindFirstArgs>(args?: SelectSubset<T, MediaUploadFindFirstArgs<ExtArgs>>): Prisma__MediaUploadClient<$Result.GetResult<Prisma.$MediaUploadPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MediaUpload that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaUploadFindFirstOrThrowArgs} args - Arguments to find a MediaUpload
     * @example
     * // Get one MediaUpload
     * const mediaUpload = await prisma.mediaUpload.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MediaUploadFindFirstOrThrowArgs>(args?: SelectSubset<T, MediaUploadFindFirstOrThrowArgs<ExtArgs>>): Prisma__MediaUploadClient<$Result.GetResult<Prisma.$MediaUploadPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MediaUploads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaUploadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MediaUploads
     * const mediaUploads = await prisma.mediaUpload.findMany()
     * 
     * // Get first 10 MediaUploads
     * const mediaUploads = await prisma.mediaUpload.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mediaUploadWithIdOnly = await prisma.mediaUpload.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MediaUploadFindManyArgs>(args?: SelectSubset<T, MediaUploadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaUploadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MediaUpload.
     * @param {MediaUploadCreateArgs} args - Arguments to create a MediaUpload.
     * @example
     * // Create one MediaUpload
     * const MediaUpload = await prisma.mediaUpload.create({
     *   data: {
     *     // ... data to create a MediaUpload
     *   }
     * })
     * 
     */
    create<T extends MediaUploadCreateArgs>(args: SelectSubset<T, MediaUploadCreateArgs<ExtArgs>>): Prisma__MediaUploadClient<$Result.GetResult<Prisma.$MediaUploadPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MediaUploads.
     * @param {MediaUploadCreateManyArgs} args - Arguments to create many MediaUploads.
     * @example
     * // Create many MediaUploads
     * const mediaUpload = await prisma.mediaUpload.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MediaUploadCreateManyArgs>(args?: SelectSubset<T, MediaUploadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MediaUploads and returns the data saved in the database.
     * @param {MediaUploadCreateManyAndReturnArgs} args - Arguments to create many MediaUploads.
     * @example
     * // Create many MediaUploads
     * const mediaUpload = await prisma.mediaUpload.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MediaUploads and only return the `id`
     * const mediaUploadWithIdOnly = await prisma.mediaUpload.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MediaUploadCreateManyAndReturnArgs>(args?: SelectSubset<T, MediaUploadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaUploadPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MediaUpload.
     * @param {MediaUploadDeleteArgs} args - Arguments to delete one MediaUpload.
     * @example
     * // Delete one MediaUpload
     * const MediaUpload = await prisma.mediaUpload.delete({
     *   where: {
     *     // ... filter to delete one MediaUpload
     *   }
     * })
     * 
     */
    delete<T extends MediaUploadDeleteArgs>(args: SelectSubset<T, MediaUploadDeleteArgs<ExtArgs>>): Prisma__MediaUploadClient<$Result.GetResult<Prisma.$MediaUploadPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MediaUpload.
     * @param {MediaUploadUpdateArgs} args - Arguments to update one MediaUpload.
     * @example
     * // Update one MediaUpload
     * const mediaUpload = await prisma.mediaUpload.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MediaUploadUpdateArgs>(args: SelectSubset<T, MediaUploadUpdateArgs<ExtArgs>>): Prisma__MediaUploadClient<$Result.GetResult<Prisma.$MediaUploadPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MediaUploads.
     * @param {MediaUploadDeleteManyArgs} args - Arguments to filter MediaUploads to delete.
     * @example
     * // Delete a few MediaUploads
     * const { count } = await prisma.mediaUpload.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MediaUploadDeleteManyArgs>(args?: SelectSubset<T, MediaUploadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MediaUploads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaUploadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MediaUploads
     * const mediaUpload = await prisma.mediaUpload.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MediaUploadUpdateManyArgs>(args: SelectSubset<T, MediaUploadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MediaUploads and returns the data updated in the database.
     * @param {MediaUploadUpdateManyAndReturnArgs} args - Arguments to update many MediaUploads.
     * @example
     * // Update many MediaUploads
     * const mediaUpload = await prisma.mediaUpload.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MediaUploads and only return the `id`
     * const mediaUploadWithIdOnly = await prisma.mediaUpload.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MediaUploadUpdateManyAndReturnArgs>(args: SelectSubset<T, MediaUploadUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaUploadPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MediaUpload.
     * @param {MediaUploadUpsertArgs} args - Arguments to update or create a MediaUpload.
     * @example
     * // Update or create a MediaUpload
     * const mediaUpload = await prisma.mediaUpload.upsert({
     *   create: {
     *     // ... data to create a MediaUpload
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MediaUpload we want to update
     *   }
     * })
     */
    upsert<T extends MediaUploadUpsertArgs>(args: SelectSubset<T, MediaUploadUpsertArgs<ExtArgs>>): Prisma__MediaUploadClient<$Result.GetResult<Prisma.$MediaUploadPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MediaUploads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaUploadCountArgs} args - Arguments to filter MediaUploads to count.
     * @example
     * // Count the number of MediaUploads
     * const count = await prisma.mediaUpload.count({
     *   where: {
     *     // ... the filter for the MediaUploads we want to count
     *   }
     * })
    **/
    count<T extends MediaUploadCountArgs>(
      args?: Subset<T, MediaUploadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MediaUploadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MediaUpload.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaUploadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MediaUploadAggregateArgs>(args: Subset<T, MediaUploadAggregateArgs>): Prisma.PrismaPromise<GetMediaUploadAggregateType<T>>

    /**
     * Group by MediaUpload.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaUploadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MediaUploadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MediaUploadGroupByArgs['orderBy'] }
        : { orderBy?: MediaUploadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MediaUploadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMediaUploadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MediaUpload model
   */
  readonly fields: MediaUploadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MediaUpload.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MediaUploadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MediaUpload model
   */
  interface MediaUploadFieldRefs {
    readonly id: FieldRef<"MediaUpload", 'String'>
    readonly fileName: FieldRef<"MediaUpload", 'String'>
    readonly fileUrl: FieldRef<"MediaUpload", 'String'>
    readonly fileType: FieldRef<"MediaUpload", 'String'>
    readonly fileSize: FieldRef<"MediaUpload", 'Int'>
    readonly createdAt: FieldRef<"MediaUpload", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MediaUpload findUnique
   */
  export type MediaUploadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaUpload
     */
    select?: MediaUploadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaUpload
     */
    omit?: MediaUploadOmit<ExtArgs> | null
    /**
     * Filter, which MediaUpload to fetch.
     */
    where: MediaUploadWhereUniqueInput
  }

  /**
   * MediaUpload findUniqueOrThrow
   */
  export type MediaUploadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaUpload
     */
    select?: MediaUploadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaUpload
     */
    omit?: MediaUploadOmit<ExtArgs> | null
    /**
     * Filter, which MediaUpload to fetch.
     */
    where: MediaUploadWhereUniqueInput
  }

  /**
   * MediaUpload findFirst
   */
  export type MediaUploadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaUpload
     */
    select?: MediaUploadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaUpload
     */
    omit?: MediaUploadOmit<ExtArgs> | null
    /**
     * Filter, which MediaUpload to fetch.
     */
    where?: MediaUploadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaUploads to fetch.
     */
    orderBy?: MediaUploadOrderByWithRelationInput | MediaUploadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MediaUploads.
     */
    cursor?: MediaUploadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaUploads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaUploads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MediaUploads.
     */
    distinct?: MediaUploadScalarFieldEnum | MediaUploadScalarFieldEnum[]
  }

  /**
   * MediaUpload findFirstOrThrow
   */
  export type MediaUploadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaUpload
     */
    select?: MediaUploadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaUpload
     */
    omit?: MediaUploadOmit<ExtArgs> | null
    /**
     * Filter, which MediaUpload to fetch.
     */
    where?: MediaUploadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaUploads to fetch.
     */
    orderBy?: MediaUploadOrderByWithRelationInput | MediaUploadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MediaUploads.
     */
    cursor?: MediaUploadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaUploads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaUploads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MediaUploads.
     */
    distinct?: MediaUploadScalarFieldEnum | MediaUploadScalarFieldEnum[]
  }

  /**
   * MediaUpload findMany
   */
  export type MediaUploadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaUpload
     */
    select?: MediaUploadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaUpload
     */
    omit?: MediaUploadOmit<ExtArgs> | null
    /**
     * Filter, which MediaUploads to fetch.
     */
    where?: MediaUploadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaUploads to fetch.
     */
    orderBy?: MediaUploadOrderByWithRelationInput | MediaUploadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MediaUploads.
     */
    cursor?: MediaUploadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaUploads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaUploads.
     */
    skip?: number
    distinct?: MediaUploadScalarFieldEnum | MediaUploadScalarFieldEnum[]
  }

  /**
   * MediaUpload create
   */
  export type MediaUploadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaUpload
     */
    select?: MediaUploadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaUpload
     */
    omit?: MediaUploadOmit<ExtArgs> | null
    /**
     * The data needed to create a MediaUpload.
     */
    data: XOR<MediaUploadCreateInput, MediaUploadUncheckedCreateInput>
  }

  /**
   * MediaUpload createMany
   */
  export type MediaUploadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MediaUploads.
     */
    data: MediaUploadCreateManyInput | MediaUploadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MediaUpload createManyAndReturn
   */
  export type MediaUploadCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaUpload
     */
    select?: MediaUploadSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MediaUpload
     */
    omit?: MediaUploadOmit<ExtArgs> | null
    /**
     * The data used to create many MediaUploads.
     */
    data: MediaUploadCreateManyInput | MediaUploadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MediaUpload update
   */
  export type MediaUploadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaUpload
     */
    select?: MediaUploadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaUpload
     */
    omit?: MediaUploadOmit<ExtArgs> | null
    /**
     * The data needed to update a MediaUpload.
     */
    data: XOR<MediaUploadUpdateInput, MediaUploadUncheckedUpdateInput>
    /**
     * Choose, which MediaUpload to update.
     */
    where: MediaUploadWhereUniqueInput
  }

  /**
   * MediaUpload updateMany
   */
  export type MediaUploadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MediaUploads.
     */
    data: XOR<MediaUploadUpdateManyMutationInput, MediaUploadUncheckedUpdateManyInput>
    /**
     * Filter which MediaUploads to update
     */
    where?: MediaUploadWhereInput
    /**
     * Limit how many MediaUploads to update.
     */
    limit?: number
  }

  /**
   * MediaUpload updateManyAndReturn
   */
  export type MediaUploadUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaUpload
     */
    select?: MediaUploadSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MediaUpload
     */
    omit?: MediaUploadOmit<ExtArgs> | null
    /**
     * The data used to update MediaUploads.
     */
    data: XOR<MediaUploadUpdateManyMutationInput, MediaUploadUncheckedUpdateManyInput>
    /**
     * Filter which MediaUploads to update
     */
    where?: MediaUploadWhereInput
    /**
     * Limit how many MediaUploads to update.
     */
    limit?: number
  }

  /**
   * MediaUpload upsert
   */
  export type MediaUploadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaUpload
     */
    select?: MediaUploadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaUpload
     */
    omit?: MediaUploadOmit<ExtArgs> | null
    /**
     * The filter to search for the MediaUpload to update in case it exists.
     */
    where: MediaUploadWhereUniqueInput
    /**
     * In case the MediaUpload found by the `where` argument doesn't exist, create a new MediaUpload with this data.
     */
    create: XOR<MediaUploadCreateInput, MediaUploadUncheckedCreateInput>
    /**
     * In case the MediaUpload was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MediaUploadUpdateInput, MediaUploadUncheckedUpdateInput>
  }

  /**
   * MediaUpload delete
   */
  export type MediaUploadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaUpload
     */
    select?: MediaUploadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaUpload
     */
    omit?: MediaUploadOmit<ExtArgs> | null
    /**
     * Filter which MediaUpload to delete.
     */
    where: MediaUploadWhereUniqueInput
  }

  /**
   * MediaUpload deleteMany
   */
  export type MediaUploadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MediaUploads to delete
     */
    where?: MediaUploadWhereInput
    /**
     * Limit how many MediaUploads to delete.
     */
    limit?: number
  }

  /**
   * MediaUpload without action
   */
  export type MediaUploadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaUpload
     */
    select?: MediaUploadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaUpload
     */
    omit?: MediaUploadOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    avatarUrl: 'avatarUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    isPublic: 'isPublic',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ownerId: 'ownerId'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const DocumentAccessScalarFieldEnum: {
    id: 'id',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    documentId: 'documentId',
    userId: 'userId'
  };

  export type DocumentAccessScalarFieldEnum = (typeof DocumentAccessScalarFieldEnum)[keyof typeof DocumentAccessScalarFieldEnum]


  export const OperationScalarFieldEnum: {
    id: 'id',
    type: 'type',
    position: 'position',
    length: 'length',
    content: 'content',
    createdAt: 'createdAt',
    documentId: 'documentId',
    userId: 'userId'
  };

  export type OperationScalarFieldEnum = (typeof OperationScalarFieldEnum)[keyof typeof OperationScalarFieldEnum]


  export const UserCursorScalarFieldEnum: {
    id: 'id',
    cursorPos: 'cursorPos',
    selectionStart: 'selectionStart',
    selectionEnd: 'selectionEnd',
    color: 'color',
    lastActive: 'lastActive',
    documentId: 'documentId',
    userId: 'userId'
  };

  export type UserCursorScalarFieldEnum = (typeof UserCursorScalarFieldEnum)[keyof typeof UserCursorScalarFieldEnum]


  export const UserPresenceScalarFieldEnum: {
    id: 'id',
    status: 'status',
    lastActive: 'lastActive',
    userId: 'userId'
  };

  export type UserPresenceScalarFieldEnum = (typeof UserPresenceScalarFieldEnum)[keyof typeof UserPresenceScalarFieldEnum]


  export const DocumentSnapshotScalarFieldEnum: {
    id: 'id',
    content: 'content',
    createdAt: 'createdAt',
    documentId: 'documentId',
    createdById: 'createdById'
  };

  export type DocumentSnapshotScalarFieldEnum = (typeof DocumentSnapshotScalarFieldEnum)[keyof typeof DocumentSnapshotScalarFieldEnum]


  export const DocumentLineScalarFieldEnum: {
    id: 'id',
    lineNumber: 'lineNumber',
    content: 'content',
    createdAt: 'createdAt',
    documentId: 'documentId'
  };

  export type DocumentLineScalarFieldEnum = (typeof DocumentLineScalarFieldEnum)[keyof typeof DocumentLineScalarFieldEnum]


  export const LineEditScalarFieldEnum: {
    id: 'id',
    editedAt: 'editedAt',
    lineId: 'lineId',
    userId: 'userId'
  };

  export type LineEditScalarFieldEnum = (typeof LineEditScalarFieldEnum)[keyof typeof LineEditScalarFieldEnum]


  export const MediaUploadScalarFieldEnum: {
    id: 'id',
    fileName: 'fileName',
    fileUrl: 'fileUrl',
    fileType: 'fileType',
    fileSize: 'fileSize',
    createdAt: 'createdAt'
  };

  export type MediaUploadScalarFieldEnum = (typeof MediaUploadScalarFieldEnum)[keyof typeof MediaUploadScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'OpType'
   */
  export type EnumOpTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OpType'>
    


  /**
   * Reference to a field of type 'OpType[]'
   */
  export type ListEnumOpTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OpType[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'PresenceStatus'
   */
  export type EnumPresenceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PresenceStatus'>
    


  /**
   * Reference to a field of type 'PresenceStatus[]'
   */
  export type ListEnumPresenceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PresenceStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    ownedDocuments?: DocumentListRelationFilter
    documentAccess?: DocumentAccessListRelationFilter
    operations?: OperationListRelationFilter
    cursors?: UserCursorListRelationFilter
    presence?: XOR<UserPresenceNullableScalarRelationFilter, UserPresenceWhereInput> | null
    documentSnapshots?: DocumentSnapshotListRelationFilter
    lineEdits?: LineEditListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownedDocuments?: DocumentOrderByRelationAggregateInput
    documentAccess?: DocumentAccessOrderByRelationAggregateInput
    operations?: OperationOrderByRelationAggregateInput
    cursors?: UserCursorOrderByRelationAggregateInput
    presence?: UserPresenceOrderByWithRelationInput
    documentSnapshots?: DocumentSnapshotOrderByRelationAggregateInput
    lineEdits?: LineEditOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    ownedDocuments?: DocumentListRelationFilter
    documentAccess?: DocumentAccessListRelationFilter
    operations?: OperationListRelationFilter
    cursors?: UserCursorListRelationFilter
    presence?: XOR<UserPresenceNullableScalarRelationFilter, UserPresenceWhereInput> | null
    documentSnapshots?: DocumentSnapshotListRelationFilter
    lineEdits?: LineEditListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatarUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    id?: StringFilter<"Document"> | string
    title?: StringFilter<"Document"> | string
    content?: StringNullableFilter<"Document"> | string | null
    isPublic?: BoolFilter<"Document"> | boolean
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    ownerId?: StringFilter<"Document"> | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    documentAccess?: DocumentAccessListRelationFilter
    operations?: OperationListRelationFilter
    cursors?: UserCursorListRelationFilter
    snapshots?: DocumentSnapshotListRelationFilter
    lines?: DocumentLineListRelationFilter
  }

  export type DocumentOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
    owner?: UserOrderByWithRelationInput
    documentAccess?: DocumentAccessOrderByRelationAggregateInput
    operations?: OperationOrderByRelationAggregateInput
    cursors?: UserCursorOrderByRelationAggregateInput
    snapshots?: DocumentSnapshotOrderByRelationAggregateInput
    lines?: DocumentLineOrderByRelationAggregateInput
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    title?: StringFilter<"Document"> | string
    content?: StringNullableFilter<"Document"> | string | null
    isPublic?: BoolFilter<"Document"> | boolean
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    ownerId?: StringFilter<"Document"> | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    documentAccess?: DocumentAccessListRelationFilter
    operations?: OperationListRelationFilter
    cursors?: UserCursorListRelationFilter
    snapshots?: DocumentSnapshotListRelationFilter
    lines?: DocumentLineListRelationFilter
  }, "id">

  export type DocumentOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Document"> | string
    title?: StringWithAggregatesFilter<"Document"> | string
    content?: StringNullableWithAggregatesFilter<"Document"> | string | null
    isPublic?: BoolWithAggregatesFilter<"Document"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    ownerId?: StringWithAggregatesFilter<"Document"> | string
  }

  export type DocumentAccessWhereInput = {
    AND?: DocumentAccessWhereInput | DocumentAccessWhereInput[]
    OR?: DocumentAccessWhereInput[]
    NOT?: DocumentAccessWhereInput | DocumentAccessWhereInput[]
    id?: StringFilter<"DocumentAccess"> | string
    role?: EnumRoleFilter<"DocumentAccess"> | $Enums.Role
    createdAt?: DateTimeFilter<"DocumentAccess"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentAccess"> | Date | string
    documentId?: StringFilter<"DocumentAccess"> | string
    userId?: StringFilter<"DocumentAccess"> | string
    document?: XOR<DocumentScalarRelationFilter, DocumentWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DocumentAccessOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    documentId?: SortOrder
    userId?: SortOrder
    document?: DocumentOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type DocumentAccessWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    documentId_userId?: DocumentAccessDocumentIdUserIdCompoundUniqueInput
    AND?: DocumentAccessWhereInput | DocumentAccessWhereInput[]
    OR?: DocumentAccessWhereInput[]
    NOT?: DocumentAccessWhereInput | DocumentAccessWhereInput[]
    role?: EnumRoleFilter<"DocumentAccess"> | $Enums.Role
    createdAt?: DateTimeFilter<"DocumentAccess"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentAccess"> | Date | string
    documentId?: StringFilter<"DocumentAccess"> | string
    userId?: StringFilter<"DocumentAccess"> | string
    document?: XOR<DocumentScalarRelationFilter, DocumentWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "documentId_userId">

  export type DocumentAccessOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    documentId?: SortOrder
    userId?: SortOrder
    _count?: DocumentAccessCountOrderByAggregateInput
    _max?: DocumentAccessMaxOrderByAggregateInput
    _min?: DocumentAccessMinOrderByAggregateInput
  }

  export type DocumentAccessScalarWhereWithAggregatesInput = {
    AND?: DocumentAccessScalarWhereWithAggregatesInput | DocumentAccessScalarWhereWithAggregatesInput[]
    OR?: DocumentAccessScalarWhereWithAggregatesInput[]
    NOT?: DocumentAccessScalarWhereWithAggregatesInput | DocumentAccessScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DocumentAccess"> | string
    role?: EnumRoleWithAggregatesFilter<"DocumentAccess"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"DocumentAccess"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DocumentAccess"> | Date | string
    documentId?: StringWithAggregatesFilter<"DocumentAccess"> | string
    userId?: StringWithAggregatesFilter<"DocumentAccess"> | string
  }

  export type OperationWhereInput = {
    AND?: OperationWhereInput | OperationWhereInput[]
    OR?: OperationWhereInput[]
    NOT?: OperationWhereInput | OperationWhereInput[]
    id?: StringFilter<"Operation"> | string
    type?: EnumOpTypeFilter<"Operation"> | $Enums.OpType
    position?: IntFilter<"Operation"> | number
    length?: IntNullableFilter<"Operation"> | number | null
    content?: StringNullableFilter<"Operation"> | string | null
    createdAt?: DateTimeFilter<"Operation"> | Date | string
    documentId?: StringFilter<"Operation"> | string
    userId?: StringFilter<"Operation"> | string
    document?: XOR<DocumentScalarRelationFilter, DocumentWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type OperationOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    position?: SortOrder
    length?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    documentId?: SortOrder
    userId?: SortOrder
    document?: DocumentOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type OperationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OperationWhereInput | OperationWhereInput[]
    OR?: OperationWhereInput[]
    NOT?: OperationWhereInput | OperationWhereInput[]
    type?: EnumOpTypeFilter<"Operation"> | $Enums.OpType
    position?: IntFilter<"Operation"> | number
    length?: IntNullableFilter<"Operation"> | number | null
    content?: StringNullableFilter<"Operation"> | string | null
    createdAt?: DateTimeFilter<"Operation"> | Date | string
    documentId?: StringFilter<"Operation"> | string
    userId?: StringFilter<"Operation"> | string
    document?: XOR<DocumentScalarRelationFilter, DocumentWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type OperationOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    position?: SortOrder
    length?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    documentId?: SortOrder
    userId?: SortOrder
    _count?: OperationCountOrderByAggregateInput
    _avg?: OperationAvgOrderByAggregateInput
    _max?: OperationMaxOrderByAggregateInput
    _min?: OperationMinOrderByAggregateInput
    _sum?: OperationSumOrderByAggregateInput
  }

  export type OperationScalarWhereWithAggregatesInput = {
    AND?: OperationScalarWhereWithAggregatesInput | OperationScalarWhereWithAggregatesInput[]
    OR?: OperationScalarWhereWithAggregatesInput[]
    NOT?: OperationScalarWhereWithAggregatesInput | OperationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Operation"> | string
    type?: EnumOpTypeWithAggregatesFilter<"Operation"> | $Enums.OpType
    position?: IntWithAggregatesFilter<"Operation"> | number
    length?: IntNullableWithAggregatesFilter<"Operation"> | number | null
    content?: StringNullableWithAggregatesFilter<"Operation"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Operation"> | Date | string
    documentId?: StringWithAggregatesFilter<"Operation"> | string
    userId?: StringWithAggregatesFilter<"Operation"> | string
  }

  export type UserCursorWhereInput = {
    AND?: UserCursorWhereInput | UserCursorWhereInput[]
    OR?: UserCursorWhereInput[]
    NOT?: UserCursorWhereInput | UserCursorWhereInput[]
    id?: StringFilter<"UserCursor"> | string
    cursorPos?: IntFilter<"UserCursor"> | number
    selectionStart?: IntNullableFilter<"UserCursor"> | number | null
    selectionEnd?: IntNullableFilter<"UserCursor"> | number | null
    color?: StringFilter<"UserCursor"> | string
    lastActive?: DateTimeFilter<"UserCursor"> | Date | string
    documentId?: StringFilter<"UserCursor"> | string
    userId?: StringFilter<"UserCursor"> | string
    document?: XOR<DocumentScalarRelationFilter, DocumentWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserCursorOrderByWithRelationInput = {
    id?: SortOrder
    cursorPos?: SortOrder
    selectionStart?: SortOrderInput | SortOrder
    selectionEnd?: SortOrderInput | SortOrder
    color?: SortOrder
    lastActive?: SortOrder
    documentId?: SortOrder
    userId?: SortOrder
    document?: DocumentOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type UserCursorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    documentId_userId?: UserCursorDocumentIdUserIdCompoundUniqueInput
    AND?: UserCursorWhereInput | UserCursorWhereInput[]
    OR?: UserCursorWhereInput[]
    NOT?: UserCursorWhereInput | UserCursorWhereInput[]
    cursorPos?: IntFilter<"UserCursor"> | number
    selectionStart?: IntNullableFilter<"UserCursor"> | number | null
    selectionEnd?: IntNullableFilter<"UserCursor"> | number | null
    color?: StringFilter<"UserCursor"> | string
    lastActive?: DateTimeFilter<"UserCursor"> | Date | string
    documentId?: StringFilter<"UserCursor"> | string
    userId?: StringFilter<"UserCursor"> | string
    document?: XOR<DocumentScalarRelationFilter, DocumentWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "documentId_userId">

  export type UserCursorOrderByWithAggregationInput = {
    id?: SortOrder
    cursorPos?: SortOrder
    selectionStart?: SortOrderInput | SortOrder
    selectionEnd?: SortOrderInput | SortOrder
    color?: SortOrder
    lastActive?: SortOrder
    documentId?: SortOrder
    userId?: SortOrder
    _count?: UserCursorCountOrderByAggregateInput
    _avg?: UserCursorAvgOrderByAggregateInput
    _max?: UserCursorMaxOrderByAggregateInput
    _min?: UserCursorMinOrderByAggregateInput
    _sum?: UserCursorSumOrderByAggregateInput
  }

  export type UserCursorScalarWhereWithAggregatesInput = {
    AND?: UserCursorScalarWhereWithAggregatesInput | UserCursorScalarWhereWithAggregatesInput[]
    OR?: UserCursorScalarWhereWithAggregatesInput[]
    NOT?: UserCursorScalarWhereWithAggregatesInput | UserCursorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserCursor"> | string
    cursorPos?: IntWithAggregatesFilter<"UserCursor"> | number
    selectionStart?: IntNullableWithAggregatesFilter<"UserCursor"> | number | null
    selectionEnd?: IntNullableWithAggregatesFilter<"UserCursor"> | number | null
    color?: StringWithAggregatesFilter<"UserCursor"> | string
    lastActive?: DateTimeWithAggregatesFilter<"UserCursor"> | Date | string
    documentId?: StringWithAggregatesFilter<"UserCursor"> | string
    userId?: StringWithAggregatesFilter<"UserCursor"> | string
  }

  export type UserPresenceWhereInput = {
    AND?: UserPresenceWhereInput | UserPresenceWhereInput[]
    OR?: UserPresenceWhereInput[]
    NOT?: UserPresenceWhereInput | UserPresenceWhereInput[]
    id?: StringFilter<"UserPresence"> | string
    status?: EnumPresenceStatusFilter<"UserPresence"> | $Enums.PresenceStatus
    lastActive?: DateTimeFilter<"UserPresence"> | Date | string
    userId?: StringFilter<"UserPresence"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserPresenceOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    lastActive?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserPresenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: UserPresenceWhereInput | UserPresenceWhereInput[]
    OR?: UserPresenceWhereInput[]
    NOT?: UserPresenceWhereInput | UserPresenceWhereInput[]
    status?: EnumPresenceStatusFilter<"UserPresence"> | $Enums.PresenceStatus
    lastActive?: DateTimeFilter<"UserPresence"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type UserPresenceOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    lastActive?: SortOrder
    userId?: SortOrder
    _count?: UserPresenceCountOrderByAggregateInput
    _max?: UserPresenceMaxOrderByAggregateInput
    _min?: UserPresenceMinOrderByAggregateInput
  }

  export type UserPresenceScalarWhereWithAggregatesInput = {
    AND?: UserPresenceScalarWhereWithAggregatesInput | UserPresenceScalarWhereWithAggregatesInput[]
    OR?: UserPresenceScalarWhereWithAggregatesInput[]
    NOT?: UserPresenceScalarWhereWithAggregatesInput | UserPresenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserPresence"> | string
    status?: EnumPresenceStatusWithAggregatesFilter<"UserPresence"> | $Enums.PresenceStatus
    lastActive?: DateTimeWithAggregatesFilter<"UserPresence"> | Date | string
    userId?: StringWithAggregatesFilter<"UserPresence"> | string
  }

  export type DocumentSnapshotWhereInput = {
    AND?: DocumentSnapshotWhereInput | DocumentSnapshotWhereInput[]
    OR?: DocumentSnapshotWhereInput[]
    NOT?: DocumentSnapshotWhereInput | DocumentSnapshotWhereInput[]
    id?: StringFilter<"DocumentSnapshot"> | string
    content?: StringFilter<"DocumentSnapshot"> | string
    createdAt?: DateTimeFilter<"DocumentSnapshot"> | Date | string
    documentId?: StringFilter<"DocumentSnapshot"> | string
    createdById?: StringFilter<"DocumentSnapshot"> | string
    document?: XOR<DocumentScalarRelationFilter, DocumentWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DocumentSnapshotOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    documentId?: SortOrder
    createdById?: SortOrder
    document?: DocumentOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
  }

  export type DocumentSnapshotWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentSnapshotWhereInput | DocumentSnapshotWhereInput[]
    OR?: DocumentSnapshotWhereInput[]
    NOT?: DocumentSnapshotWhereInput | DocumentSnapshotWhereInput[]
    content?: StringFilter<"DocumentSnapshot"> | string
    createdAt?: DateTimeFilter<"DocumentSnapshot"> | Date | string
    documentId?: StringFilter<"DocumentSnapshot"> | string
    createdById?: StringFilter<"DocumentSnapshot"> | string
    document?: XOR<DocumentScalarRelationFilter, DocumentWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type DocumentSnapshotOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    documentId?: SortOrder
    createdById?: SortOrder
    _count?: DocumentSnapshotCountOrderByAggregateInput
    _max?: DocumentSnapshotMaxOrderByAggregateInput
    _min?: DocumentSnapshotMinOrderByAggregateInput
  }

  export type DocumentSnapshotScalarWhereWithAggregatesInput = {
    AND?: DocumentSnapshotScalarWhereWithAggregatesInput | DocumentSnapshotScalarWhereWithAggregatesInput[]
    OR?: DocumentSnapshotScalarWhereWithAggregatesInput[]
    NOT?: DocumentSnapshotScalarWhereWithAggregatesInput | DocumentSnapshotScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DocumentSnapshot"> | string
    content?: StringWithAggregatesFilter<"DocumentSnapshot"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DocumentSnapshot"> | Date | string
    documentId?: StringWithAggregatesFilter<"DocumentSnapshot"> | string
    createdById?: StringWithAggregatesFilter<"DocumentSnapshot"> | string
  }

  export type DocumentLineWhereInput = {
    AND?: DocumentLineWhereInput | DocumentLineWhereInput[]
    OR?: DocumentLineWhereInput[]
    NOT?: DocumentLineWhereInput | DocumentLineWhereInput[]
    id?: StringFilter<"DocumentLine"> | string
    lineNumber?: IntFilter<"DocumentLine"> | number
    content?: StringFilter<"DocumentLine"> | string
    createdAt?: DateTimeFilter<"DocumentLine"> | Date | string
    documentId?: StringFilter<"DocumentLine"> | string
    document?: XOR<DocumentScalarRelationFilter, DocumentWhereInput>
    lineEdits?: LineEditListRelationFilter
  }

  export type DocumentLineOrderByWithRelationInput = {
    id?: SortOrder
    lineNumber?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    documentId?: SortOrder
    document?: DocumentOrderByWithRelationInput
    lineEdits?: LineEditOrderByRelationAggregateInput
  }

  export type DocumentLineWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    documentId_lineNumber?: DocumentLineDocumentIdLineNumberCompoundUniqueInput
    AND?: DocumentLineWhereInput | DocumentLineWhereInput[]
    OR?: DocumentLineWhereInput[]
    NOT?: DocumentLineWhereInput | DocumentLineWhereInput[]
    lineNumber?: IntFilter<"DocumentLine"> | number
    content?: StringFilter<"DocumentLine"> | string
    createdAt?: DateTimeFilter<"DocumentLine"> | Date | string
    documentId?: StringFilter<"DocumentLine"> | string
    document?: XOR<DocumentScalarRelationFilter, DocumentWhereInput>
    lineEdits?: LineEditListRelationFilter
  }, "id" | "documentId_lineNumber">

  export type DocumentLineOrderByWithAggregationInput = {
    id?: SortOrder
    lineNumber?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    documentId?: SortOrder
    _count?: DocumentLineCountOrderByAggregateInput
    _avg?: DocumentLineAvgOrderByAggregateInput
    _max?: DocumentLineMaxOrderByAggregateInput
    _min?: DocumentLineMinOrderByAggregateInput
    _sum?: DocumentLineSumOrderByAggregateInput
  }

  export type DocumentLineScalarWhereWithAggregatesInput = {
    AND?: DocumentLineScalarWhereWithAggregatesInput | DocumentLineScalarWhereWithAggregatesInput[]
    OR?: DocumentLineScalarWhereWithAggregatesInput[]
    NOT?: DocumentLineScalarWhereWithAggregatesInput | DocumentLineScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DocumentLine"> | string
    lineNumber?: IntWithAggregatesFilter<"DocumentLine"> | number
    content?: StringWithAggregatesFilter<"DocumentLine"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DocumentLine"> | Date | string
    documentId?: StringWithAggregatesFilter<"DocumentLine"> | string
  }

  export type LineEditWhereInput = {
    AND?: LineEditWhereInput | LineEditWhereInput[]
    OR?: LineEditWhereInput[]
    NOT?: LineEditWhereInput | LineEditWhereInput[]
    id?: StringFilter<"LineEdit"> | string
    editedAt?: DateTimeFilter<"LineEdit"> | Date | string
    lineId?: StringFilter<"LineEdit"> | string
    userId?: StringFilter<"LineEdit"> | string
    line?: XOR<DocumentLineScalarRelationFilter, DocumentLineWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type LineEditOrderByWithRelationInput = {
    id?: SortOrder
    editedAt?: SortOrder
    lineId?: SortOrder
    userId?: SortOrder
    line?: DocumentLineOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type LineEditWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LineEditWhereInput | LineEditWhereInput[]
    OR?: LineEditWhereInput[]
    NOT?: LineEditWhereInput | LineEditWhereInput[]
    editedAt?: DateTimeFilter<"LineEdit"> | Date | string
    lineId?: StringFilter<"LineEdit"> | string
    userId?: StringFilter<"LineEdit"> | string
    line?: XOR<DocumentLineScalarRelationFilter, DocumentLineWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type LineEditOrderByWithAggregationInput = {
    id?: SortOrder
    editedAt?: SortOrder
    lineId?: SortOrder
    userId?: SortOrder
    _count?: LineEditCountOrderByAggregateInput
    _max?: LineEditMaxOrderByAggregateInput
    _min?: LineEditMinOrderByAggregateInput
  }

  export type LineEditScalarWhereWithAggregatesInput = {
    AND?: LineEditScalarWhereWithAggregatesInput | LineEditScalarWhereWithAggregatesInput[]
    OR?: LineEditScalarWhereWithAggregatesInput[]
    NOT?: LineEditScalarWhereWithAggregatesInput | LineEditScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LineEdit"> | string
    editedAt?: DateTimeWithAggregatesFilter<"LineEdit"> | Date | string
    lineId?: StringWithAggregatesFilter<"LineEdit"> | string
    userId?: StringWithAggregatesFilter<"LineEdit"> | string
  }

  export type MediaUploadWhereInput = {
    AND?: MediaUploadWhereInput | MediaUploadWhereInput[]
    OR?: MediaUploadWhereInput[]
    NOT?: MediaUploadWhereInput | MediaUploadWhereInput[]
    id?: StringFilter<"MediaUpload"> | string
    fileName?: StringFilter<"MediaUpload"> | string
    fileUrl?: StringFilter<"MediaUpload"> | string
    fileType?: StringFilter<"MediaUpload"> | string
    fileSize?: IntFilter<"MediaUpload"> | number
    createdAt?: DateTimeFilter<"MediaUpload"> | Date | string
  }

  export type MediaUploadOrderByWithRelationInput = {
    id?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    fileSize?: SortOrder
    createdAt?: SortOrder
  }

  export type MediaUploadWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MediaUploadWhereInput | MediaUploadWhereInput[]
    OR?: MediaUploadWhereInput[]
    NOT?: MediaUploadWhereInput | MediaUploadWhereInput[]
    fileName?: StringFilter<"MediaUpload"> | string
    fileUrl?: StringFilter<"MediaUpload"> | string
    fileType?: StringFilter<"MediaUpload"> | string
    fileSize?: IntFilter<"MediaUpload"> | number
    createdAt?: DateTimeFilter<"MediaUpload"> | Date | string
  }, "id">

  export type MediaUploadOrderByWithAggregationInput = {
    id?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    fileSize?: SortOrder
    createdAt?: SortOrder
    _count?: MediaUploadCountOrderByAggregateInput
    _avg?: MediaUploadAvgOrderByAggregateInput
    _max?: MediaUploadMaxOrderByAggregateInput
    _min?: MediaUploadMinOrderByAggregateInput
    _sum?: MediaUploadSumOrderByAggregateInput
  }

  export type MediaUploadScalarWhereWithAggregatesInput = {
    AND?: MediaUploadScalarWhereWithAggregatesInput | MediaUploadScalarWhereWithAggregatesInput[]
    OR?: MediaUploadScalarWhereWithAggregatesInput[]
    NOT?: MediaUploadScalarWhereWithAggregatesInput | MediaUploadScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MediaUpload"> | string
    fileName?: StringWithAggregatesFilter<"MediaUpload"> | string
    fileUrl?: StringWithAggregatesFilter<"MediaUpload"> | string
    fileType?: StringWithAggregatesFilter<"MediaUpload"> | string
    fileSize?: IntWithAggregatesFilter<"MediaUpload"> | number
    createdAt?: DateTimeWithAggregatesFilter<"MediaUpload"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name?: string | null
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedDocuments?: DocumentCreateNestedManyWithoutOwnerInput
    documentAccess?: DocumentAccessCreateNestedManyWithoutUserInput
    operations?: OperationCreateNestedManyWithoutUserInput
    cursors?: UserCursorCreateNestedManyWithoutUserInput
    presence?: UserPresenceCreateNestedOneWithoutUserInput
    documentSnapshots?: DocumentSnapshotCreateNestedManyWithoutCreatedByInput
    lineEdits?: LineEditCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name?: string | null
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedDocuments?: DocumentUncheckedCreateNestedManyWithoutOwnerInput
    documentAccess?: DocumentAccessUncheckedCreateNestedManyWithoutUserInput
    operations?: OperationUncheckedCreateNestedManyWithoutUserInput
    cursors?: UserCursorUncheckedCreateNestedManyWithoutUserInput
    presence?: UserPresenceUncheckedCreateNestedOneWithoutUserInput
    documentSnapshots?: DocumentSnapshotUncheckedCreateNestedManyWithoutCreatedByInput
    lineEdits?: LineEditUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedDocuments?: DocumentUpdateManyWithoutOwnerNestedInput
    documentAccess?: DocumentAccessUpdateManyWithoutUserNestedInput
    operations?: OperationUpdateManyWithoutUserNestedInput
    cursors?: UserCursorUpdateManyWithoutUserNestedInput
    presence?: UserPresenceUpdateOneWithoutUserNestedInput
    documentSnapshots?: DocumentSnapshotUpdateManyWithoutCreatedByNestedInput
    lineEdits?: LineEditUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedDocuments?: DocumentUncheckedUpdateManyWithoutOwnerNestedInput
    documentAccess?: DocumentAccessUncheckedUpdateManyWithoutUserNestedInput
    operations?: OperationUncheckedUpdateManyWithoutUserNestedInput
    cursors?: UserCursorUncheckedUpdateManyWithoutUserNestedInput
    presence?: UserPresenceUncheckedUpdateOneWithoutUserNestedInput
    documentSnapshots?: DocumentSnapshotUncheckedUpdateManyWithoutCreatedByNestedInput
    lineEdits?: LineEditUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name?: string | null
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentCreateInput = {
    id?: string
    title: string
    content?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutOwnedDocumentsInput
    documentAccess?: DocumentAccessCreateNestedManyWithoutDocumentInput
    operations?: OperationCreateNestedManyWithoutDocumentInput
    cursors?: UserCursorCreateNestedManyWithoutDocumentInput
    snapshots?: DocumentSnapshotCreateNestedManyWithoutDocumentInput
    lines?: DocumentLineCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateInput = {
    id?: string
    title: string
    content?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    documentAccess?: DocumentAccessUncheckedCreateNestedManyWithoutDocumentInput
    operations?: OperationUncheckedCreateNestedManyWithoutDocumentInput
    cursors?: UserCursorUncheckedCreateNestedManyWithoutDocumentInput
    snapshots?: DocumentSnapshotUncheckedCreateNestedManyWithoutDocumentInput
    lines?: DocumentLineUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutOwnedDocumentsNestedInput
    documentAccess?: DocumentAccessUpdateManyWithoutDocumentNestedInput
    operations?: OperationUpdateManyWithoutDocumentNestedInput
    cursors?: UserCursorUpdateManyWithoutDocumentNestedInput
    snapshots?: DocumentSnapshotUpdateManyWithoutDocumentNestedInput
    lines?: DocumentLineUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    documentAccess?: DocumentAccessUncheckedUpdateManyWithoutDocumentNestedInput
    operations?: OperationUncheckedUpdateManyWithoutDocumentNestedInput
    cursors?: UserCursorUncheckedUpdateManyWithoutDocumentNestedInput
    snapshots?: DocumentSnapshotUncheckedUpdateManyWithoutDocumentNestedInput
    lines?: DocumentLineUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentCreateManyInput = {
    id?: string
    title: string
    content?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
  }

  export type DocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentAccessCreateInput = {
    id?: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    document: DocumentCreateNestedOneWithoutDocumentAccessInput
    user: UserCreateNestedOneWithoutDocumentAccessInput
  }

  export type DocumentAccessUncheckedCreateInput = {
    id?: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    documentId: string
    userId: string
  }

  export type DocumentAccessUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    document?: DocumentUpdateOneRequiredWithoutDocumentAccessNestedInput
    user?: UserUpdateOneRequiredWithoutDocumentAccessNestedInput
  }

  export type DocumentAccessUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentAccessCreateManyInput = {
    id?: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    documentId: string
    userId: string
  }

  export type DocumentAccessUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentAccessUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type OperationCreateInput = {
    id?: string
    type: $Enums.OpType
    position: number
    length?: number | null
    content?: string | null
    createdAt?: Date | string
    document: DocumentCreateNestedOneWithoutOperationsInput
    user: UserCreateNestedOneWithoutOperationsInput
  }

  export type OperationUncheckedCreateInput = {
    id?: string
    type: $Enums.OpType
    position: number
    length?: number | null
    content?: string | null
    createdAt?: Date | string
    documentId: string
    userId: string
  }

  export type OperationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumOpTypeFieldUpdateOperationsInput | $Enums.OpType
    position?: IntFieldUpdateOperationsInput | number
    length?: NullableIntFieldUpdateOperationsInput | number | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    document?: DocumentUpdateOneRequiredWithoutOperationsNestedInput
    user?: UserUpdateOneRequiredWithoutOperationsNestedInput
  }

  export type OperationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumOpTypeFieldUpdateOperationsInput | $Enums.OpType
    position?: IntFieldUpdateOperationsInput | number
    length?: NullableIntFieldUpdateOperationsInput | number | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type OperationCreateManyInput = {
    id?: string
    type: $Enums.OpType
    position: number
    length?: number | null
    content?: string | null
    createdAt?: Date | string
    documentId: string
    userId: string
  }

  export type OperationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumOpTypeFieldUpdateOperationsInput | $Enums.OpType
    position?: IntFieldUpdateOperationsInput | number
    length?: NullableIntFieldUpdateOperationsInput | number | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumOpTypeFieldUpdateOperationsInput | $Enums.OpType
    position?: IntFieldUpdateOperationsInput | number
    length?: NullableIntFieldUpdateOperationsInput | number | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCursorCreateInput = {
    id?: string
    cursorPos: number
    selectionStart?: number | null
    selectionEnd?: number | null
    color?: string
    lastActive?: Date | string
    document: DocumentCreateNestedOneWithoutCursorsInput
    user: UserCreateNestedOneWithoutCursorsInput
  }

  export type UserCursorUncheckedCreateInput = {
    id?: string
    cursorPos: number
    selectionStart?: number | null
    selectionEnd?: number | null
    color?: string
    lastActive?: Date | string
    documentId: string
    userId: string
  }

  export type UserCursorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cursorPos?: IntFieldUpdateOperationsInput | number
    selectionStart?: NullableIntFieldUpdateOperationsInput | number | null
    selectionEnd?: NullableIntFieldUpdateOperationsInput | number | null
    color?: StringFieldUpdateOperationsInput | string
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    document?: DocumentUpdateOneRequiredWithoutCursorsNestedInput
    user?: UserUpdateOneRequiredWithoutCursorsNestedInput
  }

  export type UserCursorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cursorPos?: IntFieldUpdateOperationsInput | number
    selectionStart?: NullableIntFieldUpdateOperationsInput | number | null
    selectionEnd?: NullableIntFieldUpdateOperationsInput | number | null
    color?: StringFieldUpdateOperationsInput | string
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCursorCreateManyInput = {
    id?: string
    cursorPos: number
    selectionStart?: number | null
    selectionEnd?: number | null
    color?: string
    lastActive?: Date | string
    documentId: string
    userId: string
  }

  export type UserCursorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    cursorPos?: IntFieldUpdateOperationsInput | number
    selectionStart?: NullableIntFieldUpdateOperationsInput | number | null
    selectionEnd?: NullableIntFieldUpdateOperationsInput | number | null
    color?: StringFieldUpdateOperationsInput | string
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCursorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    cursorPos?: IntFieldUpdateOperationsInput | number
    selectionStart?: NullableIntFieldUpdateOperationsInput | number | null
    selectionEnd?: NullableIntFieldUpdateOperationsInput | number | null
    color?: StringFieldUpdateOperationsInput | string
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserPresenceCreateInput = {
    id?: string
    status?: $Enums.PresenceStatus
    lastActive?: Date | string
    user: UserCreateNestedOneWithoutPresenceInput
  }

  export type UserPresenceUncheckedCreateInput = {
    id?: string
    status?: $Enums.PresenceStatus
    lastActive?: Date | string
    userId: string
  }

  export type UserPresenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumPresenceStatusFieldUpdateOperationsInput | $Enums.PresenceStatus
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPresenceNestedInput
  }

  export type UserPresenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumPresenceStatusFieldUpdateOperationsInput | $Enums.PresenceStatus
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserPresenceCreateManyInput = {
    id?: string
    status?: $Enums.PresenceStatus
    lastActive?: Date | string
    userId: string
  }

  export type UserPresenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumPresenceStatusFieldUpdateOperationsInput | $Enums.PresenceStatus
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPresenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumPresenceStatusFieldUpdateOperationsInput | $Enums.PresenceStatus
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentSnapshotCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    document: DocumentCreateNestedOneWithoutSnapshotsInput
    createdBy: UserCreateNestedOneWithoutDocumentSnapshotsInput
  }

  export type DocumentSnapshotUncheckedCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    documentId: string
    createdById: string
  }

  export type DocumentSnapshotUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    document?: DocumentUpdateOneRequiredWithoutSnapshotsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutDocumentSnapshotsNestedInput
  }

  export type DocumentSnapshotUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentSnapshotCreateManyInput = {
    id?: string
    content: string
    createdAt?: Date | string
    documentId: string
    createdById: string
  }

  export type DocumentSnapshotUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentSnapshotUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentLineCreateInput = {
    id?: string
    lineNumber: number
    content: string
    createdAt?: Date | string
    document: DocumentCreateNestedOneWithoutLinesInput
    lineEdits?: LineEditCreateNestedManyWithoutLineInput
  }

  export type DocumentLineUncheckedCreateInput = {
    id?: string
    lineNumber: number
    content: string
    createdAt?: Date | string
    documentId: string
    lineEdits?: LineEditUncheckedCreateNestedManyWithoutLineInput
  }

  export type DocumentLineUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    lineNumber?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    document?: DocumentUpdateOneRequiredWithoutLinesNestedInput
    lineEdits?: LineEditUpdateManyWithoutLineNestedInput
  }

  export type DocumentLineUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    lineNumber?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: StringFieldUpdateOperationsInput | string
    lineEdits?: LineEditUncheckedUpdateManyWithoutLineNestedInput
  }

  export type DocumentLineCreateManyInput = {
    id?: string
    lineNumber: number
    content: string
    createdAt?: Date | string
    documentId: string
  }

  export type DocumentLineUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    lineNumber?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentLineUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    lineNumber?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: StringFieldUpdateOperationsInput | string
  }

  export type LineEditCreateInput = {
    id?: string
    editedAt?: Date | string
    line: DocumentLineCreateNestedOneWithoutLineEditsInput
    user: UserCreateNestedOneWithoutLineEditsInput
  }

  export type LineEditUncheckedCreateInput = {
    id?: string
    editedAt?: Date | string
    lineId: string
    userId: string
  }

  export type LineEditUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    editedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    line?: DocumentLineUpdateOneRequiredWithoutLineEditsNestedInput
    user?: UserUpdateOneRequiredWithoutLineEditsNestedInput
  }

  export type LineEditUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    editedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lineId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type LineEditCreateManyInput = {
    id?: string
    editedAt?: Date | string
    lineId: string
    userId: string
  }

  export type LineEditUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    editedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LineEditUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    editedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lineId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type MediaUploadCreateInput = {
    id?: string
    fileName: string
    fileUrl: string
    fileType: string
    fileSize: number
    createdAt?: Date | string
  }

  export type MediaUploadUncheckedCreateInput = {
    id?: string
    fileName: string
    fileUrl: string
    fileType: string
    fileSize: number
    createdAt?: Date | string
  }

  export type MediaUploadUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaUploadUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaUploadCreateManyInput = {
    id?: string
    fileName: string
    fileUrl: string
    fileType: string
    fileSize: number
    createdAt?: Date | string
  }

  export type MediaUploadUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaUploadUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DocumentListRelationFilter = {
    every?: DocumentWhereInput
    some?: DocumentWhereInput
    none?: DocumentWhereInput
  }

  export type DocumentAccessListRelationFilter = {
    every?: DocumentAccessWhereInput
    some?: DocumentAccessWhereInput
    none?: DocumentAccessWhereInput
  }

  export type OperationListRelationFilter = {
    every?: OperationWhereInput
    some?: OperationWhereInput
    none?: OperationWhereInput
  }

  export type UserCursorListRelationFilter = {
    every?: UserCursorWhereInput
    some?: UserCursorWhereInput
    none?: UserCursorWhereInput
  }

  export type UserPresenceNullableScalarRelationFilter = {
    is?: UserPresenceWhereInput | null
    isNot?: UserPresenceWhereInput | null
  }

  export type DocumentSnapshotListRelationFilter = {
    every?: DocumentSnapshotWhereInput
    some?: DocumentSnapshotWhereInput
    none?: DocumentSnapshotWhereInput
  }

  export type LineEditListRelationFilter = {
    every?: LineEditWhereInput
    some?: LineEditWhereInput
    none?: LineEditWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type DocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentAccessOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OperationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCursorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentSnapshotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LineEditOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatarUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatarUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatarUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type DocumentLineListRelationFilter = {
    every?: DocumentLineWhereInput
    some?: DocumentLineWhereInput
    none?: DocumentLineWhereInput
  }

  export type DocumentLineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DocumentScalarRelationFilter = {
    is?: DocumentWhereInput
    isNot?: DocumentWhereInput
  }

  export type DocumentAccessDocumentIdUserIdCompoundUniqueInput = {
    documentId: string
    userId: string
  }

  export type DocumentAccessCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    documentId?: SortOrder
    userId?: SortOrder
  }

  export type DocumentAccessMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    documentId?: SortOrder
    userId?: SortOrder
  }

  export type DocumentAccessMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    documentId?: SortOrder
    userId?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type EnumOpTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.OpType | EnumOpTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OpType[] | ListEnumOpTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OpType[] | ListEnumOpTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOpTypeFilter<$PrismaModel> | $Enums.OpType
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type OperationCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    position?: SortOrder
    length?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    documentId?: SortOrder
    userId?: SortOrder
  }

  export type OperationAvgOrderByAggregateInput = {
    position?: SortOrder
    length?: SortOrder
  }

  export type OperationMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    position?: SortOrder
    length?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    documentId?: SortOrder
    userId?: SortOrder
  }

  export type OperationMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    position?: SortOrder
    length?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    documentId?: SortOrder
    userId?: SortOrder
  }

  export type OperationSumOrderByAggregateInput = {
    position?: SortOrder
    length?: SortOrder
  }

  export type EnumOpTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OpType | EnumOpTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OpType[] | ListEnumOpTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OpType[] | ListEnumOpTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOpTypeWithAggregatesFilter<$PrismaModel> | $Enums.OpType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOpTypeFilter<$PrismaModel>
    _max?: NestedEnumOpTypeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type UserCursorDocumentIdUserIdCompoundUniqueInput = {
    documentId: string
    userId: string
  }

  export type UserCursorCountOrderByAggregateInput = {
    id?: SortOrder
    cursorPos?: SortOrder
    selectionStart?: SortOrder
    selectionEnd?: SortOrder
    color?: SortOrder
    lastActive?: SortOrder
    documentId?: SortOrder
    userId?: SortOrder
  }

  export type UserCursorAvgOrderByAggregateInput = {
    cursorPos?: SortOrder
    selectionStart?: SortOrder
    selectionEnd?: SortOrder
  }

  export type UserCursorMaxOrderByAggregateInput = {
    id?: SortOrder
    cursorPos?: SortOrder
    selectionStart?: SortOrder
    selectionEnd?: SortOrder
    color?: SortOrder
    lastActive?: SortOrder
    documentId?: SortOrder
    userId?: SortOrder
  }

  export type UserCursorMinOrderByAggregateInput = {
    id?: SortOrder
    cursorPos?: SortOrder
    selectionStart?: SortOrder
    selectionEnd?: SortOrder
    color?: SortOrder
    lastActive?: SortOrder
    documentId?: SortOrder
    userId?: SortOrder
  }

  export type UserCursorSumOrderByAggregateInput = {
    cursorPos?: SortOrder
    selectionStart?: SortOrder
    selectionEnd?: SortOrder
  }

  export type EnumPresenceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PresenceStatus | EnumPresenceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PresenceStatus[] | ListEnumPresenceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PresenceStatus[] | ListEnumPresenceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPresenceStatusFilter<$PrismaModel> | $Enums.PresenceStatus
  }

  export type UserPresenceCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    lastActive?: SortOrder
    userId?: SortOrder
  }

  export type UserPresenceMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    lastActive?: SortOrder
    userId?: SortOrder
  }

  export type UserPresenceMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    lastActive?: SortOrder
    userId?: SortOrder
  }

  export type EnumPresenceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PresenceStatus | EnumPresenceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PresenceStatus[] | ListEnumPresenceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PresenceStatus[] | ListEnumPresenceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPresenceStatusWithAggregatesFilter<$PrismaModel> | $Enums.PresenceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPresenceStatusFilter<$PrismaModel>
    _max?: NestedEnumPresenceStatusFilter<$PrismaModel>
  }

  export type DocumentSnapshotCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    documentId?: SortOrder
    createdById?: SortOrder
  }

  export type DocumentSnapshotMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    documentId?: SortOrder
    createdById?: SortOrder
  }

  export type DocumentSnapshotMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    documentId?: SortOrder
    createdById?: SortOrder
  }

  export type DocumentLineDocumentIdLineNumberCompoundUniqueInput = {
    documentId: string
    lineNumber: number
  }

  export type DocumentLineCountOrderByAggregateInput = {
    id?: SortOrder
    lineNumber?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    documentId?: SortOrder
  }

  export type DocumentLineAvgOrderByAggregateInput = {
    lineNumber?: SortOrder
  }

  export type DocumentLineMaxOrderByAggregateInput = {
    id?: SortOrder
    lineNumber?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    documentId?: SortOrder
  }

  export type DocumentLineMinOrderByAggregateInput = {
    id?: SortOrder
    lineNumber?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    documentId?: SortOrder
  }

  export type DocumentLineSumOrderByAggregateInput = {
    lineNumber?: SortOrder
  }

  export type DocumentLineScalarRelationFilter = {
    is?: DocumentLineWhereInput
    isNot?: DocumentLineWhereInput
  }

  export type LineEditCountOrderByAggregateInput = {
    id?: SortOrder
    editedAt?: SortOrder
    lineId?: SortOrder
    userId?: SortOrder
  }

  export type LineEditMaxOrderByAggregateInput = {
    id?: SortOrder
    editedAt?: SortOrder
    lineId?: SortOrder
    userId?: SortOrder
  }

  export type LineEditMinOrderByAggregateInput = {
    id?: SortOrder
    editedAt?: SortOrder
    lineId?: SortOrder
    userId?: SortOrder
  }

  export type MediaUploadCountOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    fileSize?: SortOrder
    createdAt?: SortOrder
  }

  export type MediaUploadAvgOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type MediaUploadMaxOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    fileSize?: SortOrder
    createdAt?: SortOrder
  }

  export type MediaUploadMinOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    fileUrl?: SortOrder
    fileType?: SortOrder
    fileSize?: SortOrder
    createdAt?: SortOrder
  }

  export type MediaUploadSumOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type DocumentCreateNestedManyWithoutOwnerInput = {
    create?: XOR<DocumentCreateWithoutOwnerInput, DocumentUncheckedCreateWithoutOwnerInput> | DocumentCreateWithoutOwnerInput[] | DocumentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutOwnerInput | DocumentCreateOrConnectWithoutOwnerInput[]
    createMany?: DocumentCreateManyOwnerInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentAccessCreateNestedManyWithoutUserInput = {
    create?: XOR<DocumentAccessCreateWithoutUserInput, DocumentAccessUncheckedCreateWithoutUserInput> | DocumentAccessCreateWithoutUserInput[] | DocumentAccessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentAccessCreateOrConnectWithoutUserInput | DocumentAccessCreateOrConnectWithoutUserInput[]
    createMany?: DocumentAccessCreateManyUserInputEnvelope
    connect?: DocumentAccessWhereUniqueInput | DocumentAccessWhereUniqueInput[]
  }

  export type OperationCreateNestedManyWithoutUserInput = {
    create?: XOR<OperationCreateWithoutUserInput, OperationUncheckedCreateWithoutUserInput> | OperationCreateWithoutUserInput[] | OperationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OperationCreateOrConnectWithoutUserInput | OperationCreateOrConnectWithoutUserInput[]
    createMany?: OperationCreateManyUserInputEnvelope
    connect?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
  }

  export type UserCursorCreateNestedManyWithoutUserInput = {
    create?: XOR<UserCursorCreateWithoutUserInput, UserCursorUncheckedCreateWithoutUserInput> | UserCursorCreateWithoutUserInput[] | UserCursorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCursorCreateOrConnectWithoutUserInput | UserCursorCreateOrConnectWithoutUserInput[]
    createMany?: UserCursorCreateManyUserInputEnvelope
    connect?: UserCursorWhereUniqueInput | UserCursorWhereUniqueInput[]
  }

  export type UserPresenceCreateNestedOneWithoutUserInput = {
    create?: XOR<UserPresenceCreateWithoutUserInput, UserPresenceUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPresenceCreateOrConnectWithoutUserInput
    connect?: UserPresenceWhereUniqueInput
  }

  export type DocumentSnapshotCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DocumentSnapshotCreateWithoutCreatedByInput, DocumentSnapshotUncheckedCreateWithoutCreatedByInput> | DocumentSnapshotCreateWithoutCreatedByInput[] | DocumentSnapshotUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DocumentSnapshotCreateOrConnectWithoutCreatedByInput | DocumentSnapshotCreateOrConnectWithoutCreatedByInput[]
    createMany?: DocumentSnapshotCreateManyCreatedByInputEnvelope
    connect?: DocumentSnapshotWhereUniqueInput | DocumentSnapshotWhereUniqueInput[]
  }

  export type LineEditCreateNestedManyWithoutUserInput = {
    create?: XOR<LineEditCreateWithoutUserInput, LineEditUncheckedCreateWithoutUserInput> | LineEditCreateWithoutUserInput[] | LineEditUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LineEditCreateOrConnectWithoutUserInput | LineEditCreateOrConnectWithoutUserInput[]
    createMany?: LineEditCreateManyUserInputEnvelope
    connect?: LineEditWhereUniqueInput | LineEditWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<DocumentCreateWithoutOwnerInput, DocumentUncheckedCreateWithoutOwnerInput> | DocumentCreateWithoutOwnerInput[] | DocumentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutOwnerInput | DocumentCreateOrConnectWithoutOwnerInput[]
    createMany?: DocumentCreateManyOwnerInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentAccessUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DocumentAccessCreateWithoutUserInput, DocumentAccessUncheckedCreateWithoutUserInput> | DocumentAccessCreateWithoutUserInput[] | DocumentAccessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentAccessCreateOrConnectWithoutUserInput | DocumentAccessCreateOrConnectWithoutUserInput[]
    createMany?: DocumentAccessCreateManyUserInputEnvelope
    connect?: DocumentAccessWhereUniqueInput | DocumentAccessWhereUniqueInput[]
  }

  export type OperationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OperationCreateWithoutUserInput, OperationUncheckedCreateWithoutUserInput> | OperationCreateWithoutUserInput[] | OperationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OperationCreateOrConnectWithoutUserInput | OperationCreateOrConnectWithoutUserInput[]
    createMany?: OperationCreateManyUserInputEnvelope
    connect?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
  }

  export type UserCursorUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserCursorCreateWithoutUserInput, UserCursorUncheckedCreateWithoutUserInput> | UserCursorCreateWithoutUserInput[] | UserCursorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCursorCreateOrConnectWithoutUserInput | UserCursorCreateOrConnectWithoutUserInput[]
    createMany?: UserCursorCreateManyUserInputEnvelope
    connect?: UserCursorWhereUniqueInput | UserCursorWhereUniqueInput[]
  }

  export type UserPresenceUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserPresenceCreateWithoutUserInput, UserPresenceUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPresenceCreateOrConnectWithoutUserInput
    connect?: UserPresenceWhereUniqueInput
  }

  export type DocumentSnapshotUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DocumentSnapshotCreateWithoutCreatedByInput, DocumentSnapshotUncheckedCreateWithoutCreatedByInput> | DocumentSnapshotCreateWithoutCreatedByInput[] | DocumentSnapshotUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DocumentSnapshotCreateOrConnectWithoutCreatedByInput | DocumentSnapshotCreateOrConnectWithoutCreatedByInput[]
    createMany?: DocumentSnapshotCreateManyCreatedByInputEnvelope
    connect?: DocumentSnapshotWhereUniqueInput | DocumentSnapshotWhereUniqueInput[]
  }

  export type LineEditUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LineEditCreateWithoutUserInput, LineEditUncheckedCreateWithoutUserInput> | LineEditCreateWithoutUserInput[] | LineEditUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LineEditCreateOrConnectWithoutUserInput | LineEditCreateOrConnectWithoutUserInput[]
    createMany?: LineEditCreateManyUserInputEnvelope
    connect?: LineEditWhereUniqueInput | LineEditWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DocumentUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<DocumentCreateWithoutOwnerInput, DocumentUncheckedCreateWithoutOwnerInput> | DocumentCreateWithoutOwnerInput[] | DocumentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutOwnerInput | DocumentCreateOrConnectWithoutOwnerInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutOwnerInput | DocumentUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: DocumentCreateManyOwnerInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutOwnerInput | DocumentUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutOwnerInput | DocumentUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type DocumentAccessUpdateManyWithoutUserNestedInput = {
    create?: XOR<DocumentAccessCreateWithoutUserInput, DocumentAccessUncheckedCreateWithoutUserInput> | DocumentAccessCreateWithoutUserInput[] | DocumentAccessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentAccessCreateOrConnectWithoutUserInput | DocumentAccessCreateOrConnectWithoutUserInput[]
    upsert?: DocumentAccessUpsertWithWhereUniqueWithoutUserInput | DocumentAccessUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DocumentAccessCreateManyUserInputEnvelope
    set?: DocumentAccessWhereUniqueInput | DocumentAccessWhereUniqueInput[]
    disconnect?: DocumentAccessWhereUniqueInput | DocumentAccessWhereUniqueInput[]
    delete?: DocumentAccessWhereUniqueInput | DocumentAccessWhereUniqueInput[]
    connect?: DocumentAccessWhereUniqueInput | DocumentAccessWhereUniqueInput[]
    update?: DocumentAccessUpdateWithWhereUniqueWithoutUserInput | DocumentAccessUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DocumentAccessUpdateManyWithWhereWithoutUserInput | DocumentAccessUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DocumentAccessScalarWhereInput | DocumentAccessScalarWhereInput[]
  }

  export type OperationUpdateManyWithoutUserNestedInput = {
    create?: XOR<OperationCreateWithoutUserInput, OperationUncheckedCreateWithoutUserInput> | OperationCreateWithoutUserInput[] | OperationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OperationCreateOrConnectWithoutUserInput | OperationCreateOrConnectWithoutUserInput[]
    upsert?: OperationUpsertWithWhereUniqueWithoutUserInput | OperationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OperationCreateManyUserInputEnvelope
    set?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    disconnect?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    delete?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    connect?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    update?: OperationUpdateWithWhereUniqueWithoutUserInput | OperationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OperationUpdateManyWithWhereWithoutUserInput | OperationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OperationScalarWhereInput | OperationScalarWhereInput[]
  }

  export type UserCursorUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserCursorCreateWithoutUserInput, UserCursorUncheckedCreateWithoutUserInput> | UserCursorCreateWithoutUserInput[] | UserCursorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCursorCreateOrConnectWithoutUserInput | UserCursorCreateOrConnectWithoutUserInput[]
    upsert?: UserCursorUpsertWithWhereUniqueWithoutUserInput | UserCursorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserCursorCreateManyUserInputEnvelope
    set?: UserCursorWhereUniqueInput | UserCursorWhereUniqueInput[]
    disconnect?: UserCursorWhereUniqueInput | UserCursorWhereUniqueInput[]
    delete?: UserCursorWhereUniqueInput | UserCursorWhereUniqueInput[]
    connect?: UserCursorWhereUniqueInput | UserCursorWhereUniqueInput[]
    update?: UserCursorUpdateWithWhereUniqueWithoutUserInput | UserCursorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserCursorUpdateManyWithWhereWithoutUserInput | UserCursorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserCursorScalarWhereInput | UserCursorScalarWhereInput[]
  }

  export type UserPresenceUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserPresenceCreateWithoutUserInput, UserPresenceUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPresenceCreateOrConnectWithoutUserInput
    upsert?: UserPresenceUpsertWithoutUserInput
    disconnect?: UserPresenceWhereInput | boolean
    delete?: UserPresenceWhereInput | boolean
    connect?: UserPresenceWhereUniqueInput
    update?: XOR<XOR<UserPresenceUpdateToOneWithWhereWithoutUserInput, UserPresenceUpdateWithoutUserInput>, UserPresenceUncheckedUpdateWithoutUserInput>
  }

  export type DocumentSnapshotUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DocumentSnapshotCreateWithoutCreatedByInput, DocumentSnapshotUncheckedCreateWithoutCreatedByInput> | DocumentSnapshotCreateWithoutCreatedByInput[] | DocumentSnapshotUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DocumentSnapshotCreateOrConnectWithoutCreatedByInput | DocumentSnapshotCreateOrConnectWithoutCreatedByInput[]
    upsert?: DocumentSnapshotUpsertWithWhereUniqueWithoutCreatedByInput | DocumentSnapshotUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DocumentSnapshotCreateManyCreatedByInputEnvelope
    set?: DocumentSnapshotWhereUniqueInput | DocumentSnapshotWhereUniqueInput[]
    disconnect?: DocumentSnapshotWhereUniqueInput | DocumentSnapshotWhereUniqueInput[]
    delete?: DocumentSnapshotWhereUniqueInput | DocumentSnapshotWhereUniqueInput[]
    connect?: DocumentSnapshotWhereUniqueInput | DocumentSnapshotWhereUniqueInput[]
    update?: DocumentSnapshotUpdateWithWhereUniqueWithoutCreatedByInput | DocumentSnapshotUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DocumentSnapshotUpdateManyWithWhereWithoutCreatedByInput | DocumentSnapshotUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DocumentSnapshotScalarWhereInput | DocumentSnapshotScalarWhereInput[]
  }

  export type LineEditUpdateManyWithoutUserNestedInput = {
    create?: XOR<LineEditCreateWithoutUserInput, LineEditUncheckedCreateWithoutUserInput> | LineEditCreateWithoutUserInput[] | LineEditUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LineEditCreateOrConnectWithoutUserInput | LineEditCreateOrConnectWithoutUserInput[]
    upsert?: LineEditUpsertWithWhereUniqueWithoutUserInput | LineEditUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LineEditCreateManyUserInputEnvelope
    set?: LineEditWhereUniqueInput | LineEditWhereUniqueInput[]
    disconnect?: LineEditWhereUniqueInput | LineEditWhereUniqueInput[]
    delete?: LineEditWhereUniqueInput | LineEditWhereUniqueInput[]
    connect?: LineEditWhereUniqueInput | LineEditWhereUniqueInput[]
    update?: LineEditUpdateWithWhereUniqueWithoutUserInput | LineEditUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LineEditUpdateManyWithWhereWithoutUserInput | LineEditUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LineEditScalarWhereInput | LineEditScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<DocumentCreateWithoutOwnerInput, DocumentUncheckedCreateWithoutOwnerInput> | DocumentCreateWithoutOwnerInput[] | DocumentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutOwnerInput | DocumentCreateOrConnectWithoutOwnerInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutOwnerInput | DocumentUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: DocumentCreateManyOwnerInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutOwnerInput | DocumentUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutOwnerInput | DocumentUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type DocumentAccessUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DocumentAccessCreateWithoutUserInput, DocumentAccessUncheckedCreateWithoutUserInput> | DocumentAccessCreateWithoutUserInput[] | DocumentAccessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentAccessCreateOrConnectWithoutUserInput | DocumentAccessCreateOrConnectWithoutUserInput[]
    upsert?: DocumentAccessUpsertWithWhereUniqueWithoutUserInput | DocumentAccessUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DocumentAccessCreateManyUserInputEnvelope
    set?: DocumentAccessWhereUniqueInput | DocumentAccessWhereUniqueInput[]
    disconnect?: DocumentAccessWhereUniqueInput | DocumentAccessWhereUniqueInput[]
    delete?: DocumentAccessWhereUniqueInput | DocumentAccessWhereUniqueInput[]
    connect?: DocumentAccessWhereUniqueInput | DocumentAccessWhereUniqueInput[]
    update?: DocumentAccessUpdateWithWhereUniqueWithoutUserInput | DocumentAccessUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DocumentAccessUpdateManyWithWhereWithoutUserInput | DocumentAccessUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DocumentAccessScalarWhereInput | DocumentAccessScalarWhereInput[]
  }

  export type OperationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OperationCreateWithoutUserInput, OperationUncheckedCreateWithoutUserInput> | OperationCreateWithoutUserInput[] | OperationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OperationCreateOrConnectWithoutUserInput | OperationCreateOrConnectWithoutUserInput[]
    upsert?: OperationUpsertWithWhereUniqueWithoutUserInput | OperationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OperationCreateManyUserInputEnvelope
    set?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    disconnect?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    delete?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    connect?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    update?: OperationUpdateWithWhereUniqueWithoutUserInput | OperationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OperationUpdateManyWithWhereWithoutUserInput | OperationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OperationScalarWhereInput | OperationScalarWhereInput[]
  }

  export type UserCursorUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserCursorCreateWithoutUserInput, UserCursorUncheckedCreateWithoutUserInput> | UserCursorCreateWithoutUserInput[] | UserCursorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCursorCreateOrConnectWithoutUserInput | UserCursorCreateOrConnectWithoutUserInput[]
    upsert?: UserCursorUpsertWithWhereUniqueWithoutUserInput | UserCursorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserCursorCreateManyUserInputEnvelope
    set?: UserCursorWhereUniqueInput | UserCursorWhereUniqueInput[]
    disconnect?: UserCursorWhereUniqueInput | UserCursorWhereUniqueInput[]
    delete?: UserCursorWhereUniqueInput | UserCursorWhereUniqueInput[]
    connect?: UserCursorWhereUniqueInput | UserCursorWhereUniqueInput[]
    update?: UserCursorUpdateWithWhereUniqueWithoutUserInput | UserCursorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserCursorUpdateManyWithWhereWithoutUserInput | UserCursorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserCursorScalarWhereInput | UserCursorScalarWhereInput[]
  }

  export type UserPresenceUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserPresenceCreateWithoutUserInput, UserPresenceUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPresenceCreateOrConnectWithoutUserInput
    upsert?: UserPresenceUpsertWithoutUserInput
    disconnect?: UserPresenceWhereInput | boolean
    delete?: UserPresenceWhereInput | boolean
    connect?: UserPresenceWhereUniqueInput
    update?: XOR<XOR<UserPresenceUpdateToOneWithWhereWithoutUserInput, UserPresenceUpdateWithoutUserInput>, UserPresenceUncheckedUpdateWithoutUserInput>
  }

  export type DocumentSnapshotUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DocumentSnapshotCreateWithoutCreatedByInput, DocumentSnapshotUncheckedCreateWithoutCreatedByInput> | DocumentSnapshotCreateWithoutCreatedByInput[] | DocumentSnapshotUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DocumentSnapshotCreateOrConnectWithoutCreatedByInput | DocumentSnapshotCreateOrConnectWithoutCreatedByInput[]
    upsert?: DocumentSnapshotUpsertWithWhereUniqueWithoutCreatedByInput | DocumentSnapshotUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DocumentSnapshotCreateManyCreatedByInputEnvelope
    set?: DocumentSnapshotWhereUniqueInput | DocumentSnapshotWhereUniqueInput[]
    disconnect?: DocumentSnapshotWhereUniqueInput | DocumentSnapshotWhereUniqueInput[]
    delete?: DocumentSnapshotWhereUniqueInput | DocumentSnapshotWhereUniqueInput[]
    connect?: DocumentSnapshotWhereUniqueInput | DocumentSnapshotWhereUniqueInput[]
    update?: DocumentSnapshotUpdateWithWhereUniqueWithoutCreatedByInput | DocumentSnapshotUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DocumentSnapshotUpdateManyWithWhereWithoutCreatedByInput | DocumentSnapshotUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DocumentSnapshotScalarWhereInput | DocumentSnapshotScalarWhereInput[]
  }

  export type LineEditUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LineEditCreateWithoutUserInput, LineEditUncheckedCreateWithoutUserInput> | LineEditCreateWithoutUserInput[] | LineEditUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LineEditCreateOrConnectWithoutUserInput | LineEditCreateOrConnectWithoutUserInput[]
    upsert?: LineEditUpsertWithWhereUniqueWithoutUserInput | LineEditUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LineEditCreateManyUserInputEnvelope
    set?: LineEditWhereUniqueInput | LineEditWhereUniqueInput[]
    disconnect?: LineEditWhereUniqueInput | LineEditWhereUniqueInput[]
    delete?: LineEditWhereUniqueInput | LineEditWhereUniqueInput[]
    connect?: LineEditWhereUniqueInput | LineEditWhereUniqueInput[]
    update?: LineEditUpdateWithWhereUniqueWithoutUserInput | LineEditUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LineEditUpdateManyWithWhereWithoutUserInput | LineEditUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LineEditScalarWhereInput | LineEditScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutOwnedDocumentsInput = {
    create?: XOR<UserCreateWithoutOwnedDocumentsInput, UserUncheckedCreateWithoutOwnedDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedDocumentsInput
    connect?: UserWhereUniqueInput
  }

  export type DocumentAccessCreateNestedManyWithoutDocumentInput = {
    create?: XOR<DocumentAccessCreateWithoutDocumentInput, DocumentAccessUncheckedCreateWithoutDocumentInput> | DocumentAccessCreateWithoutDocumentInput[] | DocumentAccessUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentAccessCreateOrConnectWithoutDocumentInput | DocumentAccessCreateOrConnectWithoutDocumentInput[]
    createMany?: DocumentAccessCreateManyDocumentInputEnvelope
    connect?: DocumentAccessWhereUniqueInput | DocumentAccessWhereUniqueInput[]
  }

  export type OperationCreateNestedManyWithoutDocumentInput = {
    create?: XOR<OperationCreateWithoutDocumentInput, OperationUncheckedCreateWithoutDocumentInput> | OperationCreateWithoutDocumentInput[] | OperationUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: OperationCreateOrConnectWithoutDocumentInput | OperationCreateOrConnectWithoutDocumentInput[]
    createMany?: OperationCreateManyDocumentInputEnvelope
    connect?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
  }

  export type UserCursorCreateNestedManyWithoutDocumentInput = {
    create?: XOR<UserCursorCreateWithoutDocumentInput, UserCursorUncheckedCreateWithoutDocumentInput> | UserCursorCreateWithoutDocumentInput[] | UserCursorUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: UserCursorCreateOrConnectWithoutDocumentInput | UserCursorCreateOrConnectWithoutDocumentInput[]
    createMany?: UserCursorCreateManyDocumentInputEnvelope
    connect?: UserCursorWhereUniqueInput | UserCursorWhereUniqueInput[]
  }

  export type DocumentSnapshotCreateNestedManyWithoutDocumentInput = {
    create?: XOR<DocumentSnapshotCreateWithoutDocumentInput, DocumentSnapshotUncheckedCreateWithoutDocumentInput> | DocumentSnapshotCreateWithoutDocumentInput[] | DocumentSnapshotUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentSnapshotCreateOrConnectWithoutDocumentInput | DocumentSnapshotCreateOrConnectWithoutDocumentInput[]
    createMany?: DocumentSnapshotCreateManyDocumentInputEnvelope
    connect?: DocumentSnapshotWhereUniqueInput | DocumentSnapshotWhereUniqueInput[]
  }

  export type DocumentLineCreateNestedManyWithoutDocumentInput = {
    create?: XOR<DocumentLineCreateWithoutDocumentInput, DocumentLineUncheckedCreateWithoutDocumentInput> | DocumentLineCreateWithoutDocumentInput[] | DocumentLineUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentLineCreateOrConnectWithoutDocumentInput | DocumentLineCreateOrConnectWithoutDocumentInput[]
    createMany?: DocumentLineCreateManyDocumentInputEnvelope
    connect?: DocumentLineWhereUniqueInput | DocumentLineWhereUniqueInput[]
  }

  export type DocumentAccessUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<DocumentAccessCreateWithoutDocumentInput, DocumentAccessUncheckedCreateWithoutDocumentInput> | DocumentAccessCreateWithoutDocumentInput[] | DocumentAccessUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentAccessCreateOrConnectWithoutDocumentInput | DocumentAccessCreateOrConnectWithoutDocumentInput[]
    createMany?: DocumentAccessCreateManyDocumentInputEnvelope
    connect?: DocumentAccessWhereUniqueInput | DocumentAccessWhereUniqueInput[]
  }

  export type OperationUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<OperationCreateWithoutDocumentInput, OperationUncheckedCreateWithoutDocumentInput> | OperationCreateWithoutDocumentInput[] | OperationUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: OperationCreateOrConnectWithoutDocumentInput | OperationCreateOrConnectWithoutDocumentInput[]
    createMany?: OperationCreateManyDocumentInputEnvelope
    connect?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
  }

  export type UserCursorUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<UserCursorCreateWithoutDocumentInput, UserCursorUncheckedCreateWithoutDocumentInput> | UserCursorCreateWithoutDocumentInput[] | UserCursorUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: UserCursorCreateOrConnectWithoutDocumentInput | UserCursorCreateOrConnectWithoutDocumentInput[]
    createMany?: UserCursorCreateManyDocumentInputEnvelope
    connect?: UserCursorWhereUniqueInput | UserCursorWhereUniqueInput[]
  }

  export type DocumentSnapshotUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<DocumentSnapshotCreateWithoutDocumentInput, DocumentSnapshotUncheckedCreateWithoutDocumentInput> | DocumentSnapshotCreateWithoutDocumentInput[] | DocumentSnapshotUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentSnapshotCreateOrConnectWithoutDocumentInput | DocumentSnapshotCreateOrConnectWithoutDocumentInput[]
    createMany?: DocumentSnapshotCreateManyDocumentInputEnvelope
    connect?: DocumentSnapshotWhereUniqueInput | DocumentSnapshotWhereUniqueInput[]
  }

  export type DocumentLineUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<DocumentLineCreateWithoutDocumentInput, DocumentLineUncheckedCreateWithoutDocumentInput> | DocumentLineCreateWithoutDocumentInput[] | DocumentLineUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentLineCreateOrConnectWithoutDocumentInput | DocumentLineCreateOrConnectWithoutDocumentInput[]
    createMany?: DocumentLineCreateManyDocumentInputEnvelope
    connect?: DocumentLineWhereUniqueInput | DocumentLineWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutOwnedDocumentsNestedInput = {
    create?: XOR<UserCreateWithoutOwnedDocumentsInput, UserUncheckedCreateWithoutOwnedDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedDocumentsInput
    upsert?: UserUpsertWithoutOwnedDocumentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOwnedDocumentsInput, UserUpdateWithoutOwnedDocumentsInput>, UserUncheckedUpdateWithoutOwnedDocumentsInput>
  }

  export type DocumentAccessUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<DocumentAccessCreateWithoutDocumentInput, DocumentAccessUncheckedCreateWithoutDocumentInput> | DocumentAccessCreateWithoutDocumentInput[] | DocumentAccessUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentAccessCreateOrConnectWithoutDocumentInput | DocumentAccessCreateOrConnectWithoutDocumentInput[]
    upsert?: DocumentAccessUpsertWithWhereUniqueWithoutDocumentInput | DocumentAccessUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: DocumentAccessCreateManyDocumentInputEnvelope
    set?: DocumentAccessWhereUniqueInput | DocumentAccessWhereUniqueInput[]
    disconnect?: DocumentAccessWhereUniqueInput | DocumentAccessWhereUniqueInput[]
    delete?: DocumentAccessWhereUniqueInput | DocumentAccessWhereUniqueInput[]
    connect?: DocumentAccessWhereUniqueInput | DocumentAccessWhereUniqueInput[]
    update?: DocumentAccessUpdateWithWhereUniqueWithoutDocumentInput | DocumentAccessUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: DocumentAccessUpdateManyWithWhereWithoutDocumentInput | DocumentAccessUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: DocumentAccessScalarWhereInput | DocumentAccessScalarWhereInput[]
  }

  export type OperationUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<OperationCreateWithoutDocumentInput, OperationUncheckedCreateWithoutDocumentInput> | OperationCreateWithoutDocumentInput[] | OperationUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: OperationCreateOrConnectWithoutDocumentInput | OperationCreateOrConnectWithoutDocumentInput[]
    upsert?: OperationUpsertWithWhereUniqueWithoutDocumentInput | OperationUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: OperationCreateManyDocumentInputEnvelope
    set?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    disconnect?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    delete?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    connect?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    update?: OperationUpdateWithWhereUniqueWithoutDocumentInput | OperationUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: OperationUpdateManyWithWhereWithoutDocumentInput | OperationUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: OperationScalarWhereInput | OperationScalarWhereInput[]
  }

  export type UserCursorUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<UserCursorCreateWithoutDocumentInput, UserCursorUncheckedCreateWithoutDocumentInput> | UserCursorCreateWithoutDocumentInput[] | UserCursorUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: UserCursorCreateOrConnectWithoutDocumentInput | UserCursorCreateOrConnectWithoutDocumentInput[]
    upsert?: UserCursorUpsertWithWhereUniqueWithoutDocumentInput | UserCursorUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: UserCursorCreateManyDocumentInputEnvelope
    set?: UserCursorWhereUniqueInput | UserCursorWhereUniqueInput[]
    disconnect?: UserCursorWhereUniqueInput | UserCursorWhereUniqueInput[]
    delete?: UserCursorWhereUniqueInput | UserCursorWhereUniqueInput[]
    connect?: UserCursorWhereUniqueInput | UserCursorWhereUniqueInput[]
    update?: UserCursorUpdateWithWhereUniqueWithoutDocumentInput | UserCursorUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: UserCursorUpdateManyWithWhereWithoutDocumentInput | UserCursorUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: UserCursorScalarWhereInput | UserCursorScalarWhereInput[]
  }

  export type DocumentSnapshotUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<DocumentSnapshotCreateWithoutDocumentInput, DocumentSnapshotUncheckedCreateWithoutDocumentInput> | DocumentSnapshotCreateWithoutDocumentInput[] | DocumentSnapshotUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentSnapshotCreateOrConnectWithoutDocumentInput | DocumentSnapshotCreateOrConnectWithoutDocumentInput[]
    upsert?: DocumentSnapshotUpsertWithWhereUniqueWithoutDocumentInput | DocumentSnapshotUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: DocumentSnapshotCreateManyDocumentInputEnvelope
    set?: DocumentSnapshotWhereUniqueInput | DocumentSnapshotWhereUniqueInput[]
    disconnect?: DocumentSnapshotWhereUniqueInput | DocumentSnapshotWhereUniqueInput[]
    delete?: DocumentSnapshotWhereUniqueInput | DocumentSnapshotWhereUniqueInput[]
    connect?: DocumentSnapshotWhereUniqueInput | DocumentSnapshotWhereUniqueInput[]
    update?: DocumentSnapshotUpdateWithWhereUniqueWithoutDocumentInput | DocumentSnapshotUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: DocumentSnapshotUpdateManyWithWhereWithoutDocumentInput | DocumentSnapshotUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: DocumentSnapshotScalarWhereInput | DocumentSnapshotScalarWhereInput[]
  }

  export type DocumentLineUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<DocumentLineCreateWithoutDocumentInput, DocumentLineUncheckedCreateWithoutDocumentInput> | DocumentLineCreateWithoutDocumentInput[] | DocumentLineUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentLineCreateOrConnectWithoutDocumentInput | DocumentLineCreateOrConnectWithoutDocumentInput[]
    upsert?: DocumentLineUpsertWithWhereUniqueWithoutDocumentInput | DocumentLineUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: DocumentLineCreateManyDocumentInputEnvelope
    set?: DocumentLineWhereUniqueInput | DocumentLineWhereUniqueInput[]
    disconnect?: DocumentLineWhereUniqueInput | DocumentLineWhereUniqueInput[]
    delete?: DocumentLineWhereUniqueInput | DocumentLineWhereUniqueInput[]
    connect?: DocumentLineWhereUniqueInput | DocumentLineWhereUniqueInput[]
    update?: DocumentLineUpdateWithWhereUniqueWithoutDocumentInput | DocumentLineUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: DocumentLineUpdateManyWithWhereWithoutDocumentInput | DocumentLineUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: DocumentLineScalarWhereInput | DocumentLineScalarWhereInput[]
  }

  export type DocumentAccessUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<DocumentAccessCreateWithoutDocumentInput, DocumentAccessUncheckedCreateWithoutDocumentInput> | DocumentAccessCreateWithoutDocumentInput[] | DocumentAccessUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentAccessCreateOrConnectWithoutDocumentInput | DocumentAccessCreateOrConnectWithoutDocumentInput[]
    upsert?: DocumentAccessUpsertWithWhereUniqueWithoutDocumentInput | DocumentAccessUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: DocumentAccessCreateManyDocumentInputEnvelope
    set?: DocumentAccessWhereUniqueInput | DocumentAccessWhereUniqueInput[]
    disconnect?: DocumentAccessWhereUniqueInput | DocumentAccessWhereUniqueInput[]
    delete?: DocumentAccessWhereUniqueInput | DocumentAccessWhereUniqueInput[]
    connect?: DocumentAccessWhereUniqueInput | DocumentAccessWhereUniqueInput[]
    update?: DocumentAccessUpdateWithWhereUniqueWithoutDocumentInput | DocumentAccessUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: DocumentAccessUpdateManyWithWhereWithoutDocumentInput | DocumentAccessUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: DocumentAccessScalarWhereInput | DocumentAccessScalarWhereInput[]
  }

  export type OperationUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<OperationCreateWithoutDocumentInput, OperationUncheckedCreateWithoutDocumentInput> | OperationCreateWithoutDocumentInput[] | OperationUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: OperationCreateOrConnectWithoutDocumentInput | OperationCreateOrConnectWithoutDocumentInput[]
    upsert?: OperationUpsertWithWhereUniqueWithoutDocumentInput | OperationUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: OperationCreateManyDocumentInputEnvelope
    set?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    disconnect?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    delete?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    connect?: OperationWhereUniqueInput | OperationWhereUniqueInput[]
    update?: OperationUpdateWithWhereUniqueWithoutDocumentInput | OperationUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: OperationUpdateManyWithWhereWithoutDocumentInput | OperationUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: OperationScalarWhereInput | OperationScalarWhereInput[]
  }

  export type UserCursorUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<UserCursorCreateWithoutDocumentInput, UserCursorUncheckedCreateWithoutDocumentInput> | UserCursorCreateWithoutDocumentInput[] | UserCursorUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: UserCursorCreateOrConnectWithoutDocumentInput | UserCursorCreateOrConnectWithoutDocumentInput[]
    upsert?: UserCursorUpsertWithWhereUniqueWithoutDocumentInput | UserCursorUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: UserCursorCreateManyDocumentInputEnvelope
    set?: UserCursorWhereUniqueInput | UserCursorWhereUniqueInput[]
    disconnect?: UserCursorWhereUniqueInput | UserCursorWhereUniqueInput[]
    delete?: UserCursorWhereUniqueInput | UserCursorWhereUniqueInput[]
    connect?: UserCursorWhereUniqueInput | UserCursorWhereUniqueInput[]
    update?: UserCursorUpdateWithWhereUniqueWithoutDocumentInput | UserCursorUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: UserCursorUpdateManyWithWhereWithoutDocumentInput | UserCursorUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: UserCursorScalarWhereInput | UserCursorScalarWhereInput[]
  }

  export type DocumentSnapshotUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<DocumentSnapshotCreateWithoutDocumentInput, DocumentSnapshotUncheckedCreateWithoutDocumentInput> | DocumentSnapshotCreateWithoutDocumentInput[] | DocumentSnapshotUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentSnapshotCreateOrConnectWithoutDocumentInput | DocumentSnapshotCreateOrConnectWithoutDocumentInput[]
    upsert?: DocumentSnapshotUpsertWithWhereUniqueWithoutDocumentInput | DocumentSnapshotUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: DocumentSnapshotCreateManyDocumentInputEnvelope
    set?: DocumentSnapshotWhereUniqueInput | DocumentSnapshotWhereUniqueInput[]
    disconnect?: DocumentSnapshotWhereUniqueInput | DocumentSnapshotWhereUniqueInput[]
    delete?: DocumentSnapshotWhereUniqueInput | DocumentSnapshotWhereUniqueInput[]
    connect?: DocumentSnapshotWhereUniqueInput | DocumentSnapshotWhereUniqueInput[]
    update?: DocumentSnapshotUpdateWithWhereUniqueWithoutDocumentInput | DocumentSnapshotUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: DocumentSnapshotUpdateManyWithWhereWithoutDocumentInput | DocumentSnapshotUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: DocumentSnapshotScalarWhereInput | DocumentSnapshotScalarWhereInput[]
  }

  export type DocumentLineUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<DocumentLineCreateWithoutDocumentInput, DocumentLineUncheckedCreateWithoutDocumentInput> | DocumentLineCreateWithoutDocumentInput[] | DocumentLineUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentLineCreateOrConnectWithoutDocumentInput | DocumentLineCreateOrConnectWithoutDocumentInput[]
    upsert?: DocumentLineUpsertWithWhereUniqueWithoutDocumentInput | DocumentLineUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: DocumentLineCreateManyDocumentInputEnvelope
    set?: DocumentLineWhereUniqueInput | DocumentLineWhereUniqueInput[]
    disconnect?: DocumentLineWhereUniqueInput | DocumentLineWhereUniqueInput[]
    delete?: DocumentLineWhereUniqueInput | DocumentLineWhereUniqueInput[]
    connect?: DocumentLineWhereUniqueInput | DocumentLineWhereUniqueInput[]
    update?: DocumentLineUpdateWithWhereUniqueWithoutDocumentInput | DocumentLineUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: DocumentLineUpdateManyWithWhereWithoutDocumentInput | DocumentLineUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: DocumentLineScalarWhereInput | DocumentLineScalarWhereInput[]
  }

  export type DocumentCreateNestedOneWithoutDocumentAccessInput = {
    create?: XOR<DocumentCreateWithoutDocumentAccessInput, DocumentUncheckedCreateWithoutDocumentAccessInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutDocumentAccessInput
    connect?: DocumentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutDocumentAccessInput = {
    create?: XOR<UserCreateWithoutDocumentAccessInput, UserUncheckedCreateWithoutDocumentAccessInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentAccessInput
    connect?: UserWhereUniqueInput
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DocumentUpdateOneRequiredWithoutDocumentAccessNestedInput = {
    create?: XOR<DocumentCreateWithoutDocumentAccessInput, DocumentUncheckedCreateWithoutDocumentAccessInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutDocumentAccessInput
    upsert?: DocumentUpsertWithoutDocumentAccessInput
    connect?: DocumentWhereUniqueInput
    update?: XOR<XOR<DocumentUpdateToOneWithWhereWithoutDocumentAccessInput, DocumentUpdateWithoutDocumentAccessInput>, DocumentUncheckedUpdateWithoutDocumentAccessInput>
  }

  export type UserUpdateOneRequiredWithoutDocumentAccessNestedInput = {
    create?: XOR<UserCreateWithoutDocumentAccessInput, UserUncheckedCreateWithoutDocumentAccessInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentAccessInput
    upsert?: UserUpsertWithoutDocumentAccessInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDocumentAccessInput, UserUpdateWithoutDocumentAccessInput>, UserUncheckedUpdateWithoutDocumentAccessInput>
  }

  export type DocumentCreateNestedOneWithoutOperationsInput = {
    create?: XOR<DocumentCreateWithoutOperationsInput, DocumentUncheckedCreateWithoutOperationsInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutOperationsInput
    connect?: DocumentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOperationsInput = {
    create?: XOR<UserCreateWithoutOperationsInput, UserUncheckedCreateWithoutOperationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOperationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumOpTypeFieldUpdateOperationsInput = {
    set?: $Enums.OpType
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DocumentUpdateOneRequiredWithoutOperationsNestedInput = {
    create?: XOR<DocumentCreateWithoutOperationsInput, DocumentUncheckedCreateWithoutOperationsInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutOperationsInput
    upsert?: DocumentUpsertWithoutOperationsInput
    connect?: DocumentWhereUniqueInput
    update?: XOR<XOR<DocumentUpdateToOneWithWhereWithoutOperationsInput, DocumentUpdateWithoutOperationsInput>, DocumentUncheckedUpdateWithoutOperationsInput>
  }

  export type UserUpdateOneRequiredWithoutOperationsNestedInput = {
    create?: XOR<UserCreateWithoutOperationsInput, UserUncheckedCreateWithoutOperationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOperationsInput
    upsert?: UserUpsertWithoutOperationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOperationsInput, UserUpdateWithoutOperationsInput>, UserUncheckedUpdateWithoutOperationsInput>
  }

  export type DocumentCreateNestedOneWithoutCursorsInput = {
    create?: XOR<DocumentCreateWithoutCursorsInput, DocumentUncheckedCreateWithoutCursorsInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutCursorsInput
    connect?: DocumentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCursorsInput = {
    create?: XOR<UserCreateWithoutCursorsInput, UserUncheckedCreateWithoutCursorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCursorsInput
    connect?: UserWhereUniqueInput
  }

  export type DocumentUpdateOneRequiredWithoutCursorsNestedInput = {
    create?: XOR<DocumentCreateWithoutCursorsInput, DocumentUncheckedCreateWithoutCursorsInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutCursorsInput
    upsert?: DocumentUpsertWithoutCursorsInput
    connect?: DocumentWhereUniqueInput
    update?: XOR<XOR<DocumentUpdateToOneWithWhereWithoutCursorsInput, DocumentUpdateWithoutCursorsInput>, DocumentUncheckedUpdateWithoutCursorsInput>
  }

  export type UserUpdateOneRequiredWithoutCursorsNestedInput = {
    create?: XOR<UserCreateWithoutCursorsInput, UserUncheckedCreateWithoutCursorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCursorsInput
    upsert?: UserUpsertWithoutCursorsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCursorsInput, UserUpdateWithoutCursorsInput>, UserUncheckedUpdateWithoutCursorsInput>
  }

  export type UserCreateNestedOneWithoutPresenceInput = {
    create?: XOR<UserCreateWithoutPresenceInput, UserUncheckedCreateWithoutPresenceInput>
    connectOrCreate?: UserCreateOrConnectWithoutPresenceInput
    connect?: UserWhereUniqueInput
  }

  export type EnumPresenceStatusFieldUpdateOperationsInput = {
    set?: $Enums.PresenceStatus
  }

  export type UserUpdateOneRequiredWithoutPresenceNestedInput = {
    create?: XOR<UserCreateWithoutPresenceInput, UserUncheckedCreateWithoutPresenceInput>
    connectOrCreate?: UserCreateOrConnectWithoutPresenceInput
    upsert?: UserUpsertWithoutPresenceInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPresenceInput, UserUpdateWithoutPresenceInput>, UserUncheckedUpdateWithoutPresenceInput>
  }

  export type DocumentCreateNestedOneWithoutSnapshotsInput = {
    create?: XOR<DocumentCreateWithoutSnapshotsInput, DocumentUncheckedCreateWithoutSnapshotsInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutSnapshotsInput
    connect?: DocumentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutDocumentSnapshotsInput = {
    create?: XOR<UserCreateWithoutDocumentSnapshotsInput, UserUncheckedCreateWithoutDocumentSnapshotsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentSnapshotsInput
    connect?: UserWhereUniqueInput
  }

  export type DocumentUpdateOneRequiredWithoutSnapshotsNestedInput = {
    create?: XOR<DocumentCreateWithoutSnapshotsInput, DocumentUncheckedCreateWithoutSnapshotsInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutSnapshotsInput
    upsert?: DocumentUpsertWithoutSnapshotsInput
    connect?: DocumentWhereUniqueInput
    update?: XOR<XOR<DocumentUpdateToOneWithWhereWithoutSnapshotsInput, DocumentUpdateWithoutSnapshotsInput>, DocumentUncheckedUpdateWithoutSnapshotsInput>
  }

  export type UserUpdateOneRequiredWithoutDocumentSnapshotsNestedInput = {
    create?: XOR<UserCreateWithoutDocumentSnapshotsInput, UserUncheckedCreateWithoutDocumentSnapshotsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentSnapshotsInput
    upsert?: UserUpsertWithoutDocumentSnapshotsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDocumentSnapshotsInput, UserUpdateWithoutDocumentSnapshotsInput>, UserUncheckedUpdateWithoutDocumentSnapshotsInput>
  }

  export type DocumentCreateNestedOneWithoutLinesInput = {
    create?: XOR<DocumentCreateWithoutLinesInput, DocumentUncheckedCreateWithoutLinesInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutLinesInput
    connect?: DocumentWhereUniqueInput
  }

  export type LineEditCreateNestedManyWithoutLineInput = {
    create?: XOR<LineEditCreateWithoutLineInput, LineEditUncheckedCreateWithoutLineInput> | LineEditCreateWithoutLineInput[] | LineEditUncheckedCreateWithoutLineInput[]
    connectOrCreate?: LineEditCreateOrConnectWithoutLineInput | LineEditCreateOrConnectWithoutLineInput[]
    createMany?: LineEditCreateManyLineInputEnvelope
    connect?: LineEditWhereUniqueInput | LineEditWhereUniqueInput[]
  }

  export type LineEditUncheckedCreateNestedManyWithoutLineInput = {
    create?: XOR<LineEditCreateWithoutLineInput, LineEditUncheckedCreateWithoutLineInput> | LineEditCreateWithoutLineInput[] | LineEditUncheckedCreateWithoutLineInput[]
    connectOrCreate?: LineEditCreateOrConnectWithoutLineInput | LineEditCreateOrConnectWithoutLineInput[]
    createMany?: LineEditCreateManyLineInputEnvelope
    connect?: LineEditWhereUniqueInput | LineEditWhereUniqueInput[]
  }

  export type DocumentUpdateOneRequiredWithoutLinesNestedInput = {
    create?: XOR<DocumentCreateWithoutLinesInput, DocumentUncheckedCreateWithoutLinesInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutLinesInput
    upsert?: DocumentUpsertWithoutLinesInput
    connect?: DocumentWhereUniqueInput
    update?: XOR<XOR<DocumentUpdateToOneWithWhereWithoutLinesInput, DocumentUpdateWithoutLinesInput>, DocumentUncheckedUpdateWithoutLinesInput>
  }

  export type LineEditUpdateManyWithoutLineNestedInput = {
    create?: XOR<LineEditCreateWithoutLineInput, LineEditUncheckedCreateWithoutLineInput> | LineEditCreateWithoutLineInput[] | LineEditUncheckedCreateWithoutLineInput[]
    connectOrCreate?: LineEditCreateOrConnectWithoutLineInput | LineEditCreateOrConnectWithoutLineInput[]
    upsert?: LineEditUpsertWithWhereUniqueWithoutLineInput | LineEditUpsertWithWhereUniqueWithoutLineInput[]
    createMany?: LineEditCreateManyLineInputEnvelope
    set?: LineEditWhereUniqueInput | LineEditWhereUniqueInput[]
    disconnect?: LineEditWhereUniqueInput | LineEditWhereUniqueInput[]
    delete?: LineEditWhereUniqueInput | LineEditWhereUniqueInput[]
    connect?: LineEditWhereUniqueInput | LineEditWhereUniqueInput[]
    update?: LineEditUpdateWithWhereUniqueWithoutLineInput | LineEditUpdateWithWhereUniqueWithoutLineInput[]
    updateMany?: LineEditUpdateManyWithWhereWithoutLineInput | LineEditUpdateManyWithWhereWithoutLineInput[]
    deleteMany?: LineEditScalarWhereInput | LineEditScalarWhereInput[]
  }

  export type LineEditUncheckedUpdateManyWithoutLineNestedInput = {
    create?: XOR<LineEditCreateWithoutLineInput, LineEditUncheckedCreateWithoutLineInput> | LineEditCreateWithoutLineInput[] | LineEditUncheckedCreateWithoutLineInput[]
    connectOrCreate?: LineEditCreateOrConnectWithoutLineInput | LineEditCreateOrConnectWithoutLineInput[]
    upsert?: LineEditUpsertWithWhereUniqueWithoutLineInput | LineEditUpsertWithWhereUniqueWithoutLineInput[]
    createMany?: LineEditCreateManyLineInputEnvelope
    set?: LineEditWhereUniqueInput | LineEditWhereUniqueInput[]
    disconnect?: LineEditWhereUniqueInput | LineEditWhereUniqueInput[]
    delete?: LineEditWhereUniqueInput | LineEditWhereUniqueInput[]
    connect?: LineEditWhereUniqueInput | LineEditWhereUniqueInput[]
    update?: LineEditUpdateWithWhereUniqueWithoutLineInput | LineEditUpdateWithWhereUniqueWithoutLineInput[]
    updateMany?: LineEditUpdateManyWithWhereWithoutLineInput | LineEditUpdateManyWithWhereWithoutLineInput[]
    deleteMany?: LineEditScalarWhereInput | LineEditScalarWhereInput[]
  }

  export type DocumentLineCreateNestedOneWithoutLineEditsInput = {
    create?: XOR<DocumentLineCreateWithoutLineEditsInput, DocumentLineUncheckedCreateWithoutLineEditsInput>
    connectOrCreate?: DocumentLineCreateOrConnectWithoutLineEditsInput
    connect?: DocumentLineWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLineEditsInput = {
    create?: XOR<UserCreateWithoutLineEditsInput, UserUncheckedCreateWithoutLineEditsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLineEditsInput
    connect?: UserWhereUniqueInput
  }

  export type DocumentLineUpdateOneRequiredWithoutLineEditsNestedInput = {
    create?: XOR<DocumentLineCreateWithoutLineEditsInput, DocumentLineUncheckedCreateWithoutLineEditsInput>
    connectOrCreate?: DocumentLineCreateOrConnectWithoutLineEditsInput
    upsert?: DocumentLineUpsertWithoutLineEditsInput
    connect?: DocumentLineWhereUniqueInput
    update?: XOR<XOR<DocumentLineUpdateToOneWithWhereWithoutLineEditsInput, DocumentLineUpdateWithoutLineEditsInput>, DocumentLineUncheckedUpdateWithoutLineEditsInput>
  }

  export type UserUpdateOneRequiredWithoutLineEditsNestedInput = {
    create?: XOR<UserCreateWithoutLineEditsInput, UserUncheckedCreateWithoutLineEditsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLineEditsInput
    upsert?: UserUpsertWithoutLineEditsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLineEditsInput, UserUpdateWithoutLineEditsInput>, UserUncheckedUpdateWithoutLineEditsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedEnumOpTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.OpType | EnumOpTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OpType[] | ListEnumOpTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OpType[] | ListEnumOpTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOpTypeFilter<$PrismaModel> | $Enums.OpType
  }

  export type NestedEnumOpTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OpType | EnumOpTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OpType[] | ListEnumOpTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OpType[] | ListEnumOpTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOpTypeWithAggregatesFilter<$PrismaModel> | $Enums.OpType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOpTypeFilter<$PrismaModel>
    _max?: NestedEnumOpTypeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumPresenceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PresenceStatus | EnumPresenceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PresenceStatus[] | ListEnumPresenceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PresenceStatus[] | ListEnumPresenceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPresenceStatusFilter<$PrismaModel> | $Enums.PresenceStatus
  }

  export type NestedEnumPresenceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PresenceStatus | EnumPresenceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PresenceStatus[] | ListEnumPresenceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PresenceStatus[] | ListEnumPresenceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPresenceStatusWithAggregatesFilter<$PrismaModel> | $Enums.PresenceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPresenceStatusFilter<$PrismaModel>
    _max?: NestedEnumPresenceStatusFilter<$PrismaModel>
  }

  export type DocumentCreateWithoutOwnerInput = {
    id?: string
    title: string
    content?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    documentAccess?: DocumentAccessCreateNestedManyWithoutDocumentInput
    operations?: OperationCreateNestedManyWithoutDocumentInput
    cursors?: UserCursorCreateNestedManyWithoutDocumentInput
    snapshots?: DocumentSnapshotCreateNestedManyWithoutDocumentInput
    lines?: DocumentLineCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateWithoutOwnerInput = {
    id?: string
    title: string
    content?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    documentAccess?: DocumentAccessUncheckedCreateNestedManyWithoutDocumentInput
    operations?: OperationUncheckedCreateNestedManyWithoutDocumentInput
    cursors?: UserCursorUncheckedCreateNestedManyWithoutDocumentInput
    snapshots?: DocumentSnapshotUncheckedCreateNestedManyWithoutDocumentInput
    lines?: DocumentLineUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentCreateOrConnectWithoutOwnerInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutOwnerInput, DocumentUncheckedCreateWithoutOwnerInput>
  }

  export type DocumentCreateManyOwnerInputEnvelope = {
    data: DocumentCreateManyOwnerInput | DocumentCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type DocumentAccessCreateWithoutUserInput = {
    id?: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    document: DocumentCreateNestedOneWithoutDocumentAccessInput
  }

  export type DocumentAccessUncheckedCreateWithoutUserInput = {
    id?: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    documentId: string
  }

  export type DocumentAccessCreateOrConnectWithoutUserInput = {
    where: DocumentAccessWhereUniqueInput
    create: XOR<DocumentAccessCreateWithoutUserInput, DocumentAccessUncheckedCreateWithoutUserInput>
  }

  export type DocumentAccessCreateManyUserInputEnvelope = {
    data: DocumentAccessCreateManyUserInput | DocumentAccessCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OperationCreateWithoutUserInput = {
    id?: string
    type: $Enums.OpType
    position: number
    length?: number | null
    content?: string | null
    createdAt?: Date | string
    document: DocumentCreateNestedOneWithoutOperationsInput
  }

  export type OperationUncheckedCreateWithoutUserInput = {
    id?: string
    type: $Enums.OpType
    position: number
    length?: number | null
    content?: string | null
    createdAt?: Date | string
    documentId: string
  }

  export type OperationCreateOrConnectWithoutUserInput = {
    where: OperationWhereUniqueInput
    create: XOR<OperationCreateWithoutUserInput, OperationUncheckedCreateWithoutUserInput>
  }

  export type OperationCreateManyUserInputEnvelope = {
    data: OperationCreateManyUserInput | OperationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserCursorCreateWithoutUserInput = {
    id?: string
    cursorPos: number
    selectionStart?: number | null
    selectionEnd?: number | null
    color?: string
    lastActive?: Date | string
    document: DocumentCreateNestedOneWithoutCursorsInput
  }

  export type UserCursorUncheckedCreateWithoutUserInput = {
    id?: string
    cursorPos: number
    selectionStart?: number | null
    selectionEnd?: number | null
    color?: string
    lastActive?: Date | string
    documentId: string
  }

  export type UserCursorCreateOrConnectWithoutUserInput = {
    where: UserCursorWhereUniqueInput
    create: XOR<UserCursorCreateWithoutUserInput, UserCursorUncheckedCreateWithoutUserInput>
  }

  export type UserCursorCreateManyUserInputEnvelope = {
    data: UserCursorCreateManyUserInput | UserCursorCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserPresenceCreateWithoutUserInput = {
    id?: string
    status?: $Enums.PresenceStatus
    lastActive?: Date | string
  }

  export type UserPresenceUncheckedCreateWithoutUserInput = {
    id?: string
    status?: $Enums.PresenceStatus
    lastActive?: Date | string
  }

  export type UserPresenceCreateOrConnectWithoutUserInput = {
    where: UserPresenceWhereUniqueInput
    create: XOR<UserPresenceCreateWithoutUserInput, UserPresenceUncheckedCreateWithoutUserInput>
  }

  export type DocumentSnapshotCreateWithoutCreatedByInput = {
    id?: string
    content: string
    createdAt?: Date | string
    document: DocumentCreateNestedOneWithoutSnapshotsInput
  }

  export type DocumentSnapshotUncheckedCreateWithoutCreatedByInput = {
    id?: string
    content: string
    createdAt?: Date | string
    documentId: string
  }

  export type DocumentSnapshotCreateOrConnectWithoutCreatedByInput = {
    where: DocumentSnapshotWhereUniqueInput
    create: XOR<DocumentSnapshotCreateWithoutCreatedByInput, DocumentSnapshotUncheckedCreateWithoutCreatedByInput>
  }

  export type DocumentSnapshotCreateManyCreatedByInputEnvelope = {
    data: DocumentSnapshotCreateManyCreatedByInput | DocumentSnapshotCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type LineEditCreateWithoutUserInput = {
    id?: string
    editedAt?: Date | string
    line: DocumentLineCreateNestedOneWithoutLineEditsInput
  }

  export type LineEditUncheckedCreateWithoutUserInput = {
    id?: string
    editedAt?: Date | string
    lineId: string
  }

  export type LineEditCreateOrConnectWithoutUserInput = {
    where: LineEditWhereUniqueInput
    create: XOR<LineEditCreateWithoutUserInput, LineEditUncheckedCreateWithoutUserInput>
  }

  export type LineEditCreateManyUserInputEnvelope = {
    data: LineEditCreateManyUserInput | LineEditCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DocumentUpsertWithWhereUniqueWithoutOwnerInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutOwnerInput, DocumentUncheckedUpdateWithoutOwnerInput>
    create: XOR<DocumentCreateWithoutOwnerInput, DocumentUncheckedCreateWithoutOwnerInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutOwnerInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutOwnerInput, DocumentUncheckedUpdateWithoutOwnerInput>
  }

  export type DocumentUpdateManyWithWhereWithoutOwnerInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutOwnerInput>
  }

  export type DocumentScalarWhereInput = {
    AND?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    OR?: DocumentScalarWhereInput[]
    NOT?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    id?: StringFilter<"Document"> | string
    title?: StringFilter<"Document"> | string
    content?: StringNullableFilter<"Document"> | string | null
    isPublic?: BoolFilter<"Document"> | boolean
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    ownerId?: StringFilter<"Document"> | string
  }

  export type DocumentAccessUpsertWithWhereUniqueWithoutUserInput = {
    where: DocumentAccessWhereUniqueInput
    update: XOR<DocumentAccessUpdateWithoutUserInput, DocumentAccessUncheckedUpdateWithoutUserInput>
    create: XOR<DocumentAccessCreateWithoutUserInput, DocumentAccessUncheckedCreateWithoutUserInput>
  }

  export type DocumentAccessUpdateWithWhereUniqueWithoutUserInput = {
    where: DocumentAccessWhereUniqueInput
    data: XOR<DocumentAccessUpdateWithoutUserInput, DocumentAccessUncheckedUpdateWithoutUserInput>
  }

  export type DocumentAccessUpdateManyWithWhereWithoutUserInput = {
    where: DocumentAccessScalarWhereInput
    data: XOR<DocumentAccessUpdateManyMutationInput, DocumentAccessUncheckedUpdateManyWithoutUserInput>
  }

  export type DocumentAccessScalarWhereInput = {
    AND?: DocumentAccessScalarWhereInput | DocumentAccessScalarWhereInput[]
    OR?: DocumentAccessScalarWhereInput[]
    NOT?: DocumentAccessScalarWhereInput | DocumentAccessScalarWhereInput[]
    id?: StringFilter<"DocumentAccess"> | string
    role?: EnumRoleFilter<"DocumentAccess"> | $Enums.Role
    createdAt?: DateTimeFilter<"DocumentAccess"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentAccess"> | Date | string
    documentId?: StringFilter<"DocumentAccess"> | string
    userId?: StringFilter<"DocumentAccess"> | string
  }

  export type OperationUpsertWithWhereUniqueWithoutUserInput = {
    where: OperationWhereUniqueInput
    update: XOR<OperationUpdateWithoutUserInput, OperationUncheckedUpdateWithoutUserInput>
    create: XOR<OperationCreateWithoutUserInput, OperationUncheckedCreateWithoutUserInput>
  }

  export type OperationUpdateWithWhereUniqueWithoutUserInput = {
    where: OperationWhereUniqueInput
    data: XOR<OperationUpdateWithoutUserInput, OperationUncheckedUpdateWithoutUserInput>
  }

  export type OperationUpdateManyWithWhereWithoutUserInput = {
    where: OperationScalarWhereInput
    data: XOR<OperationUpdateManyMutationInput, OperationUncheckedUpdateManyWithoutUserInput>
  }

  export type OperationScalarWhereInput = {
    AND?: OperationScalarWhereInput | OperationScalarWhereInput[]
    OR?: OperationScalarWhereInput[]
    NOT?: OperationScalarWhereInput | OperationScalarWhereInput[]
    id?: StringFilter<"Operation"> | string
    type?: EnumOpTypeFilter<"Operation"> | $Enums.OpType
    position?: IntFilter<"Operation"> | number
    length?: IntNullableFilter<"Operation"> | number | null
    content?: StringNullableFilter<"Operation"> | string | null
    createdAt?: DateTimeFilter<"Operation"> | Date | string
    documentId?: StringFilter<"Operation"> | string
    userId?: StringFilter<"Operation"> | string
  }

  export type UserCursorUpsertWithWhereUniqueWithoutUserInput = {
    where: UserCursorWhereUniqueInput
    update: XOR<UserCursorUpdateWithoutUserInput, UserCursorUncheckedUpdateWithoutUserInput>
    create: XOR<UserCursorCreateWithoutUserInput, UserCursorUncheckedCreateWithoutUserInput>
  }

  export type UserCursorUpdateWithWhereUniqueWithoutUserInput = {
    where: UserCursorWhereUniqueInput
    data: XOR<UserCursorUpdateWithoutUserInput, UserCursorUncheckedUpdateWithoutUserInput>
  }

  export type UserCursorUpdateManyWithWhereWithoutUserInput = {
    where: UserCursorScalarWhereInput
    data: XOR<UserCursorUpdateManyMutationInput, UserCursorUncheckedUpdateManyWithoutUserInput>
  }

  export type UserCursorScalarWhereInput = {
    AND?: UserCursorScalarWhereInput | UserCursorScalarWhereInput[]
    OR?: UserCursorScalarWhereInput[]
    NOT?: UserCursorScalarWhereInput | UserCursorScalarWhereInput[]
    id?: StringFilter<"UserCursor"> | string
    cursorPos?: IntFilter<"UserCursor"> | number
    selectionStart?: IntNullableFilter<"UserCursor"> | number | null
    selectionEnd?: IntNullableFilter<"UserCursor"> | number | null
    color?: StringFilter<"UserCursor"> | string
    lastActive?: DateTimeFilter<"UserCursor"> | Date | string
    documentId?: StringFilter<"UserCursor"> | string
    userId?: StringFilter<"UserCursor"> | string
  }

  export type UserPresenceUpsertWithoutUserInput = {
    update: XOR<UserPresenceUpdateWithoutUserInput, UserPresenceUncheckedUpdateWithoutUserInput>
    create: XOR<UserPresenceCreateWithoutUserInput, UserPresenceUncheckedCreateWithoutUserInput>
    where?: UserPresenceWhereInput
  }

  export type UserPresenceUpdateToOneWithWhereWithoutUserInput = {
    where?: UserPresenceWhereInput
    data: XOR<UserPresenceUpdateWithoutUserInput, UserPresenceUncheckedUpdateWithoutUserInput>
  }

  export type UserPresenceUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumPresenceStatusFieldUpdateOperationsInput | $Enums.PresenceStatus
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPresenceUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumPresenceStatusFieldUpdateOperationsInput | $Enums.PresenceStatus
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentSnapshotUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: DocumentSnapshotWhereUniqueInput
    update: XOR<DocumentSnapshotUpdateWithoutCreatedByInput, DocumentSnapshotUncheckedUpdateWithoutCreatedByInput>
    create: XOR<DocumentSnapshotCreateWithoutCreatedByInput, DocumentSnapshotUncheckedCreateWithoutCreatedByInput>
  }

  export type DocumentSnapshotUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: DocumentSnapshotWhereUniqueInput
    data: XOR<DocumentSnapshotUpdateWithoutCreatedByInput, DocumentSnapshotUncheckedUpdateWithoutCreatedByInput>
  }

  export type DocumentSnapshotUpdateManyWithWhereWithoutCreatedByInput = {
    where: DocumentSnapshotScalarWhereInput
    data: XOR<DocumentSnapshotUpdateManyMutationInput, DocumentSnapshotUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type DocumentSnapshotScalarWhereInput = {
    AND?: DocumentSnapshotScalarWhereInput | DocumentSnapshotScalarWhereInput[]
    OR?: DocumentSnapshotScalarWhereInput[]
    NOT?: DocumentSnapshotScalarWhereInput | DocumentSnapshotScalarWhereInput[]
    id?: StringFilter<"DocumentSnapshot"> | string
    content?: StringFilter<"DocumentSnapshot"> | string
    createdAt?: DateTimeFilter<"DocumentSnapshot"> | Date | string
    documentId?: StringFilter<"DocumentSnapshot"> | string
    createdById?: StringFilter<"DocumentSnapshot"> | string
  }

  export type LineEditUpsertWithWhereUniqueWithoutUserInput = {
    where: LineEditWhereUniqueInput
    update: XOR<LineEditUpdateWithoutUserInput, LineEditUncheckedUpdateWithoutUserInput>
    create: XOR<LineEditCreateWithoutUserInput, LineEditUncheckedCreateWithoutUserInput>
  }

  export type LineEditUpdateWithWhereUniqueWithoutUserInput = {
    where: LineEditWhereUniqueInput
    data: XOR<LineEditUpdateWithoutUserInput, LineEditUncheckedUpdateWithoutUserInput>
  }

  export type LineEditUpdateManyWithWhereWithoutUserInput = {
    where: LineEditScalarWhereInput
    data: XOR<LineEditUpdateManyMutationInput, LineEditUncheckedUpdateManyWithoutUserInput>
  }

  export type LineEditScalarWhereInput = {
    AND?: LineEditScalarWhereInput | LineEditScalarWhereInput[]
    OR?: LineEditScalarWhereInput[]
    NOT?: LineEditScalarWhereInput | LineEditScalarWhereInput[]
    id?: StringFilter<"LineEdit"> | string
    editedAt?: DateTimeFilter<"LineEdit"> | Date | string
    lineId?: StringFilter<"LineEdit"> | string
    userId?: StringFilter<"LineEdit"> | string
  }

  export type UserCreateWithoutOwnedDocumentsInput = {
    id?: string
    email: string
    name?: string | null
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documentAccess?: DocumentAccessCreateNestedManyWithoutUserInput
    operations?: OperationCreateNestedManyWithoutUserInput
    cursors?: UserCursorCreateNestedManyWithoutUserInput
    presence?: UserPresenceCreateNestedOneWithoutUserInput
    documentSnapshots?: DocumentSnapshotCreateNestedManyWithoutCreatedByInput
    lineEdits?: LineEditCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOwnedDocumentsInput = {
    id?: string
    email: string
    name?: string | null
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documentAccess?: DocumentAccessUncheckedCreateNestedManyWithoutUserInput
    operations?: OperationUncheckedCreateNestedManyWithoutUserInput
    cursors?: UserCursorUncheckedCreateNestedManyWithoutUserInput
    presence?: UserPresenceUncheckedCreateNestedOneWithoutUserInput
    documentSnapshots?: DocumentSnapshotUncheckedCreateNestedManyWithoutCreatedByInput
    lineEdits?: LineEditUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOwnedDocumentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOwnedDocumentsInput, UserUncheckedCreateWithoutOwnedDocumentsInput>
  }

  export type DocumentAccessCreateWithoutDocumentInput = {
    id?: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDocumentAccessInput
  }

  export type DocumentAccessUncheckedCreateWithoutDocumentInput = {
    id?: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type DocumentAccessCreateOrConnectWithoutDocumentInput = {
    where: DocumentAccessWhereUniqueInput
    create: XOR<DocumentAccessCreateWithoutDocumentInput, DocumentAccessUncheckedCreateWithoutDocumentInput>
  }

  export type DocumentAccessCreateManyDocumentInputEnvelope = {
    data: DocumentAccessCreateManyDocumentInput | DocumentAccessCreateManyDocumentInput[]
    skipDuplicates?: boolean
  }

  export type OperationCreateWithoutDocumentInput = {
    id?: string
    type: $Enums.OpType
    position: number
    length?: number | null
    content?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutOperationsInput
  }

  export type OperationUncheckedCreateWithoutDocumentInput = {
    id?: string
    type: $Enums.OpType
    position: number
    length?: number | null
    content?: string | null
    createdAt?: Date | string
    userId: string
  }

  export type OperationCreateOrConnectWithoutDocumentInput = {
    where: OperationWhereUniqueInput
    create: XOR<OperationCreateWithoutDocumentInput, OperationUncheckedCreateWithoutDocumentInput>
  }

  export type OperationCreateManyDocumentInputEnvelope = {
    data: OperationCreateManyDocumentInput | OperationCreateManyDocumentInput[]
    skipDuplicates?: boolean
  }

  export type UserCursorCreateWithoutDocumentInput = {
    id?: string
    cursorPos: number
    selectionStart?: number | null
    selectionEnd?: number | null
    color?: string
    lastActive?: Date | string
    user: UserCreateNestedOneWithoutCursorsInput
  }

  export type UserCursorUncheckedCreateWithoutDocumentInput = {
    id?: string
    cursorPos: number
    selectionStart?: number | null
    selectionEnd?: number | null
    color?: string
    lastActive?: Date | string
    userId: string
  }

  export type UserCursorCreateOrConnectWithoutDocumentInput = {
    where: UserCursorWhereUniqueInput
    create: XOR<UserCursorCreateWithoutDocumentInput, UserCursorUncheckedCreateWithoutDocumentInput>
  }

  export type UserCursorCreateManyDocumentInputEnvelope = {
    data: UserCursorCreateManyDocumentInput | UserCursorCreateManyDocumentInput[]
    skipDuplicates?: boolean
  }

  export type DocumentSnapshotCreateWithoutDocumentInput = {
    id?: string
    content: string
    createdAt?: Date | string
    createdBy: UserCreateNestedOneWithoutDocumentSnapshotsInput
  }

  export type DocumentSnapshotUncheckedCreateWithoutDocumentInput = {
    id?: string
    content: string
    createdAt?: Date | string
    createdById: string
  }

  export type DocumentSnapshotCreateOrConnectWithoutDocumentInput = {
    where: DocumentSnapshotWhereUniqueInput
    create: XOR<DocumentSnapshotCreateWithoutDocumentInput, DocumentSnapshotUncheckedCreateWithoutDocumentInput>
  }

  export type DocumentSnapshotCreateManyDocumentInputEnvelope = {
    data: DocumentSnapshotCreateManyDocumentInput | DocumentSnapshotCreateManyDocumentInput[]
    skipDuplicates?: boolean
  }

  export type DocumentLineCreateWithoutDocumentInput = {
    id?: string
    lineNumber: number
    content: string
    createdAt?: Date | string
    lineEdits?: LineEditCreateNestedManyWithoutLineInput
  }

  export type DocumentLineUncheckedCreateWithoutDocumentInput = {
    id?: string
    lineNumber: number
    content: string
    createdAt?: Date | string
    lineEdits?: LineEditUncheckedCreateNestedManyWithoutLineInput
  }

  export type DocumentLineCreateOrConnectWithoutDocumentInput = {
    where: DocumentLineWhereUniqueInput
    create: XOR<DocumentLineCreateWithoutDocumentInput, DocumentLineUncheckedCreateWithoutDocumentInput>
  }

  export type DocumentLineCreateManyDocumentInputEnvelope = {
    data: DocumentLineCreateManyDocumentInput | DocumentLineCreateManyDocumentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutOwnedDocumentsInput = {
    update: XOR<UserUpdateWithoutOwnedDocumentsInput, UserUncheckedUpdateWithoutOwnedDocumentsInput>
    create: XOR<UserCreateWithoutOwnedDocumentsInput, UserUncheckedCreateWithoutOwnedDocumentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOwnedDocumentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOwnedDocumentsInput, UserUncheckedUpdateWithoutOwnedDocumentsInput>
  }

  export type UserUpdateWithoutOwnedDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentAccess?: DocumentAccessUpdateManyWithoutUserNestedInput
    operations?: OperationUpdateManyWithoutUserNestedInput
    cursors?: UserCursorUpdateManyWithoutUserNestedInput
    presence?: UserPresenceUpdateOneWithoutUserNestedInput
    documentSnapshots?: DocumentSnapshotUpdateManyWithoutCreatedByNestedInput
    lineEdits?: LineEditUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOwnedDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentAccess?: DocumentAccessUncheckedUpdateManyWithoutUserNestedInput
    operations?: OperationUncheckedUpdateManyWithoutUserNestedInput
    cursors?: UserCursorUncheckedUpdateManyWithoutUserNestedInput
    presence?: UserPresenceUncheckedUpdateOneWithoutUserNestedInput
    documentSnapshots?: DocumentSnapshotUncheckedUpdateManyWithoutCreatedByNestedInput
    lineEdits?: LineEditUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DocumentAccessUpsertWithWhereUniqueWithoutDocumentInput = {
    where: DocumentAccessWhereUniqueInput
    update: XOR<DocumentAccessUpdateWithoutDocumentInput, DocumentAccessUncheckedUpdateWithoutDocumentInput>
    create: XOR<DocumentAccessCreateWithoutDocumentInput, DocumentAccessUncheckedCreateWithoutDocumentInput>
  }

  export type DocumentAccessUpdateWithWhereUniqueWithoutDocumentInput = {
    where: DocumentAccessWhereUniqueInput
    data: XOR<DocumentAccessUpdateWithoutDocumentInput, DocumentAccessUncheckedUpdateWithoutDocumentInput>
  }

  export type DocumentAccessUpdateManyWithWhereWithoutDocumentInput = {
    where: DocumentAccessScalarWhereInput
    data: XOR<DocumentAccessUpdateManyMutationInput, DocumentAccessUncheckedUpdateManyWithoutDocumentInput>
  }

  export type OperationUpsertWithWhereUniqueWithoutDocumentInput = {
    where: OperationWhereUniqueInput
    update: XOR<OperationUpdateWithoutDocumentInput, OperationUncheckedUpdateWithoutDocumentInput>
    create: XOR<OperationCreateWithoutDocumentInput, OperationUncheckedCreateWithoutDocumentInput>
  }

  export type OperationUpdateWithWhereUniqueWithoutDocumentInput = {
    where: OperationWhereUniqueInput
    data: XOR<OperationUpdateWithoutDocumentInput, OperationUncheckedUpdateWithoutDocumentInput>
  }

  export type OperationUpdateManyWithWhereWithoutDocumentInput = {
    where: OperationScalarWhereInput
    data: XOR<OperationUpdateManyMutationInput, OperationUncheckedUpdateManyWithoutDocumentInput>
  }

  export type UserCursorUpsertWithWhereUniqueWithoutDocumentInput = {
    where: UserCursorWhereUniqueInput
    update: XOR<UserCursorUpdateWithoutDocumentInput, UserCursorUncheckedUpdateWithoutDocumentInput>
    create: XOR<UserCursorCreateWithoutDocumentInput, UserCursorUncheckedCreateWithoutDocumentInput>
  }

  export type UserCursorUpdateWithWhereUniqueWithoutDocumentInput = {
    where: UserCursorWhereUniqueInput
    data: XOR<UserCursorUpdateWithoutDocumentInput, UserCursorUncheckedUpdateWithoutDocumentInput>
  }

  export type UserCursorUpdateManyWithWhereWithoutDocumentInput = {
    where: UserCursorScalarWhereInput
    data: XOR<UserCursorUpdateManyMutationInput, UserCursorUncheckedUpdateManyWithoutDocumentInput>
  }

  export type DocumentSnapshotUpsertWithWhereUniqueWithoutDocumentInput = {
    where: DocumentSnapshotWhereUniqueInput
    update: XOR<DocumentSnapshotUpdateWithoutDocumentInput, DocumentSnapshotUncheckedUpdateWithoutDocumentInput>
    create: XOR<DocumentSnapshotCreateWithoutDocumentInput, DocumentSnapshotUncheckedCreateWithoutDocumentInput>
  }

  export type DocumentSnapshotUpdateWithWhereUniqueWithoutDocumentInput = {
    where: DocumentSnapshotWhereUniqueInput
    data: XOR<DocumentSnapshotUpdateWithoutDocumentInput, DocumentSnapshotUncheckedUpdateWithoutDocumentInput>
  }

  export type DocumentSnapshotUpdateManyWithWhereWithoutDocumentInput = {
    where: DocumentSnapshotScalarWhereInput
    data: XOR<DocumentSnapshotUpdateManyMutationInput, DocumentSnapshotUncheckedUpdateManyWithoutDocumentInput>
  }

  export type DocumentLineUpsertWithWhereUniqueWithoutDocumentInput = {
    where: DocumentLineWhereUniqueInput
    update: XOR<DocumentLineUpdateWithoutDocumentInput, DocumentLineUncheckedUpdateWithoutDocumentInput>
    create: XOR<DocumentLineCreateWithoutDocumentInput, DocumentLineUncheckedCreateWithoutDocumentInput>
  }

  export type DocumentLineUpdateWithWhereUniqueWithoutDocumentInput = {
    where: DocumentLineWhereUniqueInput
    data: XOR<DocumentLineUpdateWithoutDocumentInput, DocumentLineUncheckedUpdateWithoutDocumentInput>
  }

  export type DocumentLineUpdateManyWithWhereWithoutDocumentInput = {
    where: DocumentLineScalarWhereInput
    data: XOR<DocumentLineUpdateManyMutationInput, DocumentLineUncheckedUpdateManyWithoutDocumentInput>
  }

  export type DocumentLineScalarWhereInput = {
    AND?: DocumentLineScalarWhereInput | DocumentLineScalarWhereInput[]
    OR?: DocumentLineScalarWhereInput[]
    NOT?: DocumentLineScalarWhereInput | DocumentLineScalarWhereInput[]
    id?: StringFilter<"DocumentLine"> | string
    lineNumber?: IntFilter<"DocumentLine"> | number
    content?: StringFilter<"DocumentLine"> | string
    createdAt?: DateTimeFilter<"DocumentLine"> | Date | string
    documentId?: StringFilter<"DocumentLine"> | string
  }

  export type DocumentCreateWithoutDocumentAccessInput = {
    id?: string
    title: string
    content?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutOwnedDocumentsInput
    operations?: OperationCreateNestedManyWithoutDocumentInput
    cursors?: UserCursorCreateNestedManyWithoutDocumentInput
    snapshots?: DocumentSnapshotCreateNestedManyWithoutDocumentInput
    lines?: DocumentLineCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateWithoutDocumentAccessInput = {
    id?: string
    title: string
    content?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    operations?: OperationUncheckedCreateNestedManyWithoutDocumentInput
    cursors?: UserCursorUncheckedCreateNestedManyWithoutDocumentInput
    snapshots?: DocumentSnapshotUncheckedCreateNestedManyWithoutDocumentInput
    lines?: DocumentLineUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentCreateOrConnectWithoutDocumentAccessInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutDocumentAccessInput, DocumentUncheckedCreateWithoutDocumentAccessInput>
  }

  export type UserCreateWithoutDocumentAccessInput = {
    id?: string
    email: string
    name?: string | null
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedDocuments?: DocumentCreateNestedManyWithoutOwnerInput
    operations?: OperationCreateNestedManyWithoutUserInput
    cursors?: UserCursorCreateNestedManyWithoutUserInput
    presence?: UserPresenceCreateNestedOneWithoutUserInput
    documentSnapshots?: DocumentSnapshotCreateNestedManyWithoutCreatedByInput
    lineEdits?: LineEditCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDocumentAccessInput = {
    id?: string
    email: string
    name?: string | null
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedDocuments?: DocumentUncheckedCreateNestedManyWithoutOwnerInput
    operations?: OperationUncheckedCreateNestedManyWithoutUserInput
    cursors?: UserCursorUncheckedCreateNestedManyWithoutUserInput
    presence?: UserPresenceUncheckedCreateNestedOneWithoutUserInput
    documentSnapshots?: DocumentSnapshotUncheckedCreateNestedManyWithoutCreatedByInput
    lineEdits?: LineEditUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDocumentAccessInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDocumentAccessInput, UserUncheckedCreateWithoutDocumentAccessInput>
  }

  export type DocumentUpsertWithoutDocumentAccessInput = {
    update: XOR<DocumentUpdateWithoutDocumentAccessInput, DocumentUncheckedUpdateWithoutDocumentAccessInput>
    create: XOR<DocumentCreateWithoutDocumentAccessInput, DocumentUncheckedCreateWithoutDocumentAccessInput>
    where?: DocumentWhereInput
  }

  export type DocumentUpdateToOneWithWhereWithoutDocumentAccessInput = {
    where?: DocumentWhereInput
    data: XOR<DocumentUpdateWithoutDocumentAccessInput, DocumentUncheckedUpdateWithoutDocumentAccessInput>
  }

  export type DocumentUpdateWithoutDocumentAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutOwnedDocumentsNestedInput
    operations?: OperationUpdateManyWithoutDocumentNestedInput
    cursors?: UserCursorUpdateManyWithoutDocumentNestedInput
    snapshots?: DocumentSnapshotUpdateManyWithoutDocumentNestedInput
    lines?: DocumentLineUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateWithoutDocumentAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    operations?: OperationUncheckedUpdateManyWithoutDocumentNestedInput
    cursors?: UserCursorUncheckedUpdateManyWithoutDocumentNestedInput
    snapshots?: DocumentSnapshotUncheckedUpdateManyWithoutDocumentNestedInput
    lines?: DocumentLineUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type UserUpsertWithoutDocumentAccessInput = {
    update: XOR<UserUpdateWithoutDocumentAccessInput, UserUncheckedUpdateWithoutDocumentAccessInput>
    create: XOR<UserCreateWithoutDocumentAccessInput, UserUncheckedCreateWithoutDocumentAccessInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDocumentAccessInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDocumentAccessInput, UserUncheckedUpdateWithoutDocumentAccessInput>
  }

  export type UserUpdateWithoutDocumentAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedDocuments?: DocumentUpdateManyWithoutOwnerNestedInput
    operations?: OperationUpdateManyWithoutUserNestedInput
    cursors?: UserCursorUpdateManyWithoutUserNestedInput
    presence?: UserPresenceUpdateOneWithoutUserNestedInput
    documentSnapshots?: DocumentSnapshotUpdateManyWithoutCreatedByNestedInput
    lineEdits?: LineEditUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDocumentAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedDocuments?: DocumentUncheckedUpdateManyWithoutOwnerNestedInput
    operations?: OperationUncheckedUpdateManyWithoutUserNestedInput
    cursors?: UserCursorUncheckedUpdateManyWithoutUserNestedInput
    presence?: UserPresenceUncheckedUpdateOneWithoutUserNestedInput
    documentSnapshots?: DocumentSnapshotUncheckedUpdateManyWithoutCreatedByNestedInput
    lineEdits?: LineEditUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DocumentCreateWithoutOperationsInput = {
    id?: string
    title: string
    content?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutOwnedDocumentsInput
    documentAccess?: DocumentAccessCreateNestedManyWithoutDocumentInput
    cursors?: UserCursorCreateNestedManyWithoutDocumentInput
    snapshots?: DocumentSnapshotCreateNestedManyWithoutDocumentInput
    lines?: DocumentLineCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateWithoutOperationsInput = {
    id?: string
    title: string
    content?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    documentAccess?: DocumentAccessUncheckedCreateNestedManyWithoutDocumentInput
    cursors?: UserCursorUncheckedCreateNestedManyWithoutDocumentInput
    snapshots?: DocumentSnapshotUncheckedCreateNestedManyWithoutDocumentInput
    lines?: DocumentLineUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentCreateOrConnectWithoutOperationsInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutOperationsInput, DocumentUncheckedCreateWithoutOperationsInput>
  }

  export type UserCreateWithoutOperationsInput = {
    id?: string
    email: string
    name?: string | null
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedDocuments?: DocumentCreateNestedManyWithoutOwnerInput
    documentAccess?: DocumentAccessCreateNestedManyWithoutUserInput
    cursors?: UserCursorCreateNestedManyWithoutUserInput
    presence?: UserPresenceCreateNestedOneWithoutUserInput
    documentSnapshots?: DocumentSnapshotCreateNestedManyWithoutCreatedByInput
    lineEdits?: LineEditCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOperationsInput = {
    id?: string
    email: string
    name?: string | null
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedDocuments?: DocumentUncheckedCreateNestedManyWithoutOwnerInput
    documentAccess?: DocumentAccessUncheckedCreateNestedManyWithoutUserInput
    cursors?: UserCursorUncheckedCreateNestedManyWithoutUserInput
    presence?: UserPresenceUncheckedCreateNestedOneWithoutUserInput
    documentSnapshots?: DocumentSnapshotUncheckedCreateNestedManyWithoutCreatedByInput
    lineEdits?: LineEditUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOperationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOperationsInput, UserUncheckedCreateWithoutOperationsInput>
  }

  export type DocumentUpsertWithoutOperationsInput = {
    update: XOR<DocumentUpdateWithoutOperationsInput, DocumentUncheckedUpdateWithoutOperationsInput>
    create: XOR<DocumentCreateWithoutOperationsInput, DocumentUncheckedCreateWithoutOperationsInput>
    where?: DocumentWhereInput
  }

  export type DocumentUpdateToOneWithWhereWithoutOperationsInput = {
    where?: DocumentWhereInput
    data: XOR<DocumentUpdateWithoutOperationsInput, DocumentUncheckedUpdateWithoutOperationsInput>
  }

  export type DocumentUpdateWithoutOperationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutOwnedDocumentsNestedInput
    documentAccess?: DocumentAccessUpdateManyWithoutDocumentNestedInput
    cursors?: UserCursorUpdateManyWithoutDocumentNestedInput
    snapshots?: DocumentSnapshotUpdateManyWithoutDocumentNestedInput
    lines?: DocumentLineUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateWithoutOperationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    documentAccess?: DocumentAccessUncheckedUpdateManyWithoutDocumentNestedInput
    cursors?: UserCursorUncheckedUpdateManyWithoutDocumentNestedInput
    snapshots?: DocumentSnapshotUncheckedUpdateManyWithoutDocumentNestedInput
    lines?: DocumentLineUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type UserUpsertWithoutOperationsInput = {
    update: XOR<UserUpdateWithoutOperationsInput, UserUncheckedUpdateWithoutOperationsInput>
    create: XOR<UserCreateWithoutOperationsInput, UserUncheckedCreateWithoutOperationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOperationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOperationsInput, UserUncheckedUpdateWithoutOperationsInput>
  }

  export type UserUpdateWithoutOperationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedDocuments?: DocumentUpdateManyWithoutOwnerNestedInput
    documentAccess?: DocumentAccessUpdateManyWithoutUserNestedInput
    cursors?: UserCursorUpdateManyWithoutUserNestedInput
    presence?: UserPresenceUpdateOneWithoutUserNestedInput
    documentSnapshots?: DocumentSnapshotUpdateManyWithoutCreatedByNestedInput
    lineEdits?: LineEditUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOperationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedDocuments?: DocumentUncheckedUpdateManyWithoutOwnerNestedInput
    documentAccess?: DocumentAccessUncheckedUpdateManyWithoutUserNestedInput
    cursors?: UserCursorUncheckedUpdateManyWithoutUserNestedInput
    presence?: UserPresenceUncheckedUpdateOneWithoutUserNestedInput
    documentSnapshots?: DocumentSnapshotUncheckedUpdateManyWithoutCreatedByNestedInput
    lineEdits?: LineEditUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DocumentCreateWithoutCursorsInput = {
    id?: string
    title: string
    content?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutOwnedDocumentsInput
    documentAccess?: DocumentAccessCreateNestedManyWithoutDocumentInput
    operations?: OperationCreateNestedManyWithoutDocumentInput
    snapshots?: DocumentSnapshotCreateNestedManyWithoutDocumentInput
    lines?: DocumentLineCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateWithoutCursorsInput = {
    id?: string
    title: string
    content?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    documentAccess?: DocumentAccessUncheckedCreateNestedManyWithoutDocumentInput
    operations?: OperationUncheckedCreateNestedManyWithoutDocumentInput
    snapshots?: DocumentSnapshotUncheckedCreateNestedManyWithoutDocumentInput
    lines?: DocumentLineUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentCreateOrConnectWithoutCursorsInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutCursorsInput, DocumentUncheckedCreateWithoutCursorsInput>
  }

  export type UserCreateWithoutCursorsInput = {
    id?: string
    email: string
    name?: string | null
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedDocuments?: DocumentCreateNestedManyWithoutOwnerInput
    documentAccess?: DocumentAccessCreateNestedManyWithoutUserInput
    operations?: OperationCreateNestedManyWithoutUserInput
    presence?: UserPresenceCreateNestedOneWithoutUserInput
    documentSnapshots?: DocumentSnapshotCreateNestedManyWithoutCreatedByInput
    lineEdits?: LineEditCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCursorsInput = {
    id?: string
    email: string
    name?: string | null
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedDocuments?: DocumentUncheckedCreateNestedManyWithoutOwnerInput
    documentAccess?: DocumentAccessUncheckedCreateNestedManyWithoutUserInput
    operations?: OperationUncheckedCreateNestedManyWithoutUserInput
    presence?: UserPresenceUncheckedCreateNestedOneWithoutUserInput
    documentSnapshots?: DocumentSnapshotUncheckedCreateNestedManyWithoutCreatedByInput
    lineEdits?: LineEditUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCursorsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCursorsInput, UserUncheckedCreateWithoutCursorsInput>
  }

  export type DocumentUpsertWithoutCursorsInput = {
    update: XOR<DocumentUpdateWithoutCursorsInput, DocumentUncheckedUpdateWithoutCursorsInput>
    create: XOR<DocumentCreateWithoutCursorsInput, DocumentUncheckedCreateWithoutCursorsInput>
    where?: DocumentWhereInput
  }

  export type DocumentUpdateToOneWithWhereWithoutCursorsInput = {
    where?: DocumentWhereInput
    data: XOR<DocumentUpdateWithoutCursorsInput, DocumentUncheckedUpdateWithoutCursorsInput>
  }

  export type DocumentUpdateWithoutCursorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutOwnedDocumentsNestedInput
    documentAccess?: DocumentAccessUpdateManyWithoutDocumentNestedInput
    operations?: OperationUpdateManyWithoutDocumentNestedInput
    snapshots?: DocumentSnapshotUpdateManyWithoutDocumentNestedInput
    lines?: DocumentLineUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateWithoutCursorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    documentAccess?: DocumentAccessUncheckedUpdateManyWithoutDocumentNestedInput
    operations?: OperationUncheckedUpdateManyWithoutDocumentNestedInput
    snapshots?: DocumentSnapshotUncheckedUpdateManyWithoutDocumentNestedInput
    lines?: DocumentLineUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type UserUpsertWithoutCursorsInput = {
    update: XOR<UserUpdateWithoutCursorsInput, UserUncheckedUpdateWithoutCursorsInput>
    create: XOR<UserCreateWithoutCursorsInput, UserUncheckedCreateWithoutCursorsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCursorsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCursorsInput, UserUncheckedUpdateWithoutCursorsInput>
  }

  export type UserUpdateWithoutCursorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedDocuments?: DocumentUpdateManyWithoutOwnerNestedInput
    documentAccess?: DocumentAccessUpdateManyWithoutUserNestedInput
    operations?: OperationUpdateManyWithoutUserNestedInput
    presence?: UserPresenceUpdateOneWithoutUserNestedInput
    documentSnapshots?: DocumentSnapshotUpdateManyWithoutCreatedByNestedInput
    lineEdits?: LineEditUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCursorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedDocuments?: DocumentUncheckedUpdateManyWithoutOwnerNestedInput
    documentAccess?: DocumentAccessUncheckedUpdateManyWithoutUserNestedInput
    operations?: OperationUncheckedUpdateManyWithoutUserNestedInput
    presence?: UserPresenceUncheckedUpdateOneWithoutUserNestedInput
    documentSnapshots?: DocumentSnapshotUncheckedUpdateManyWithoutCreatedByNestedInput
    lineEdits?: LineEditUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPresenceInput = {
    id?: string
    email: string
    name?: string | null
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedDocuments?: DocumentCreateNestedManyWithoutOwnerInput
    documentAccess?: DocumentAccessCreateNestedManyWithoutUserInput
    operations?: OperationCreateNestedManyWithoutUserInput
    cursors?: UserCursorCreateNestedManyWithoutUserInput
    documentSnapshots?: DocumentSnapshotCreateNestedManyWithoutCreatedByInput
    lineEdits?: LineEditCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPresenceInput = {
    id?: string
    email: string
    name?: string | null
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedDocuments?: DocumentUncheckedCreateNestedManyWithoutOwnerInput
    documentAccess?: DocumentAccessUncheckedCreateNestedManyWithoutUserInput
    operations?: OperationUncheckedCreateNestedManyWithoutUserInput
    cursors?: UserCursorUncheckedCreateNestedManyWithoutUserInput
    documentSnapshots?: DocumentSnapshotUncheckedCreateNestedManyWithoutCreatedByInput
    lineEdits?: LineEditUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPresenceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPresenceInput, UserUncheckedCreateWithoutPresenceInput>
  }

  export type UserUpsertWithoutPresenceInput = {
    update: XOR<UserUpdateWithoutPresenceInput, UserUncheckedUpdateWithoutPresenceInput>
    create: XOR<UserCreateWithoutPresenceInput, UserUncheckedCreateWithoutPresenceInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPresenceInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPresenceInput, UserUncheckedUpdateWithoutPresenceInput>
  }

  export type UserUpdateWithoutPresenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedDocuments?: DocumentUpdateManyWithoutOwnerNestedInput
    documentAccess?: DocumentAccessUpdateManyWithoutUserNestedInput
    operations?: OperationUpdateManyWithoutUserNestedInput
    cursors?: UserCursorUpdateManyWithoutUserNestedInput
    documentSnapshots?: DocumentSnapshotUpdateManyWithoutCreatedByNestedInput
    lineEdits?: LineEditUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPresenceInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedDocuments?: DocumentUncheckedUpdateManyWithoutOwnerNestedInput
    documentAccess?: DocumentAccessUncheckedUpdateManyWithoutUserNestedInput
    operations?: OperationUncheckedUpdateManyWithoutUserNestedInput
    cursors?: UserCursorUncheckedUpdateManyWithoutUserNestedInput
    documentSnapshots?: DocumentSnapshotUncheckedUpdateManyWithoutCreatedByNestedInput
    lineEdits?: LineEditUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DocumentCreateWithoutSnapshotsInput = {
    id?: string
    title: string
    content?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutOwnedDocumentsInput
    documentAccess?: DocumentAccessCreateNestedManyWithoutDocumentInput
    operations?: OperationCreateNestedManyWithoutDocumentInput
    cursors?: UserCursorCreateNestedManyWithoutDocumentInput
    lines?: DocumentLineCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateWithoutSnapshotsInput = {
    id?: string
    title: string
    content?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    documentAccess?: DocumentAccessUncheckedCreateNestedManyWithoutDocumentInput
    operations?: OperationUncheckedCreateNestedManyWithoutDocumentInput
    cursors?: UserCursorUncheckedCreateNestedManyWithoutDocumentInput
    lines?: DocumentLineUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentCreateOrConnectWithoutSnapshotsInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutSnapshotsInput, DocumentUncheckedCreateWithoutSnapshotsInput>
  }

  export type UserCreateWithoutDocumentSnapshotsInput = {
    id?: string
    email: string
    name?: string | null
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedDocuments?: DocumentCreateNestedManyWithoutOwnerInput
    documentAccess?: DocumentAccessCreateNestedManyWithoutUserInput
    operations?: OperationCreateNestedManyWithoutUserInput
    cursors?: UserCursorCreateNestedManyWithoutUserInput
    presence?: UserPresenceCreateNestedOneWithoutUserInput
    lineEdits?: LineEditCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDocumentSnapshotsInput = {
    id?: string
    email: string
    name?: string | null
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedDocuments?: DocumentUncheckedCreateNestedManyWithoutOwnerInput
    documentAccess?: DocumentAccessUncheckedCreateNestedManyWithoutUserInput
    operations?: OperationUncheckedCreateNestedManyWithoutUserInput
    cursors?: UserCursorUncheckedCreateNestedManyWithoutUserInput
    presence?: UserPresenceUncheckedCreateNestedOneWithoutUserInput
    lineEdits?: LineEditUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDocumentSnapshotsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDocumentSnapshotsInput, UserUncheckedCreateWithoutDocumentSnapshotsInput>
  }

  export type DocumentUpsertWithoutSnapshotsInput = {
    update: XOR<DocumentUpdateWithoutSnapshotsInput, DocumentUncheckedUpdateWithoutSnapshotsInput>
    create: XOR<DocumentCreateWithoutSnapshotsInput, DocumentUncheckedCreateWithoutSnapshotsInput>
    where?: DocumentWhereInput
  }

  export type DocumentUpdateToOneWithWhereWithoutSnapshotsInput = {
    where?: DocumentWhereInput
    data: XOR<DocumentUpdateWithoutSnapshotsInput, DocumentUncheckedUpdateWithoutSnapshotsInput>
  }

  export type DocumentUpdateWithoutSnapshotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutOwnedDocumentsNestedInput
    documentAccess?: DocumentAccessUpdateManyWithoutDocumentNestedInput
    operations?: OperationUpdateManyWithoutDocumentNestedInput
    cursors?: UserCursorUpdateManyWithoutDocumentNestedInput
    lines?: DocumentLineUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateWithoutSnapshotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    documentAccess?: DocumentAccessUncheckedUpdateManyWithoutDocumentNestedInput
    operations?: OperationUncheckedUpdateManyWithoutDocumentNestedInput
    cursors?: UserCursorUncheckedUpdateManyWithoutDocumentNestedInput
    lines?: DocumentLineUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type UserUpsertWithoutDocumentSnapshotsInput = {
    update: XOR<UserUpdateWithoutDocumentSnapshotsInput, UserUncheckedUpdateWithoutDocumentSnapshotsInput>
    create: XOR<UserCreateWithoutDocumentSnapshotsInput, UserUncheckedCreateWithoutDocumentSnapshotsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDocumentSnapshotsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDocumentSnapshotsInput, UserUncheckedUpdateWithoutDocumentSnapshotsInput>
  }

  export type UserUpdateWithoutDocumentSnapshotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedDocuments?: DocumentUpdateManyWithoutOwnerNestedInput
    documentAccess?: DocumentAccessUpdateManyWithoutUserNestedInput
    operations?: OperationUpdateManyWithoutUserNestedInput
    cursors?: UserCursorUpdateManyWithoutUserNestedInput
    presence?: UserPresenceUpdateOneWithoutUserNestedInput
    lineEdits?: LineEditUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDocumentSnapshotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedDocuments?: DocumentUncheckedUpdateManyWithoutOwnerNestedInput
    documentAccess?: DocumentAccessUncheckedUpdateManyWithoutUserNestedInput
    operations?: OperationUncheckedUpdateManyWithoutUserNestedInput
    cursors?: UserCursorUncheckedUpdateManyWithoutUserNestedInput
    presence?: UserPresenceUncheckedUpdateOneWithoutUserNestedInput
    lineEdits?: LineEditUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DocumentCreateWithoutLinesInput = {
    id?: string
    title: string
    content?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutOwnedDocumentsInput
    documentAccess?: DocumentAccessCreateNestedManyWithoutDocumentInput
    operations?: OperationCreateNestedManyWithoutDocumentInput
    cursors?: UserCursorCreateNestedManyWithoutDocumentInput
    snapshots?: DocumentSnapshotCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateWithoutLinesInput = {
    id?: string
    title: string
    content?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    documentAccess?: DocumentAccessUncheckedCreateNestedManyWithoutDocumentInput
    operations?: OperationUncheckedCreateNestedManyWithoutDocumentInput
    cursors?: UserCursorUncheckedCreateNestedManyWithoutDocumentInput
    snapshots?: DocumentSnapshotUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentCreateOrConnectWithoutLinesInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutLinesInput, DocumentUncheckedCreateWithoutLinesInput>
  }

  export type LineEditCreateWithoutLineInput = {
    id?: string
    editedAt?: Date | string
    user: UserCreateNestedOneWithoutLineEditsInput
  }

  export type LineEditUncheckedCreateWithoutLineInput = {
    id?: string
    editedAt?: Date | string
    userId: string
  }

  export type LineEditCreateOrConnectWithoutLineInput = {
    where: LineEditWhereUniqueInput
    create: XOR<LineEditCreateWithoutLineInput, LineEditUncheckedCreateWithoutLineInput>
  }

  export type LineEditCreateManyLineInputEnvelope = {
    data: LineEditCreateManyLineInput | LineEditCreateManyLineInput[]
    skipDuplicates?: boolean
  }

  export type DocumentUpsertWithoutLinesInput = {
    update: XOR<DocumentUpdateWithoutLinesInput, DocumentUncheckedUpdateWithoutLinesInput>
    create: XOR<DocumentCreateWithoutLinesInput, DocumentUncheckedCreateWithoutLinesInput>
    where?: DocumentWhereInput
  }

  export type DocumentUpdateToOneWithWhereWithoutLinesInput = {
    where?: DocumentWhereInput
    data: XOR<DocumentUpdateWithoutLinesInput, DocumentUncheckedUpdateWithoutLinesInput>
  }

  export type DocumentUpdateWithoutLinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutOwnedDocumentsNestedInput
    documentAccess?: DocumentAccessUpdateManyWithoutDocumentNestedInput
    operations?: OperationUpdateManyWithoutDocumentNestedInput
    cursors?: UserCursorUpdateManyWithoutDocumentNestedInput
    snapshots?: DocumentSnapshotUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateWithoutLinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    documentAccess?: DocumentAccessUncheckedUpdateManyWithoutDocumentNestedInput
    operations?: OperationUncheckedUpdateManyWithoutDocumentNestedInput
    cursors?: UserCursorUncheckedUpdateManyWithoutDocumentNestedInput
    snapshots?: DocumentSnapshotUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type LineEditUpsertWithWhereUniqueWithoutLineInput = {
    where: LineEditWhereUniqueInput
    update: XOR<LineEditUpdateWithoutLineInput, LineEditUncheckedUpdateWithoutLineInput>
    create: XOR<LineEditCreateWithoutLineInput, LineEditUncheckedCreateWithoutLineInput>
  }

  export type LineEditUpdateWithWhereUniqueWithoutLineInput = {
    where: LineEditWhereUniqueInput
    data: XOR<LineEditUpdateWithoutLineInput, LineEditUncheckedUpdateWithoutLineInput>
  }

  export type LineEditUpdateManyWithWhereWithoutLineInput = {
    where: LineEditScalarWhereInput
    data: XOR<LineEditUpdateManyMutationInput, LineEditUncheckedUpdateManyWithoutLineInput>
  }

  export type DocumentLineCreateWithoutLineEditsInput = {
    id?: string
    lineNumber: number
    content: string
    createdAt?: Date | string
    document: DocumentCreateNestedOneWithoutLinesInput
  }

  export type DocumentLineUncheckedCreateWithoutLineEditsInput = {
    id?: string
    lineNumber: number
    content: string
    createdAt?: Date | string
    documentId: string
  }

  export type DocumentLineCreateOrConnectWithoutLineEditsInput = {
    where: DocumentLineWhereUniqueInput
    create: XOR<DocumentLineCreateWithoutLineEditsInput, DocumentLineUncheckedCreateWithoutLineEditsInput>
  }

  export type UserCreateWithoutLineEditsInput = {
    id?: string
    email: string
    name?: string | null
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedDocuments?: DocumentCreateNestedManyWithoutOwnerInput
    documentAccess?: DocumentAccessCreateNestedManyWithoutUserInput
    operations?: OperationCreateNestedManyWithoutUserInput
    cursors?: UserCursorCreateNestedManyWithoutUserInput
    presence?: UserPresenceCreateNestedOneWithoutUserInput
    documentSnapshots?: DocumentSnapshotCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutLineEditsInput = {
    id?: string
    email: string
    name?: string | null
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedDocuments?: DocumentUncheckedCreateNestedManyWithoutOwnerInput
    documentAccess?: DocumentAccessUncheckedCreateNestedManyWithoutUserInput
    operations?: OperationUncheckedCreateNestedManyWithoutUserInput
    cursors?: UserCursorUncheckedCreateNestedManyWithoutUserInput
    presence?: UserPresenceUncheckedCreateNestedOneWithoutUserInput
    documentSnapshots?: DocumentSnapshotUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutLineEditsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLineEditsInput, UserUncheckedCreateWithoutLineEditsInput>
  }

  export type DocumentLineUpsertWithoutLineEditsInput = {
    update: XOR<DocumentLineUpdateWithoutLineEditsInput, DocumentLineUncheckedUpdateWithoutLineEditsInput>
    create: XOR<DocumentLineCreateWithoutLineEditsInput, DocumentLineUncheckedCreateWithoutLineEditsInput>
    where?: DocumentLineWhereInput
  }

  export type DocumentLineUpdateToOneWithWhereWithoutLineEditsInput = {
    where?: DocumentLineWhereInput
    data: XOR<DocumentLineUpdateWithoutLineEditsInput, DocumentLineUncheckedUpdateWithoutLineEditsInput>
  }

  export type DocumentLineUpdateWithoutLineEditsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lineNumber?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    document?: DocumentUpdateOneRequiredWithoutLinesNestedInput
  }

  export type DocumentLineUncheckedUpdateWithoutLineEditsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lineNumber?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutLineEditsInput = {
    update: XOR<UserUpdateWithoutLineEditsInput, UserUncheckedUpdateWithoutLineEditsInput>
    create: XOR<UserCreateWithoutLineEditsInput, UserUncheckedCreateWithoutLineEditsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLineEditsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLineEditsInput, UserUncheckedUpdateWithoutLineEditsInput>
  }

  export type UserUpdateWithoutLineEditsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedDocuments?: DocumentUpdateManyWithoutOwnerNestedInput
    documentAccess?: DocumentAccessUpdateManyWithoutUserNestedInput
    operations?: OperationUpdateManyWithoutUserNestedInput
    cursors?: UserCursorUpdateManyWithoutUserNestedInput
    presence?: UserPresenceUpdateOneWithoutUserNestedInput
    documentSnapshots?: DocumentSnapshotUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutLineEditsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedDocuments?: DocumentUncheckedUpdateManyWithoutOwnerNestedInput
    documentAccess?: DocumentAccessUncheckedUpdateManyWithoutUserNestedInput
    operations?: OperationUncheckedUpdateManyWithoutUserNestedInput
    cursors?: UserCursorUncheckedUpdateManyWithoutUserNestedInput
    presence?: UserPresenceUncheckedUpdateOneWithoutUserNestedInput
    documentSnapshots?: DocumentSnapshotUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type DocumentCreateManyOwnerInput = {
    id?: string
    title: string
    content?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentAccessCreateManyUserInput = {
    id?: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    documentId: string
  }

  export type OperationCreateManyUserInput = {
    id?: string
    type: $Enums.OpType
    position: number
    length?: number | null
    content?: string | null
    createdAt?: Date | string
    documentId: string
  }

  export type UserCursorCreateManyUserInput = {
    id?: string
    cursorPos: number
    selectionStart?: number | null
    selectionEnd?: number | null
    color?: string
    lastActive?: Date | string
    documentId: string
  }

  export type DocumentSnapshotCreateManyCreatedByInput = {
    id?: string
    content: string
    createdAt?: Date | string
    documentId: string
  }

  export type LineEditCreateManyUserInput = {
    id?: string
    editedAt?: Date | string
    lineId: string
  }

  export type DocumentUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentAccess?: DocumentAccessUpdateManyWithoutDocumentNestedInput
    operations?: OperationUpdateManyWithoutDocumentNestedInput
    cursors?: UserCursorUpdateManyWithoutDocumentNestedInput
    snapshots?: DocumentSnapshotUpdateManyWithoutDocumentNestedInput
    lines?: DocumentLineUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentAccess?: DocumentAccessUncheckedUpdateManyWithoutDocumentNestedInput
    operations?: OperationUncheckedUpdateManyWithoutDocumentNestedInput
    cursors?: UserCursorUncheckedUpdateManyWithoutDocumentNestedInput
    snapshots?: DocumentSnapshotUncheckedUpdateManyWithoutDocumentNestedInput
    lines?: DocumentLineUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentAccessUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    document?: DocumentUpdateOneRequiredWithoutDocumentAccessNestedInput
  }

  export type DocumentAccessUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentAccessUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: StringFieldUpdateOperationsInput | string
  }

  export type OperationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumOpTypeFieldUpdateOperationsInput | $Enums.OpType
    position?: IntFieldUpdateOperationsInput | number
    length?: NullableIntFieldUpdateOperationsInput | number | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    document?: DocumentUpdateOneRequiredWithoutOperationsNestedInput
  }

  export type OperationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumOpTypeFieldUpdateOperationsInput | $Enums.OpType
    position?: IntFieldUpdateOperationsInput | number
    length?: NullableIntFieldUpdateOperationsInput | number | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: StringFieldUpdateOperationsInput | string
  }

  export type OperationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumOpTypeFieldUpdateOperationsInput | $Enums.OpType
    position?: IntFieldUpdateOperationsInput | number
    length?: NullableIntFieldUpdateOperationsInput | number | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCursorUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    cursorPos?: IntFieldUpdateOperationsInput | number
    selectionStart?: NullableIntFieldUpdateOperationsInput | number | null
    selectionEnd?: NullableIntFieldUpdateOperationsInput | number | null
    color?: StringFieldUpdateOperationsInput | string
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    document?: DocumentUpdateOneRequiredWithoutCursorsNestedInput
  }

  export type UserCursorUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    cursorPos?: IntFieldUpdateOperationsInput | number
    selectionStart?: NullableIntFieldUpdateOperationsInput | number | null
    selectionEnd?: NullableIntFieldUpdateOperationsInput | number | null
    color?: StringFieldUpdateOperationsInput | string
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCursorUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    cursorPos?: IntFieldUpdateOperationsInput | number
    selectionStart?: NullableIntFieldUpdateOperationsInput | number | null
    selectionEnd?: NullableIntFieldUpdateOperationsInput | number | null
    color?: StringFieldUpdateOperationsInput | string
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentSnapshotUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    document?: DocumentUpdateOneRequiredWithoutSnapshotsNestedInput
  }

  export type DocumentSnapshotUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentSnapshotUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentId?: StringFieldUpdateOperationsInput | string
  }

  export type LineEditUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    editedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    line?: DocumentLineUpdateOneRequiredWithoutLineEditsNestedInput
  }

  export type LineEditUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    editedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lineId?: StringFieldUpdateOperationsInput | string
  }

  export type LineEditUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    editedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lineId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentAccessCreateManyDocumentInput = {
    id?: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type OperationCreateManyDocumentInput = {
    id?: string
    type: $Enums.OpType
    position: number
    length?: number | null
    content?: string | null
    createdAt?: Date | string
    userId: string
  }

  export type UserCursorCreateManyDocumentInput = {
    id?: string
    cursorPos: number
    selectionStart?: number | null
    selectionEnd?: number | null
    color?: string
    lastActive?: Date | string
    userId: string
  }

  export type DocumentSnapshotCreateManyDocumentInput = {
    id?: string
    content: string
    createdAt?: Date | string
    createdById: string
  }

  export type DocumentLineCreateManyDocumentInput = {
    id?: string
    lineNumber: number
    content: string
    createdAt?: Date | string
  }

  export type DocumentAccessUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDocumentAccessNestedInput
  }

  export type DocumentAccessUncheckedUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentAccessUncheckedUpdateManyWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type OperationUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumOpTypeFieldUpdateOperationsInput | $Enums.OpType
    position?: IntFieldUpdateOperationsInput | number
    length?: NullableIntFieldUpdateOperationsInput | number | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOperationsNestedInput
  }

  export type OperationUncheckedUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumOpTypeFieldUpdateOperationsInput | $Enums.OpType
    position?: IntFieldUpdateOperationsInput | number
    length?: NullableIntFieldUpdateOperationsInput | number | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type OperationUncheckedUpdateManyWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumOpTypeFieldUpdateOperationsInput | $Enums.OpType
    position?: IntFieldUpdateOperationsInput | number
    length?: NullableIntFieldUpdateOperationsInput | number | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCursorUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    cursorPos?: IntFieldUpdateOperationsInput | number
    selectionStart?: NullableIntFieldUpdateOperationsInput | number | null
    selectionEnd?: NullableIntFieldUpdateOperationsInput | number | null
    color?: StringFieldUpdateOperationsInput | string
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCursorsNestedInput
  }

  export type UserCursorUncheckedUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    cursorPos?: IntFieldUpdateOperationsInput | number
    selectionStart?: NullableIntFieldUpdateOperationsInput | number | null
    selectionEnd?: NullableIntFieldUpdateOperationsInput | number | null
    color?: StringFieldUpdateOperationsInput | string
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCursorUncheckedUpdateManyWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    cursorPos?: IntFieldUpdateOperationsInput | number
    selectionStart?: NullableIntFieldUpdateOperationsInput | number | null
    selectionEnd?: NullableIntFieldUpdateOperationsInput | number | null
    color?: StringFieldUpdateOperationsInput | string
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentSnapshotUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutDocumentSnapshotsNestedInput
  }

  export type DocumentSnapshotUncheckedUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentSnapshotUncheckedUpdateManyWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentLineUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    lineNumber?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lineEdits?: LineEditUpdateManyWithoutLineNestedInput
  }

  export type DocumentLineUncheckedUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    lineNumber?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lineEdits?: LineEditUncheckedUpdateManyWithoutLineNestedInput
  }

  export type DocumentLineUncheckedUpdateManyWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    lineNumber?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LineEditCreateManyLineInput = {
    id?: string
    editedAt?: Date | string
    userId: string
  }

  export type LineEditUpdateWithoutLineInput = {
    id?: StringFieldUpdateOperationsInput | string
    editedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLineEditsNestedInput
  }

  export type LineEditUncheckedUpdateWithoutLineInput = {
    id?: StringFieldUpdateOperationsInput | string
    editedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type LineEditUncheckedUpdateManyWithoutLineInput = {
    id?: StringFieldUpdateOperationsInput | string
    editedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}